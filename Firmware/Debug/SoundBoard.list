
SoundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006878  08006878  00016878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068c0  080068c0  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080068c0  080068c0  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068c0  080068c0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068c0  080068c0  000168c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068c4  080068c4  000168c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080068c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000194c  200001e4  08006aac  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b30  08006aac  00021b30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175d3  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000034ad  00000000  00000000  000377e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001200  00000000  00000000  0003ac98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001078  00000000  00000000  0003be98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022d69  00000000  00000000  0003cf10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010731  00000000  00000000  0005fc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb416  00000000  00000000  000703aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b7c0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b28  00000000  00000000  0013b83c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006860 	.word	0x08006860

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08006860 	.word	0x08006860

080001c8 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <LL_RCC_HSE_Enable+0x1c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <LL_RCC_HSE_Enable+0x1c>)
 80001d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40023800 	.word	0x40023800

080001e8 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80001ec:	4b07      	ldr	r3, [pc, #28]	; (800020c <LL_RCC_HSE_IsReady+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80001f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80001f8:	bf0c      	ite	eq
 80001fa:	2301      	moveq	r3, #1
 80001fc:	2300      	movne	r3, #0
 80001fe:	b2db      	uxtb	r3, r3
}
 8000200:	4618      	mov	r0, r3
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	40023800 	.word	0x40023800

08000210 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000218:	4b06      	ldr	r3, [pc, #24]	; (8000234 <LL_RCC_SetSysClkSource+0x24>)
 800021a:	689b      	ldr	r3, [r3, #8]
 800021c:	f023 0203 	bic.w	r2, r3, #3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_RCC_SetSysClkSource+0x24>)
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	4313      	orrs	r3, r2
 8000226:	608b      	str	r3, [r1, #8]
}
 8000228:	bf00      	nop
 800022a:	370c      	adds	r7, #12
 800022c:	46bd      	mov	sp, r7
 800022e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000232:	4770      	bx	lr
 8000234:	40023800 	.word	0x40023800

08000238 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000238:	b480      	push	{r7}
 800023a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <LL_RCC_GetSysClkSource+0x18>)
 800023e:	689b      	ldr	r3, [r3, #8]
 8000240:	f003 030c 	and.w	r3, r3, #12
}
 8000244:	4618      	mov	r0, r3
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	40023800 	.word	0x40023800

08000254 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000254:	b480      	push	{r7}
 8000256:	b083      	sub	sp, #12
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800025c:	4b06      	ldr	r3, [pc, #24]	; (8000278 <LL_RCC_SetAHBPrescaler+0x24>)
 800025e:	689b      	ldr	r3, [r3, #8]
 8000260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000264:	4904      	ldr	r1, [pc, #16]	; (8000278 <LL_RCC_SetAHBPrescaler+0x24>)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4313      	orrs	r3, r2
 800026a:	608b      	str	r3, [r1, #8]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	40023800 	.word	0x40023800

0800027c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000286:	689b      	ldr	r3, [r3, #8]
 8000288:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800028c:	4904      	ldr	r1, [pc, #16]	; (80002a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	608b      	str	r3, [r1, #8]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40023800 	.word	0x40023800

080002a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002ae:	689b      	ldr	r3, [r3, #8]
 80002b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	608b      	str	r3, [r1, #8]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40023800 	.word	0x40023800

080002cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <LL_RCC_PLL_Enable+0x1c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a04      	ldr	r2, [pc, #16]	; (80002e8 <LL_RCC_PLL_Enable+0x1c>)
 80002d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80002da:	6013      	str	r3, [r2, #0]
}
 80002dc:	bf00      	nop
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	40023800 	.word	0x40023800

080002ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <LL_RCC_PLL_IsReady+0x24>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80002fc:	bf0c      	ite	eq
 80002fe:	2301      	moveq	r3, #1
 8000300:	2300      	movne	r3, #0
 8000302:	b2db      	uxtb	r3, r3
}
 8000304:	4618      	mov	r0, r3
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40023800 	.word	0x40023800

08000314 <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	60f8      	str	r0, [r7, #12]
 800031c:	60b9      	str	r1, [r7, #8]
 800031e:	607a      	str	r2, [r7, #4]
 8000320:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 8000322:	4b0a      	ldr	r3, [pc, #40]	; (800034c <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000324:	685a      	ldr	r2, [r3, #4]
 8000326:	4b0a      	ldr	r3, [pc, #40]	; (8000350 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000328:	4013      	ands	r3, r2
 800032a:	68f9      	ldr	r1, [r7, #12]
 800032c:	68ba      	ldr	r2, [r7, #8]
 800032e:	4311      	orrs	r1, r2
 8000330:	687a      	ldr	r2, [r7, #4]
 8000332:	0192      	lsls	r2, r2, #6
 8000334:	4311      	orrs	r1, r2
 8000336:	683a      	ldr	r2, [r7, #0]
 8000338:	430a      	orrs	r2, r1
 800033a:	4904      	ldr	r1, [pc, #16]	; (800034c <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800033c:	4313      	orrs	r3, r2
 800033e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	40023800 	.word	0x40023800
 8000350:	f0bf8000 	.word	0xf0bf8000

08000354 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800035c:	4b08      	ldr	r3, [pc, #32]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800035e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000360:	4907      	ldr	r1, [pc, #28]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4313      	orrs	r3, r2
 8000366:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000368:	4b05      	ldr	r3, [pc, #20]	; (8000380 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800036a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4013      	ands	r3, r2
 8000370:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000372:	68fb      	ldr	r3, [r7, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	40023800 	.word	0x40023800

08000384 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800038c:	4b06      	ldr	r3, [pc, #24]	; (80003a8 <LL_FLASH_SetLatency+0x24>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f023 020f 	bic.w	r2, r3, #15
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_FLASH_SetLatency+0x24>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	600b      	str	r3, [r1, #0]
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	40023c00 	.word	0x40023c00

080003ac <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80003b0:	4b04      	ldr	r3, [pc, #16]	; (80003c4 <LL_FLASH_GetLatency+0x18>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f003 030f 	and.w	r3, r3, #15
}
 80003b8:	4618      	mov	r0, r3
 80003ba:	46bd      	mov	sp, r7
 80003bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c0:	4770      	bx	lr
 80003c2:	bf00      	nop
 80003c4:	40023c00 	.word	0x40023c00

080003c8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80003c8:	b480      	push	{r7}
 80003ca:	b083      	sub	sp, #12
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80003d8:	4904      	ldr	r1, [pc, #16]	; (80003ec <LL_PWR_SetRegulVoltageScaling+0x24>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	600b      	str	r3, [r1, #0]
}
 80003e0:	bf00      	nop
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr
 80003ec:	40007000 	.word	0x40007000

080003f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b083      	sub	sp, #12
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	041a      	lsls	r2, r3, #16
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	619a      	str	r2, [r3, #24]
}
 8000402:	bf00      	nop
 8000404:	370c      	adds	r7, #12
 8000406:	46bd      	mov	sp, r7
 8000408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040c:	4770      	bx	lr
	...

08000410 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint8_t data = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	70fb      	strb	r3, [r7, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041a:	f000 fa43 	bl	80008a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800041e:	f000 f819 	bl	8000454 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000422:	f000 f8c5 	bl	80005b0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000426:	f005 fc4d 	bl	8005cc4 <MX_USB_DEVICE_Init>
  MX_TIM3_Init();
 800042a:	f000 f85d 	bl	80004e8 <MX_TIM3_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  for(int i = 0; i < 25 * 1000; i++)
 800042e:	2300      	movs	r3, #0
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	e002      	b.n	800043a <main+0x2a>
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	3301      	adds	r3, #1
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	f246 12a7 	movw	r2, #24999	; 0x61a7
 8000440:	4293      	cmp	r3, r2
 8000442:	ddf7      	ble.n	8000434 <main+0x24>
	  {}

	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 8000444:	2110      	movs	r1, #16
 8000446:	4802      	ldr	r0, [pc, #8]	; (8000450 <main+0x40>)
 8000448:	f000 fd6c 	bl	8000f24 <HAL_GPIO_TogglePin>
	  for(int i = 0; i < 25 * 1000; i++)
 800044c:	e7ef      	b.n	800042e <main+0x1e>
 800044e:	bf00      	nop
 8000450:	40020000 	.word	0x40020000

08000454 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ff93 	bl	8000384 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 800045e:	f7ff ffa5 	bl	80003ac <LL_FLASH_GetLatency>
 8000462:	4603      	mov	r3, r0
 8000464:	2b00      	cmp	r3, #0
 8000466:	d001      	beq.n	800046c <SystemClock_Config+0x18>
  {
  Error_Handler();  
 8000468:	f000 f916 	bl	8000698 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800046c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000470:	f7ff ffaa 	bl	80003c8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 8000474:	f7ff fea8 	bl	80001c8 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000478:	bf00      	nop
 800047a:	f7ff feb5 	bl	80001e8 <LL_RCC_HSE_IsReady>
 800047e:	4603      	mov	r3, r0
 8000480:	2b01      	cmp	r3, #1
 8000482:	d1fa      	bne.n	800047a <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_15, 144, LL_RCC_PLLQ_DIV_5);
 8000484:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8000488:	2290      	movs	r2, #144	; 0x90
 800048a:	210f      	movs	r1, #15
 800048c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000490:	f7ff ff40 	bl	8000314 <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000494:	f7ff ff1a 	bl	80002cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000498:	bf00      	nop
 800049a:	f7ff ff27 	bl	80002ec <LL_RCC_PLL_IsReady>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d1fa      	bne.n	800049a <SystemClock_Config+0x46>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80004a4:	2000      	movs	r0, #0
 80004a6:	f7ff fed5 	bl	8000254 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80004aa:	2000      	movs	r0, #0
 80004ac:	f7ff fee6 	bl	800027c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80004b0:	2000      	movs	r0, #0
 80004b2:	f7ff fef7 	bl	80002a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff feaa 	bl	8000210 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 80004bc:	bf00      	nop
 80004be:	f7ff febb 	bl	8000238 <LL_RCC_GetSysClkSource>
 80004c2:	4603      	mov	r3, r0
 80004c4:	2b04      	cmp	r3, #4
 80004c6:	d1fa      	bne.n	80004be <SystemClock_Config+0x6a>
  {
  
  }
  LL_SetSystemCoreClock(25000000);
 80004c8:	4806      	ldr	r0, [pc, #24]	; (80004e4 <SystemClock_Config+0x90>)
 80004ca:	f004 f80f 	bl	80044ec <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80004ce:	2000      	movs	r0, #0
 80004d0:	f000 fa0a 	bl	80008e8 <HAL_InitTick>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <SystemClock_Config+0x8a>
  {
    Error_Handler();  
 80004da:	f000 f8dd 	bl	8000698 <Error_Handler>
  };
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	017d7840 	.word	0x017d7840

080004e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b08c      	sub	sp, #48	; 0x30
 80004ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ee:	f107 0320 	add.w	r3, r7, #32
 80004f2:	2200      	movs	r2, #0
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	605a      	str	r2, [r3, #4]
 80004f8:	609a      	str	r2, [r3, #8]
 80004fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80004fc:	f107 030c 	add.w	r3, r7, #12
 8000500:	2200      	movs	r2, #0
 8000502:	601a      	str	r2, [r3, #0]
 8000504:	605a      	str	r2, [r3, #4]
 8000506:	609a      	str	r2, [r3, #8]
 8000508:	60da      	str	r2, [r3, #12]
 800050a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800050c:	1d3b      	adds	r3, r7, #4
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000514:	4b24      	ldr	r3, [pc, #144]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000516:	4a25      	ldr	r2, [pc, #148]	; (80005ac <MX_TIM3_Init+0xc4>)
 8000518:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800051a:	4b23      	ldr	r3, [pc, #140]	; (80005a8 <MX_TIM3_Init+0xc0>)
 800051c:	2200      	movs	r2, #0
 800051e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000520:	4b21      	ldr	r3, [pc, #132]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8000526:	4b20      	ldr	r3, [pc, #128]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000528:	2200      	movs	r2, #0
 800052a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052c:	4b1e      	ldr	r3, [pc, #120]	; (80005a8 <MX_TIM3_Init+0xc0>)
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000532:	4b1d      	ldr	r3, [pc, #116]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000538:	481b      	ldr	r0, [pc, #108]	; (80005a8 <MX_TIM3_Init+0xc0>)
 800053a:	f001 fe9d 	bl	8002278 <HAL_TIM_Base_Init>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000544:	f000 f8a8 	bl	8000698 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000548:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800054c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800054e:	f107 0320 	add.w	r3, r7, #32
 8000552:	4619      	mov	r1, r3
 8000554:	4814      	ldr	r0, [pc, #80]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000556:	f001 ffc2 	bl	80024de <HAL_TIM_ConfigClockSource>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000560:	f000 f89a 	bl	8000698 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000568:	2300      	movs	r3, #0
 800056a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	480d      	ldr	r0, [pc, #52]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000574:	f002 f86a 	bl	800264c <HAL_TIM_SlaveConfigSynchro>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800057e:	f000 f88b 	bl	8000698 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	4619      	mov	r1, r3
 800058e:	4806      	ldr	r0, [pc, #24]	; (80005a8 <MX_TIM3_Init+0xc0>)
 8000590:	f002 fa90 	bl	8002ab4 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM3_Init+0xb6>
  {
    Error_Handler();
 800059a:	f000 f87d 	bl	8000698 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800059e:	bf00      	nop
 80005a0:	3730      	adds	r7, #48	; 0x30
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000210 	.word	0x20000210
 80005ac:	40000400 	.word	0x40000400

080005b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b6:	463b      	mov	r3, r7
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
 80005c0:	60da      	str	r2, [r3, #12]
 80005c2:	611a      	str	r2, [r3, #16]
 80005c4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80005c6:	2080      	movs	r0, #128	; 0x80
 80005c8:	f7ff fec4 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f7ff fec1 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80005d2:	2004      	movs	r0, #4
 80005d4:	f7ff febe 	bl	8000354 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80005d8:	2002      	movs	r0, #2
 80005da:	f7ff febb 	bl	8000354 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4|SPI_SCK_Pin|SPI_MOSI_Pin|LED_2_Pin 
 80005de:	f44f 715c 	mov.w	r1, #880	; 0x370
 80005e2:	482a      	ldr	r0, [pc, #168]	; (800068c <MX_GPIO_Init+0xdc>)
 80005e4:	f7ff ff04 	bl	80003f0 <LL_GPIO_ResetOutputPin>
                          |LED_1_Pin);

  /**/
  LL_GPIO_ResetOutputPin(SPI_FLASH_CS_N_GPIO_Port, SPI_FLASH_CS_N_Pin);
 80005e8:	2110      	movs	r1, #16
 80005ea:	4829      	ldr	r0, [pc, #164]	; (8000690 <MX_GPIO_Init+0xe0>)
 80005ec:	f7ff ff00 	bl	80003f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, POT_CS_N_Pin|POT_UD_Pin);
 80005f0:	2130      	movs	r1, #48	; 0x30
 80005f2:	4828      	ldr	r0, [pc, #160]	; (8000694 <MX_GPIO_Init+0xe4>)
 80005f4:	f7ff fefc 	bl	80003f0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|SPI_SCK_Pin|SPI_MOSI_Pin|LED_2_Pin 
 80005f8:	f44f 735c 	mov.w	r3, #880	; 0x370
 80005fc:	603b      	str	r3, [r7, #0]
                          |LED_1_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005fe:	2301      	movs	r3, #1
 8000600:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060e:	463b      	mov	r3, r7
 8000610:	4619      	mov	r1, r3
 8000612:	481e      	ldr	r0, [pc, #120]	; (800068c <MX_GPIO_Init+0xdc>)
 8000614:	f002 fbe3 	bl	8002dde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000620:	2300      	movs	r3, #0
 8000622:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8000624:	463b      	mov	r3, r7
 8000626:	4619      	mov	r1, r3
 8000628:	4818      	ldr	r0, [pc, #96]	; (800068c <MX_GPIO_Init+0xdc>)
 800062a:	f002 fbd8 	bl	8002dde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_FLASH_CS_N_Pin;
 800062e:	2310      	movs	r3, #16
 8000630:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000632:	2301      	movs	r3, #1
 8000634:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800063e:	2300      	movs	r3, #0
 8000640:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_FLASH_CS_N_GPIO_Port, &GPIO_InitStruct);
 8000642:	463b      	mov	r3, r7
 8000644:	4619      	mov	r1, r3
 8000646:	4812      	ldr	r0, [pc, #72]	; (8000690 <MX_GPIO_Init+0xe0>)
 8000648:	f002 fbc9 	bl	8002dde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 800064c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000650:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000656:	2300      	movs	r3, #0
 8000658:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	463b      	mov	r3, r7
 800065c:	4619      	mov	r1, r3
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_GPIO_Init+0xe4>)
 8000660:	f002 fbbd 	bl	8002dde <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = POT_CS_N_Pin|POT_UD_Pin;
 8000664:	2330      	movs	r3, #48	; 0x30
 8000666:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000674:	2300      	movs	r3, #0
 8000676:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_GPIO_Init+0xe4>)
 800067e:	f002 fbae 	bl	8002dde <LL_GPIO_Init>

}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40020000 	.word	0x40020000
 8000690:	40020800 	.word	0x40020800
 8000694:	40020400 	.word	0x40020400

08000698 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800069c:	bf00      	nop
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
	...

080006a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a0f      	ldr	r2, [pc, #60]	; (80006f4 <HAL_MspInit+0x4c>)
 80006b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b0d      	ldr	r3, [pc, #52]	; (80006f4 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	603b      	str	r3, [r7, #0]
 80006ce:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d2:	4a08      	ldr	r2, [pc, #32]	; (80006f4 <HAL_MspInit+0x4c>)
 80006d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	40023800 	.word	0x40023800

080006f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_TIM_Base_MspInit+0x48>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d115      	bne.n	8000736 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60fb      	str	r3, [r7, #12]
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <HAL_TIM_Base_MspInit+0x4c>)
 8000710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000712:	4a0c      	ldr	r2, [pc, #48]	; (8000744 <HAL_TIM_Base_MspInit+0x4c>)
 8000714:	f043 0302 	orr.w	r3, r3, #2
 8000718:	6413      	str	r3, [r2, #64]	; 0x40
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_TIM_Base_MspInit+0x4c>)
 800071c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071e:	f003 0302 	and.w	r3, r3, #2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	201d      	movs	r0, #29
 800072c:	f000 fa29 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000730:	201d      	movs	r0, #29
 8000732:	f000 fa42 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000736:	bf00      	nop
 8000738:	3710      	adds	r7, #16
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40000400 	.word	0x40000400
 8000744:	40023800 	.word	0x40023800

08000748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800074c:	bf00      	nop
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000756:	b480      	push	{r7}
 8000758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075a:	e7fe      	b.n	800075a <HardFault_Handler+0x4>

0800075c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000760:	e7fe      	b.n	8000760 <MemManage_Handler+0x4>

08000762 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000762:	b480      	push	{r7}
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000766:	e7fe      	b.n	8000766 <BusFault_Handler+0x4>

08000768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800076c:	e7fe      	b.n	800076c <UsageFault_Handler+0x4>

0800076e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800076e:	b480      	push	{r7}
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr

0800078a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078a:	b480      	push	{r7}
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800078e:	bf00      	nop
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079c:	f000 f8d4 	bl	8000948 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007a8:	4802      	ldr	r0, [pc, #8]	; (80007b4 <TIM3_IRQHandler+0x10>)
 80007aa:	f001 fd90 	bl	80022ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000210 	.word	0x20000210

080007b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007bc:	4802      	ldr	r0, [pc, #8]	; (80007c8 <OTG_FS_IRQHandler+0x10>)
 80007be:	f000 fd1c 	bl	80011fa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20001724 	.word	0x20001724

080007cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <_sbrk+0x50>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <_sbrk+0x16>
		heap_end = &end;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <_sbrk+0x50>)
 80007de:	4a10      	ldr	r2, [pc, #64]	; (8000820 <_sbrk+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <_sbrk+0x50>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <_sbrk+0x50>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4413      	add	r3, r2
 80007f0:	466a      	mov	r2, sp
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d907      	bls.n	8000806 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80007f6:	f005 ff3f 	bl	8006678 <__errno>
 80007fa:	4602      	mov	r2, r0
 80007fc:	230c      	movs	r3, #12
 80007fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000804:	e006      	b.n	8000814 <_sbrk+0x48>
	}

	heap_end += incr;
 8000806:	4b05      	ldr	r3, [pc, #20]	; (800081c <_sbrk+0x50>)
 8000808:	681a      	ldr	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	4413      	add	r3, r2
 800080e:	4a03      	ldr	r2, [pc, #12]	; (800081c <_sbrk+0x50>)
 8000810:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	4618      	mov	r0, r3
 8000816:	3710      	adds	r7, #16
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	20000200 	.word	0x20000200
 8000820:	20001b30 	.word	0x20001b30

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b08      	ldr	r3, [pc, #32]	; (800084c <SystemInit+0x28>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082e:	4a07      	ldr	r2, [pc, #28]	; (800084c <SystemInit+0x28>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <SystemInit+0x28>)
 800083a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800083e:	609a      	str	r2, [r3, #8]
#endif
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000ed00 	.word	0xe000ed00

08000850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000850:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000888 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000854:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000856:	e003      	b.n	8000860 <LoopCopyDataInit>

08000858 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000858:	4b0c      	ldr	r3, [pc, #48]	; (800088c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800085a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800085c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800085e:	3104      	adds	r1, #4

08000860 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000860:	480b      	ldr	r0, [pc, #44]	; (8000890 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000864:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000866:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000868:	d3f6      	bcc.n	8000858 <CopyDataInit>
  ldr  r2, =_sbss
 800086a:	4a0b      	ldr	r2, [pc, #44]	; (8000898 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800086c:	e002      	b.n	8000874 <LoopFillZerobss>

0800086e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800086e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000870:	f842 3b04 	str.w	r3, [r2], #4

08000874 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000876:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000878:	d3f9      	bcc.n	800086e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800087a:	f7ff ffd3 	bl	8000824 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800087e:	f005 ff01 	bl	8006684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000882:	f7ff fdc5 	bl	8000410 <main>
  bx  lr    
 8000886:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000888:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800088c:	080068c8 	.word	0x080068c8
  ldr  r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000894:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000898:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 800089c:	20001b30 	.word	0x20001b30

080008a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a0:	e7fe      	b.n	80008a0 <ADC_IRQHandler>
	...

080008a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <HAL_Init+0x40>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <HAL_Init+0x40>)
 80008ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b4:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_Init+0x40>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a0a      	ldr	r2, [pc, #40]	; (80008e4 <HAL_Init+0x40>)
 80008ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_Init+0x40>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_Init+0x40>)
 80008c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008cc:	2003      	movs	r0, #3
 80008ce:	f000 f94d 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d2:	2000      	movs	r0, #0
 80008d4:	f000 f808 	bl	80008e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008d8:	f7ff fee6 	bl	80006a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40023c00 	.word	0x40023c00

080008e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <HAL_InitTick+0x54>)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_InitTick+0x58>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4619      	mov	r1, r3
 80008fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000902:	fbb2 f3f3 	udiv	r3, r2, r3
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f965 	bl	8000bd6 <HAL_SYSTICK_Config>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e00e      	b.n	8000934 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	2b0f      	cmp	r3, #15
 800091a:	d80a      	bhi.n	8000932 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800091c:	2200      	movs	r2, #0
 800091e:	6879      	ldr	r1, [r7, #4]
 8000920:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000924:	f000 f92d 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000928:	4a06      	ldr	r2, [pc, #24]	; (8000944 <HAL_InitTick+0x5c>)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800092e:	2300      	movs	r3, #0
 8000930:	e000      	b.n	8000934 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000932:	2301      	movs	r3, #1
}
 8000934:	4618      	mov	r0, r3
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	20000000 	.word	0x20000000
 8000940:	20000008 	.word	0x20000008
 8000944:	20000004 	.word	0x20000004

08000948 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <HAL_IncTick+0x20>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b06      	ldr	r3, [pc, #24]	; (800096c <HAL_IncTick+0x24>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4413      	add	r3, r2
 8000958:	4a04      	ldr	r2, [pc, #16]	; (800096c <HAL_IncTick+0x24>)
 800095a:	6013      	str	r3, [r2, #0]
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr
 8000966:	bf00      	nop
 8000968:	20000008 	.word	0x20000008
 800096c:	20000250 	.word	0x20000250

08000970 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  return uwTick;
 8000974:	4b03      	ldr	r3, [pc, #12]	; (8000984 <HAL_GetTick+0x14>)
 8000976:	681b      	ldr	r3, [r3, #0]
}
 8000978:	4618      	mov	r0, r3
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000250 	.word	0x20000250

08000988 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000990:	f7ff ffee 	bl	8000970 <HAL_GetTick>
 8000994:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009a0:	d005      	beq.n	80009ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009a2:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <HAL_Delay+0x40>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	461a      	mov	r2, r3
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	4413      	add	r3, r2
 80009ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ae:	bf00      	nop
 80009b0:	f7ff ffde 	bl	8000970 <HAL_GetTick>
 80009b4:	4602      	mov	r2, r0
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	429a      	cmp	r2, r3
 80009be:	d8f7      	bhi.n	80009b0 <HAL_Delay+0x28>
  {
  }
}
 80009c0:	bf00      	nop
 80009c2:	3710      	adds	r7, #16
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000008 	.word	0x20000008

080009cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b085      	sub	sp, #20
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	f003 0307 	and.w	r3, r3, #7
 80009da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009dc:	4b0c      	ldr	r3, [pc, #48]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009e2:	68ba      	ldr	r2, [r7, #8]
 80009e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e8:	4013      	ands	r3, r2
 80009ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fe:	4a04      	ldr	r2, [pc, #16]	; (8000a10 <__NVIC_SetPriorityGrouping+0x44>)
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	60d3      	str	r3, [r2, #12]
}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a18:	4b04      	ldr	r3, [pc, #16]	; (8000a2c <__NVIC_GetPriorityGrouping+0x18>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	f003 0307 	and.w	r3, r3, #7
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	db0b      	blt.n	8000a5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	f003 021f 	and.w	r2, r3, #31
 8000a48:	4907      	ldr	r1, [pc, #28]	; (8000a68 <__NVIC_EnableIRQ+0x38>)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	095b      	lsrs	r3, r3, #5
 8000a50:	2001      	movs	r0, #1
 8000a52:	fa00 f202 	lsl.w	r2, r0, r2
 8000a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a5a:	bf00      	nop
 8000a5c:	370c      	adds	r7, #12
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000e100 	.word	0xe000e100

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff29 	bl	80009cc <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff3e 	bl	8000a14 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff ff31 	bl	8000a30 <__NVIC_EnableIRQ>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b082      	sub	sp, #8
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f7ff ffa2 	bl	8000b28 <SysTick_Config>
 8000be4:	4603      	mov	r3, r0
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b089      	sub	sp, #36	; 0x24
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c06:	2300      	movs	r3, #0
 8000c08:	61fb      	str	r3, [r7, #28]
 8000c0a:	e16b      	b.n	8000ee4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	697a      	ldr	r2, [r7, #20]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c20:	693a      	ldr	r2, [r7, #16]
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	f040 815a 	bne.w	8000ede <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d00b      	beq.n	8000c4a <HAL_GPIO_Init+0x5a>
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d007      	beq.n	8000c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c3e:	2b11      	cmp	r3, #17
 8000c40:	d003      	beq.n	8000c4a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	2b12      	cmp	r3, #18
 8000c48:	d130      	bne.n	8000cac <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	2203      	movs	r2, #3
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68da      	ldr	r2, [r3, #12]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	69ba      	ldr	r2, [r7, #24]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	69ba      	ldr	r2, [r7, #24]
 8000c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c80:	2201      	movs	r2, #1
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	fa02 f303 	lsl.w	r3, r2, r3
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	091b      	lsrs	r3, r3, #4
 8000c96:	f003 0201 	and.w	r2, r3, #1
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca0:	69ba      	ldr	r2, [r7, #24]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	69ba      	ldr	r2, [r7, #24]
 8000caa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	689a      	ldr	r2, [r3, #8]
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d003      	beq.n	8000cec <HAL_GPIO_Init+0xfc>
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	2b12      	cmp	r3, #18
 8000cea:	d123      	bne.n	8000d34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	08da      	lsrs	r2, r3, #3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3208      	adds	r2, #8
 8000cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f003 0307 	and.w	r3, r3, #7
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	691a      	ldr	r2, [r3, #16]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d26:	69fb      	ldr	r3, [r7, #28]
 8000d28:	08da      	lsrs	r2, r3, #3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3208      	adds	r2, #8
 8000d2e:	69b9      	ldr	r1, [r7, #24]
 8000d30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	2203      	movs	r2, #3
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43db      	mvns	r3, r3
 8000d46:	69ba      	ldr	r2, [r7, #24]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f003 0203 	and.w	r2, r3, #3
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	f000 80b4 	beq.w	8000ede <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	60fb      	str	r3, [r7, #12]
 8000d7a:	4b5f      	ldr	r3, [pc, #380]	; (8000ef8 <HAL_GPIO_Init+0x308>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a5e      	ldr	r2, [pc, #376]	; (8000ef8 <HAL_GPIO_Init+0x308>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b5c      	ldr	r3, [pc, #368]	; (8000ef8 <HAL_GPIO_Init+0x308>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d92:	4a5a      	ldr	r2, [pc, #360]	; (8000efc <HAL_GPIO_Init+0x30c>)
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	4013      	ands	r3, r2
 8000db4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4a51      	ldr	r2, [pc, #324]	; (8000f00 <HAL_GPIO_Init+0x310>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d02b      	beq.n	8000e16 <HAL_GPIO_Init+0x226>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4a50      	ldr	r2, [pc, #320]	; (8000f04 <HAL_GPIO_Init+0x314>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d025      	beq.n	8000e12 <HAL_GPIO_Init+0x222>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	4a4f      	ldr	r2, [pc, #316]	; (8000f08 <HAL_GPIO_Init+0x318>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d01f      	beq.n	8000e0e <HAL_GPIO_Init+0x21e>
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	; (8000f0c <HAL_GPIO_Init+0x31c>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d019      	beq.n	8000e0a <HAL_GPIO_Init+0x21a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	; (8000f10 <HAL_GPIO_Init+0x320>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d013      	beq.n	8000e06 <HAL_GPIO_Init+0x216>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a4c      	ldr	r2, [pc, #304]	; (8000f14 <HAL_GPIO_Init+0x324>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d00d      	beq.n	8000e02 <HAL_GPIO_Init+0x212>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4b      	ldr	r2, [pc, #300]	; (8000f18 <HAL_GPIO_Init+0x328>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d007      	beq.n	8000dfe <HAL_GPIO_Init+0x20e>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4a      	ldr	r2, [pc, #296]	; (8000f1c <HAL_GPIO_Init+0x32c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d101      	bne.n	8000dfa <HAL_GPIO_Init+0x20a>
 8000df6:	2307      	movs	r3, #7
 8000df8:	e00e      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000dfa:	2308      	movs	r3, #8
 8000dfc:	e00c      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000dfe:	2306      	movs	r3, #6
 8000e00:	e00a      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e02:	2305      	movs	r3, #5
 8000e04:	e008      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e06:	2304      	movs	r3, #4
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x228>
 8000e16:	2300      	movs	r3, #0
 8000e18:	69fa      	ldr	r2, [r7, #28]
 8000e1a:	f002 0203 	and.w	r2, r2, #3
 8000e1e:	0092      	lsls	r2, r2, #2
 8000e20:	4093      	lsls	r3, r2
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e28:	4934      	ldr	r1, [pc, #208]	; (8000efc <HAL_GPIO_Init+0x30c>)
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3302      	adds	r3, #2
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e36:	4b3a      	ldr	r3, [pc, #232]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4013      	ands	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e5a:	4a31      	ldr	r2, [pc, #196]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000e5c:	69bb      	ldr	r3, [r7, #24]
 8000e5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e60:	4b2f      	ldr	r3, [pc, #188]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e66:	693b      	ldr	r3, [r7, #16]
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	693b      	ldr	r3, [r7, #16]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e84:	4a26      	ldr	r2, [pc, #152]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e8a:	4b25      	ldr	r3, [pc, #148]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	43db      	mvns	r3, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4013      	ands	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000eae:	4a1c      	ldr	r2, [pc, #112]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d003      	beq.n	8000ed8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ed8:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_GPIO_Init+0x330>)
 8000eda:	69bb      	ldr	r3, [r7, #24]
 8000edc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ede:	69fb      	ldr	r3, [r7, #28]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	61fb      	str	r3, [r7, #28]
 8000ee4:	69fb      	ldr	r3, [r7, #28]
 8000ee6:	2b0f      	cmp	r3, #15
 8000ee8:	f67f ae90 	bls.w	8000c0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eec:	bf00      	nop
 8000eee:	3724      	adds	r7, #36	; 0x24
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr
 8000ef8:	40023800 	.word	0x40023800
 8000efc:	40013800 	.word	0x40013800
 8000f00:	40020000 	.word	0x40020000
 8000f04:	40020400 	.word	0x40020400
 8000f08:	40020800 	.word	0x40020800
 8000f0c:	40020c00 	.word	0x40020c00
 8000f10:	40021000 	.word	0x40021000
 8000f14:	40021400 	.word	0x40021400
 8000f18:	40021800 	.word	0x40021800
 8000f1c:	40021c00 	.word	0x40021c00
 8000f20:	40013c00 	.word	0x40013c00

08000f24 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	695a      	ldr	r2, [r3, #20]
 8000f34:	887b      	ldrh	r3, [r7, #2]
 8000f36:	401a      	ands	r2, r3
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d104      	bne.n	8000f48 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000f3e:	887b      	ldrh	r3, [r7, #2]
 8000f40:	041a      	lsls	r2, r3, #16
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000f46:	e002      	b.n	8000f4e <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000f48:	887a      	ldrh	r2, [r7, #2]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	619a      	str	r2, [r3, #24]
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f5c:	b08f      	sub	sp, #60	; 0x3c
 8000f5e:	af0a      	add	r7, sp, #40	; 0x28
 8000f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d101      	bne.n	8000f6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e10f      	b.n	800118c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d106      	bne.n	8000f8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f005 f87a 	bl	8006080 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2203      	movs	r2, #3
 8000f90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 f89f 	bl	80030ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	687e      	ldr	r6, [r7, #4]
 8000fb8:	466d      	mov	r5, sp
 8000fba:	f106 0410 	add.w	r4, r6, #16
 8000fbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000fca:	e885 0003 	stmia.w	r5, {r0, r1}
 8000fce:	1d33      	adds	r3, r6, #4
 8000fd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000fd2:	6838      	ldr	r0, [r7, #0]
 8000fd4:	f001 ff76 	bl	8002ec4 <USB_CoreInit>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d005      	beq.n	8000fea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2202      	movs	r2, #2
 8000fe2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e0d0      	b.n	800118c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f88d 	bl	8003110 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73fb      	strb	r3, [r7, #15]
 8000ffa:	e04a      	b.n	8001092 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000ffc:	7bfa      	ldrb	r2, [r7, #15]
 8000ffe:	6879      	ldr	r1, [r7, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	1a9b      	subs	r3, r3, r2
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	440b      	add	r3, r1
 800100a:	333d      	adds	r3, #61	; 0x3d
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	4613      	mov	r3, r2
 8001016:	00db      	lsls	r3, r3, #3
 8001018:	1a9b      	subs	r3, r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	333c      	adds	r3, #60	; 0x3c
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	7bfb      	ldrb	r3, [r7, #15]
 8001028:	b298      	uxth	r0, r3
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	4613      	mov	r3, r2
 800102e:	00db      	lsls	r3, r3, #3
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	440b      	add	r3, r1
 8001036:	3342      	adds	r3, #66	; 0x42
 8001038:	4602      	mov	r2, r0
 800103a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800103c:	7bfa      	ldrb	r2, [r7, #15]
 800103e:	6879      	ldr	r1, [r7, #4]
 8001040:	4613      	mov	r3, r2
 8001042:	00db      	lsls	r3, r3, #3
 8001044:	1a9b      	subs	r3, r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	440b      	add	r3, r1
 800104a:	333f      	adds	r3, #63	; 0x3f
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	3344      	adds	r3, #68	; 0x44
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001064:	7bfa      	ldrb	r2, [r7, #15]
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	4613      	mov	r3, r2
 800106a:	00db      	lsls	r3, r3, #3
 800106c:	1a9b      	subs	r3, r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	440b      	add	r3, r1
 8001072:	3348      	adds	r3, #72	; 0x48
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	1a9b      	subs	r3, r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	3350      	adds	r3, #80	; 0x50
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800108c:	7bfb      	ldrb	r3, [r7, #15]
 800108e:	3301      	adds	r3, #1
 8001090:	73fb      	strb	r3, [r7, #15]
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	d3af      	bcc.n	8000ffc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e044      	b.n	800112c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010b4:	2200      	movs	r2, #0
 80010b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010b8:	7bfa      	ldrb	r2, [r7, #15]
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	4613      	mov	r3, r2
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	1a9b      	subs	r3, r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80010e0:	2200      	movs	r2, #0
 80010e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010e4:	7bfa      	ldrb	r2, [r7, #15]
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	4613      	mov	r3, r2
 80010ea:	00db      	lsls	r3, r3, #3
 80010ec:	1a9b      	subs	r3, r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	440b      	add	r3, r1
 80010f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010fa:	7bfa      	ldrb	r2, [r7, #15]
 80010fc:	6879      	ldr	r1, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001110:	7bfa      	ldrb	r2, [r7, #15]
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	4613      	mov	r3, r2
 8001116:	00db      	lsls	r3, r3, #3
 8001118:	1a9b      	subs	r3, r3, r2
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	440b      	add	r3, r1
 800111e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001126:	7bfb      	ldrb	r3, [r7, #15]
 8001128:	3301      	adds	r3, #1
 800112a:	73fb      	strb	r3, [r7, #15]
 800112c:	7bfa      	ldrb	r2, [r7, #15]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	429a      	cmp	r2, r3
 8001134:	d3b5      	bcc.n	80010a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	687e      	ldr	r6, [r7, #4]
 800113e:	466d      	mov	r5, sp
 8001140:	f106 0410 	add.w	r4, r6, #16
 8001144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800114a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800114c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001150:	e885 0003 	stmia.w	r5, {r0, r1}
 8001154:	1d33      	adds	r3, r6, #4
 8001156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f002 f803 	bl	8003164 <USB_DevInit>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2202      	movs	r2, #2
 8001168:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e00d      	b.n	800118c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2201      	movs	r2, #1
 800117c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f003 f842 	bl	800420e <USB_DevDisconnect>

  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001194 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d101      	bne.n	80011b0 <HAL_PCD_Start+0x1c>
 80011ac:	2302      	movs	r3, #2
 80011ae:	e020      	b.n	80011f2 <HAL_PCD_Start+0x5e>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d109      	bne.n	80011d4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011c4:	2b01      	cmp	r3, #1
 80011c6:	d005      	beq.n	80011d4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f003 f800 	bl	80041de <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4618      	mov	r0, r3
 80011e4:	f001 ff72 	bl	80030cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}

080011fa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80011fa:	b590      	push	{r4, r7, lr}
 80011fc:	b08d      	sub	sp, #52	; 0x34
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001208:	6a3b      	ldr	r3, [r7, #32]
 800120a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f003 f8a7 	bl	8004364 <USB_GetMode>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	f040 839d 	bne.w	8001958 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f003 f80b 	bl	800423e <USB_ReadInterrupts>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 8393 	beq.w	8001956 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f003 f802 	bl	800423e <USB_ReadInterrupts>
 800123a:	4603      	mov	r3, r0
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b02      	cmp	r3, #2
 8001242:	d107      	bne.n	8001254 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f002 0202 	and.w	r2, r2, #2
 8001252:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f002 fff0 	bl	800423e <USB_ReadInterrupts>
 800125e:	4603      	mov	r3, r0
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b10      	cmp	r3, #16
 8001266:	d161      	bne.n	800132c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0210 	bic.w	r2, r2, #16
 8001276:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001278:	6a3b      	ldr	r3, [r7, #32]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	f003 020f 	and.w	r2, r3, #15
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	1a9b      	subs	r3, r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	0c5b      	lsrs	r3, r3, #17
 800129c:	f003 030f 	and.w	r3, r3, #15
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d124      	bne.n	80012ee <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012aa:	4013      	ands	r3, r2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d035      	beq.n	800131c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	091b      	lsrs	r3, r3, #4
 80012b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012be:	b29b      	uxth	r3, r3
 80012c0:	461a      	mov	r2, r3
 80012c2:	6a38      	ldr	r0, [r7, #32]
 80012c4:	f002 fe68 	bl	8003f98 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	68da      	ldr	r2, [r3, #12]
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012d4:	441a      	add	r2, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	699a      	ldr	r2, [r3, #24]
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	091b      	lsrs	r3, r3, #4
 80012e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012e6:	441a      	add	r2, r3
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	619a      	str	r2, [r3, #24]
 80012ec:	e016      	b.n	800131c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	0c5b      	lsrs	r3, r3, #17
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	2b06      	cmp	r3, #6
 80012f8:	d110      	bne.n	800131c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001300:	2208      	movs	r2, #8
 8001302:	4619      	mov	r1, r3
 8001304:	6a38      	ldr	r0, [r7, #32]
 8001306:	f002 fe47 	bl	8003f98 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	699a      	ldr	r2, [r3, #24]
 800130e:	69bb      	ldr	r3, [r7, #24]
 8001310:	091b      	lsrs	r3, r3, #4
 8001312:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001316:	441a      	add	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	699a      	ldr	r2, [r3, #24]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0210 	orr.w	r2, r2, #16
 800132a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 ff84 	bl	800423e <USB_ReadInterrupts>
 8001336:	4603      	mov	r3, r0
 8001338:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800133c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001340:	d16e      	bne.n	8001420 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f002 ff8a 	bl	8004264 <USB_ReadDevAllOutEpInterrupt>
 8001350:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001352:	e062      	b.n	800141a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001356:	f003 0301 	and.w	r3, r3, #1
 800135a:	2b00      	cmp	r3, #0
 800135c:	d057      	beq.n	800140e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001364:	b2d2      	uxtb	r2, r2
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f002 ffaf 	bl	80042cc <USB_ReadDevOutEPInterrupt>
 800136e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d00c      	beq.n	8001394 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800137a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137c:	015a      	lsls	r2, r3, #5
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	4413      	add	r3, r2
 8001382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001386:	461a      	mov	r2, r3
 8001388:	2301      	movs	r3, #1
 800138a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800138c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 fdb0 	bl	8001ef4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	f003 0308 	and.w	r3, r3, #8
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00c      	beq.n	80013b8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800139e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013a0:	015a      	lsls	r2, r3, #5
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	4413      	add	r3, r2
 80013a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013aa:	461a      	mov	r2, r3
 80013ac:	2308      	movs	r3, #8
 80013ae:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f000 feaa 	bl	800210c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d008      	beq.n	80013d4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c4:	015a      	lsls	r2, r3, #5
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	4413      	add	r3, r2
 80013ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ce:	461a      	mov	r2, r3
 80013d0:	2310      	movs	r3, #16
 80013d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	f003 0320 	and.w	r3, r3, #32
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d008      	beq.n	80013f0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e0:	015a      	lsls	r2, r3, #5
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	4413      	add	r3, r2
 80013e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ea:	461a      	mov	r2, r3
 80013ec:	2320      	movs	r3, #32
 80013ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d009      	beq.n	800140e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	015a      	lsls	r2, r3, #5
 80013fe:	69fb      	ldr	r3, [r7, #28]
 8001400:	4413      	add	r3, r2
 8001402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001406:	461a      	mov	r2, r3
 8001408:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800140e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001410:	3301      	adds	r3, #1
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	085b      	lsrs	r3, r3, #1
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800141a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141c:	2b00      	cmp	r3, #0
 800141e:	d199      	bne.n	8001354 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f002 ff0a 	bl	800423e <USB_ReadInterrupts>
 800142a:	4603      	mov	r3, r0
 800142c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001430:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001434:	f040 80c0 	bne.w	80015b8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f002 ff2b 	bl	8004298 <USB_ReadDevAllInEpInterrupt>
 8001442:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001448:	e0b2      	b.n	80015b0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 80a7 	beq.w	80015a4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f002 ff51 	bl	8004308 <USB_ReadDevInEPInterrupt>
 8001466:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001468:	693b      	ldr	r3, [r7, #16]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d057      	beq.n	8001522 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	2201      	movs	r2, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	43db      	mvns	r3, r3
 800148c:	69f9      	ldr	r1, [r7, #28]
 800148e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001492:	4013      	ands	r3, r2
 8001494:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	015a      	lsls	r2, r3, #5
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	4413      	add	r3, r2
 800149e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a2:	461a      	mov	r2, r3
 80014a4:	2301      	movs	r3, #1
 80014a6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	691b      	ldr	r3, [r3, #16]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d132      	bne.n	8001516 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3348      	adds	r3, #72	; 0x48
 80014c0:	6819      	ldr	r1, [r3, #0]
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c6:	4613      	mov	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	1a9b      	subs	r3, r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4403      	add	r3, r0
 80014d0:	3344      	adds	r3, #68	; 0x44
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4419      	add	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	4403      	add	r3, r0
 80014e4:	3348      	adds	r3, #72	; 0x48
 80014e6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d113      	bne.n	8001516 <HAL_PCD_IRQHandler+0x31c>
 80014ee:	6879      	ldr	r1, [r7, #4]
 80014f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f2:	4613      	mov	r3, r2
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	1a9b      	subs	r3, r3, r2
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	440b      	add	r3, r1
 80014fc:	3350      	adds	r3, #80	; 0x50
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d108      	bne.n	8001516 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6818      	ldr	r0, [r3, #0]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800150e:	461a      	mov	r2, r3
 8001510:	2101      	movs	r1, #1
 8001512:	f002 ff59 	bl	80043c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001518:	b2db      	uxtb	r3, r3
 800151a:	4619      	mov	r1, r3
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f004 fe30 	bl	8006182 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	f003 0308 	and.w	r3, r3, #8
 8001528:	2b00      	cmp	r3, #0
 800152a:	d008      	beq.n	800153e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800152c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152e:	015a      	lsls	r2, r3, #5
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	4413      	add	r3, r2
 8001534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001538:	461a      	mov	r2, r3
 800153a:	2308      	movs	r3, #8
 800153c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	d008      	beq.n	800155a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154a:	015a      	lsls	r2, r3, #5
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	4413      	add	r3, r2
 8001550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001554:	461a      	mov	r2, r3
 8001556:	2310      	movs	r3, #16
 8001558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001560:	2b00      	cmp	r3, #0
 8001562:	d008      	beq.n	8001576 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	015a      	lsls	r2, r3, #5
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	4413      	add	r3, r2
 800156c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001570:	461a      	mov	r2, r3
 8001572:	2340      	movs	r3, #64	; 0x40
 8001574:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001582:	015a      	lsls	r2, r3, #5
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	4413      	add	r3, r2
 8001588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158c:	461a      	mov	r2, r3
 800158e:	2302      	movs	r3, #2
 8001590:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800159c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f000 fc1b 	bl	8001dda <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	3301      	adds	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ac:	085b      	lsrs	r3, r3, #1
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f47f af49 	bne.w	800144a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4618      	mov	r0, r3
 80015be:	f002 fe3e 	bl	800423e <USB_ReadInterrupts>
 80015c2:	4603      	mov	r3, r0
 80015c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80015c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015cc:	d122      	bne.n	8001614 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80015f4:	2100      	movs	r1, #0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f000 fe26 	bl	8002248 <HAL_PCDEx_LPM_Callback>
 80015fc:	e002      	b.n	8001604 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f004 fe36 	bl	8006270 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695a      	ldr	r2, [r3, #20]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001612:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4618      	mov	r0, r3
 800161a:	f002 fe10 	bl	800423e <USB_ReadInterrupts>
 800161e:	4603      	mov	r3, r0
 8001620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001624:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001628:	d112      	bne.n	8001650 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b01      	cmp	r3, #1
 8001638:	d102      	bne.n	8001640 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f004 fdf2 	bl	8006224 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	695a      	ldr	r2, [r3, #20]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800164e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4618      	mov	r0, r3
 8001656:	f002 fdf2 	bl	800423e <USB_ReadInterrupts>
 800165a:	4603      	mov	r3, r0
 800165c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001660:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001664:	f040 80c7 	bne.w	80017f6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	69fa      	ldr	r2, [r7, #28]
 8001672:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001676:	f023 0301 	bic.w	r3, r3, #1
 800167a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2110      	movs	r1, #16
 8001682:	4618      	mov	r0, r3
 8001684:	f001 fed2 	bl	800342c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001688:	2300      	movs	r3, #0
 800168a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800168c:	e056      	b.n	800173c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	015a      	lsls	r2, r3, #5
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	4413      	add	r3, r2
 8001696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800169a:	461a      	mov	r2, r3
 800169c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b2:	0151      	lsls	r1, r2, #5
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	440a      	add	r2, r1
 80016b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016c0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c4:	015a      	lsls	r2, r3, #5
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	4413      	add	r3, r2
 80016ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016d2:	0151      	lsls	r1, r2, #5
 80016d4:	69fa      	ldr	r2, [r7, #28]
 80016d6:	440a      	add	r2, r1
 80016d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016dc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80016e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016e4:	015a      	lsls	r2, r3, #5
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	4413      	add	r3, r2
 80016ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ee:	461a      	mov	r2, r3
 80016f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80016f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001706:	0151      	lsls	r1, r2, #5
 8001708:	69fa      	ldr	r2, [r7, #28]
 800170a:	440a      	add	r2, r1
 800170c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001714:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001718:	015a      	lsls	r2, r3, #5
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	4413      	add	r3, r2
 800171e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001726:	0151      	lsls	r1, r2, #5
 8001728:	69fa      	ldr	r2, [r7, #28]
 800172a:	440a      	add	r2, r1
 800172c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001730:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001734:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001738:	3301      	adds	r3, #1
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001742:	429a      	cmp	r2, r3
 8001744:	d3a3      	bcc.n	800168e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	69fa      	ldr	r2, [r7, #28]
 8001750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001754:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001758:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	2b00      	cmp	r3, #0
 8001760:	d016      	beq.n	8001790 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001768:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800176c:	69fa      	ldr	r2, [r7, #28]
 800176e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001772:	f043 030b 	orr.w	r3, r3, #11
 8001776:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	69fa      	ldr	r2, [r7, #28]
 8001784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001788:	f043 030b 	orr.w	r3, r3, #11
 800178c:	6453      	str	r3, [r2, #68]	; 0x44
 800178e:	e015      	b.n	80017bc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001796:	695b      	ldr	r3, [r3, #20]
 8001798:	69fa      	ldr	r2, [r7, #28]
 800179a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800179e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ae:	691b      	ldr	r3, [r3, #16]
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b6:	f043 030b 	orr.w	r3, r3, #11
 80017ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6818      	ldr	r0, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017e0:	461a      	mov	r2, r3
 80017e2:	f002 fdf1 	bl	80043c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	695a      	ldr	r2, [r3, #20]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80017f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 fd1f 	bl	800423e <USB_ReadInterrupts>
 8001800:	4603      	mov	r3, r0
 8001802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800180a:	d124      	bne.n	8001856 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f002 fdb5 	bl	8004380 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4618      	mov	r0, r3
 800181c:	f001 fe67 	bl	80034ee <USB_GetDevSpeed>
 8001820:	4603      	mov	r3, r0
 8001822:	461a      	mov	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681c      	ldr	r4, [r3, #0]
 800182c:	f000 fd18 	bl	8002260 <HAL_RCC_GetHCLKFreq>
 8001830:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001836:	b2db      	uxtb	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	4620      	mov	r0, r4
 800183c:	f001 fba4 	bl	8002f88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f004 fcc6 	bl	80061d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	695a      	ldr	r2, [r3, #20]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001854:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f002 fcef 	bl	800423e <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b08      	cmp	r3, #8
 8001868:	d10a      	bne.n	8001880 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f004 fca3 	bl	80061b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	695a      	ldr	r2, [r3, #20]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f002 0208 	and.w	r2, r2, #8
 800187e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f002 fcda 	bl	800423e <USB_ReadInterrupts>
 800188a:	4603      	mov	r3, r0
 800188c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001894:	d10f      	bne.n	80018b6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	b2db      	uxtb	r3, r3
 800189e:	4619      	mov	r1, r3
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f004 fd05 	bl	80062b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f002 fcbf 	bl	800423e <USB_ReadInterrupts>
 80018c0:	4603      	mov	r3, r0
 80018c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80018ca:	d10f      	bne.n	80018ec <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	4619      	mov	r1, r3
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f004 fcd8 	bl	800628c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	695a      	ldr	r2, [r3, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80018ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f002 fca4 	bl	800423e <USB_ReadInterrupts>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80018fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001900:	d10a      	bne.n	8001918 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f004 fce6 	bl	80062d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001916:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fc8e 	bl	800423e <USB_ReadInterrupts>
 8001922:	4603      	mov	r3, r0
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b04      	cmp	r3, #4
 800192a:	d115      	bne.n	8001958 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 0304 	and.w	r3, r3, #4
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800193e:	6878      	ldr	r0, [r7, #4]
 8001940:	f004 fcd6 	bl	80062f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	6859      	ldr	r1, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	430a      	orrs	r2, r1
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	e000      	b.n	8001958 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001956:	bf00      	nop
    }
  }
}
 8001958:	3734      	adds	r7, #52	; 0x34
 800195a:	46bd      	mov	sp, r7
 800195c:	bd90      	pop	{r4, r7, pc}

0800195e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001970:	2b01      	cmp	r3, #1
 8001972:	d101      	bne.n	8001978 <HAL_PCD_SetAddress+0x1a>
 8001974:	2302      	movs	r3, #2
 8001976:	e013      	b.n	80019a0 <HAL_PCD_SetAddress+0x42>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	78fa      	ldrb	r2, [r7, #3]
 800198e:	4611      	mov	r1, r2
 8001990:	4618      	mov	r0, r3
 8001992:	f002 fbfe 	bl	8004192 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	4608      	mov	r0, r1
 80019b2:	4611      	mov	r1, r2
 80019b4:	461a      	mov	r2, r3
 80019b6:	4603      	mov	r3, r0
 80019b8:	70fb      	strb	r3, [r7, #3]
 80019ba:	460b      	mov	r3, r1
 80019bc:	803b      	strh	r3, [r7, #0]
 80019be:	4613      	mov	r3, r2
 80019c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019c2:	2300      	movs	r3, #0
 80019c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	da0f      	bge.n	80019ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019ce:	78fb      	ldrb	r3, [r7, #3]
 80019d0:	f003 020f 	and.w	r2, r3, #15
 80019d4:	4613      	mov	r3, r2
 80019d6:	00db      	lsls	r3, r3, #3
 80019d8:	1a9b      	subs	r3, r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	3338      	adds	r3, #56	; 0x38
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	3304      	adds	r3, #4
 80019e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	2201      	movs	r2, #1
 80019ea:	705a      	strb	r2, [r3, #1]
 80019ec:	e00f      	b.n	8001a0e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 020f 	and.w	r2, r3, #15
 80019f4:	4613      	mov	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	3304      	adds	r3, #4
 8001a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a0e:	78fb      	ldrb	r3, [r7, #3]
 8001a10:	f003 030f 	and.w	r3, r3, #15
 8001a14:	b2da      	uxtb	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a1a:	883a      	ldrh	r2, [r7, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	78ba      	ldrb	r2, [r7, #2]
 8001a24:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	785b      	ldrb	r3, [r3, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	781b      	ldrb	r3, [r3, #0]
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a38:	78bb      	ldrb	r3, [r7, #2]
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d102      	bne.n	8001a44 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_PCD_EP_Open+0xaa>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e00e      	b.n	8001a70 <HAL_PCD_EP_Open+0xc8>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	68f9      	ldr	r1, [r7, #12]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f001 fd69 	bl	8003538 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b084      	sub	sp, #16
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	da0f      	bge.n	8001aac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a8c:	78fb      	ldrb	r3, [r7, #3]
 8001a8e:	f003 020f 	and.w	r2, r3, #15
 8001a92:	4613      	mov	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	1a9b      	subs	r3, r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	3338      	adds	r3, #56	; 0x38
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	4413      	add	r3, r2
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	705a      	strb	r2, [r3, #1]
 8001aaa:	e00f      	b.n	8001acc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001aac:	78fb      	ldrb	r3, [r7, #3]
 8001aae:	f003 020f 	and.w	r2, r3, #15
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	1a9b      	subs	r3, r3, r2
 8001ab8:	009b      	lsls	r3, r3, #2
 8001aba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	4413      	add	r3, r2
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001acc:	78fb      	ldrb	r3, [r7, #3]
 8001ace:	f003 030f 	and.w	r3, r3, #15
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_PCD_EP_Close+0x6e>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e00e      	b.n	8001b04 <HAL_PCD_EP_Close+0x8c>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68f9      	ldr	r1, [r7, #12]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 fda7 	bl	8003648 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b1c:	7afb      	ldrb	r3, [r7, #11]
 8001b1e:	f003 020f 	and.w	r2, r3, #15
 8001b22:	4613      	mov	r3, r2
 8001b24:	00db      	lsls	r3, r3, #3
 8001b26:	1a9b      	subs	r3, r3, r2
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d102      	bne.n	8001b68 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b62:	687a      	ldr	r2, [r7, #4]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b68:	7afb      	ldrb	r3, [r7, #11]
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d109      	bne.n	8001b86 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	b2db      	uxtb	r3, r3
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	6979      	ldr	r1, [r7, #20]
 8001b80:	f002 f882 	bl	8003c88 <USB_EP0StartXfer>
 8001b84:	e008      	b.n	8001b98 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	6979      	ldr	r1, [r7, #20]
 8001b94:	f001 fe34 	bl	8003800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
 8001baa:	460b      	mov	r3, r1
 8001bac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	6879      	ldr	r1, [r7, #4]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	1a9b      	subs	r3, r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bc4:	681b      	ldr	r3, [r3, #0]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b086      	sub	sp, #24
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	607a      	str	r2, [r7, #4]
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	460b      	mov	r3, r1
 8001be0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be2:	7afb      	ldrb	r3, [r7, #11]
 8001be4:	f003 020f 	and.w	r2, r3, #15
 8001be8:	4613      	mov	r3, r2
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	3338      	adds	r3, #56	; 0x38
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c12:	7afb      	ldrb	r3, [r7, #11]
 8001c14:	f003 030f 	and.w	r3, r3, #15
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	691b      	ldr	r3, [r3, #16]
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d102      	bne.n	8001c2c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c2c:	7afb      	ldrb	r3, [r7, #11]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d109      	bne.n	8001c4a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6818      	ldr	r0, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	6979      	ldr	r1, [r7, #20]
 8001c44:	f002 f820 	bl	8003c88 <USB_EP0StartXfer>
 8001c48:	e008      	b.n	8001c5c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6818      	ldr	r0, [r3, #0]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	461a      	mov	r2, r3
 8001c56:	6979      	ldr	r1, [r7, #20]
 8001c58:	f001 fdd2 	bl	8003800 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3718      	adds	r7, #24
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b084      	sub	sp, #16
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
 8001c6e:	460b      	mov	r3, r1
 8001c70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d901      	bls.n	8001c84 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e050      	b.n	8001d26 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	da0f      	bge.n	8001cac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c8c:	78fb      	ldrb	r3, [r7, #3]
 8001c8e:	f003 020f 	and.w	r2, r3, #15
 8001c92:	4613      	mov	r3, r2
 8001c94:	00db      	lsls	r3, r3, #3
 8001c96:	1a9b      	subs	r3, r3, r2
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	3338      	adds	r3, #56	; 0x38
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	705a      	strb	r2, [r3, #1]
 8001caa:	e00d      	b.n	8001cc8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	3304      	adds	r3, #4
 8001cc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	f003 030f 	and.w	r3, r3, #15
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d101      	bne.n	8001ce8 <HAL_PCD_EP_SetStall+0x82>
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	e01e      	b.n	8001d26 <HAL_PCD_EP_SetStall+0xc0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	68f9      	ldr	r1, [r7, #12]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f002 f977 	bl	8003fea <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10a      	bne.n	8001d1c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	b2d9      	uxtb	r1, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d16:	461a      	mov	r2, r3
 8001d18:	f002 fb56 	bl	80043c8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}

08001d2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	b084      	sub	sp, #16
 8001d32:	af00      	add	r7, sp, #0
 8001d34:	6078      	str	r0, [r7, #4]
 8001d36:	460b      	mov	r3, r1
 8001d38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d901      	bls.n	8001d4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e042      	b.n	8001dd2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	da0f      	bge.n	8001d74 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d54:	78fb      	ldrb	r3, [r7, #3]
 8001d56:	f003 020f 	and.w	r2, r3, #15
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	1a9b      	subs	r3, r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	3338      	adds	r3, #56	; 0x38
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	4413      	add	r3, r2
 8001d68:	3304      	adds	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	705a      	strb	r2, [r3, #1]
 8001d72:	e00f      	b.n	8001d94 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	1a9b      	subs	r3, r3, r2
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2200      	movs	r2, #0
 8001d98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_PCD_EP_ClrStall+0x86>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e00e      	b.n	8001dd2 <HAL_PCD_EP_ClrStall+0xa4>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68f9      	ldr	r1, [r7, #12]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f002 f97f 	bl	80040c6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b08a      	sub	sp, #40	; 0x28
 8001dde:	af02      	add	r7, sp, #8
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	00db      	lsls	r3, r3, #3
 8001df4:	1a9b      	subs	r3, r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	3338      	adds	r3, #56	; 0x38
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3304      	adds	r3, #4
 8001e00:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	699a      	ldr	r2, [r3, #24]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d901      	bls.n	8001e12 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e06c      	b.n	8001eec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d902      	bls.n	8001e2e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3303      	adds	r3, #3
 8001e32:	089b      	lsrs	r3, r3, #2
 8001e34:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e36:	e02b      	b.n	8001e90 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	695a      	ldr	r2, [r3, #20]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d902      	bls.n	8001e54 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	3303      	adds	r3, #3
 8001e58:	089b      	lsrs	r3, r3, #2
 8001e5a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	68d9      	ldr	r1, [r3, #12]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	9300      	str	r3, [sp, #0]
 8001e70:	4603      	mov	r3, r0
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f002 f85b 	bl	8003f2e <USB_WritePacket>

    ep->xfer_buff  += len;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	441a      	add	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	699a      	ldr	r2, [r3, #24]
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	441a      	add	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	015a      	lsls	r2, r3, #5
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4413      	add	r3, r2
 8001e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e9c:	699b      	ldr	r3, [r3, #24]
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d809      	bhi.n	8001eba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	699a      	ldr	r2, [r3, #24]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d203      	bcs.n	8001eba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1be      	bne.n	8001e38 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	695a      	ldr	r2, [r3, #20]
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d811      	bhi.n	8001eea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	2201      	movs	r2, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001eda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	6939      	ldr	r1, [r7, #16]
 8001ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	333c      	adds	r3, #60	; 0x3c
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	015a      	lsls	r2, r3, #5
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4413      	add	r3, r2
 8001f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	f040 80a0 	bne.w	800206c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	f003 0308 	and.w	r3, r3, #8
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d015      	beq.n	8001f62 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4a72      	ldr	r2, [pc, #456]	; (8002104 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	f240 80dd 	bls.w	80020fa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f000 80d7 	beq.w	80020fa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	015a      	lsls	r2, r3, #5
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	4413      	add	r3, r2
 8001f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f58:	461a      	mov	r2, r3
 8001f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f5e:	6093      	str	r3, [r2, #8]
 8001f60:	e0cb      	b.n	80020fa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f003 0320 	and.w	r3, r3, #32
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d009      	beq.n	8001f80 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f78:	461a      	mov	r2, r3
 8001f7a:	2320      	movs	r3, #32
 8001f7c:	6093      	str	r3, [r2, #8]
 8001f7e:	e0bc      	b.n	80020fa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 80b7 	bne.w	80020fa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4a5d      	ldr	r2, [pc, #372]	; (8002104 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d90f      	bls.n	8001fb4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00a      	beq.n	8001fb4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	015a      	lsls	r2, r3, #5
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001faa:	461a      	mov	r2, r3
 8001fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fb0:	6093      	str	r3, [r2, #8]
 8001fb2:	e0a2      	b.n	80020fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	4613      	mov	r3, r2
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	1a9b      	subs	r3, r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001fc6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	0159      	lsls	r1, r3, #5
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	440b      	add	r3, r1
 8001fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8001fda:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	683a      	ldr	r2, [r7, #0]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	1a9b      	subs	r3, r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4403      	add	r3, r0
 8001fea:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001fee:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002002:	6819      	ldr	r1, [r3, #0]
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	4403      	add	r3, r0
 8002012:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4419      	add	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	4613      	mov	r3, r2
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	009b      	lsls	r3, r3, #2
 8002026:	4403      	add	r3, r0
 8002028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800202c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d114      	bne.n	800205e <PCD_EP_OutXfrComplete_int+0x16a>
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	1a9b      	subs	r3, r3, r2
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002056:	461a      	mov	r2, r3
 8002058:	2101      	movs	r1, #1
 800205a:	f002 f9b5 	bl	80043c8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	4619      	mov	r1, r3
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f004 f871 	bl	800614c <HAL_PCD_DataOutStageCallback>
 800206a:	e046      	b.n	80020fa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	4a26      	ldr	r2, [pc, #152]	; (8002108 <PCD_EP_OutXfrComplete_int+0x214>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d124      	bne.n	80020be <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	015a      	lsls	r2, r3, #5
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	4413      	add	r3, r2
 8002086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800208a:	461a      	mov	r2, r3
 800208c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002090:	6093      	str	r3, [r2, #8]
 8002092:	e032      	b.n	80020fa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	f003 0320 	and.w	r3, r3, #32
 800209a:	2b00      	cmp	r3, #0
 800209c:	d008      	beq.n	80020b0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020aa:	461a      	mov	r2, r3
 80020ac:	2320      	movs	r3, #32
 80020ae:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	4619      	mov	r1, r3
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f004 f848 	bl	800614c <HAL_PCD_DataOutStageCallback>
 80020bc:	e01d      	b.n	80020fa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d114      	bne.n	80020ee <PCD_EP_OutXfrComplete_int+0x1fa>
 80020c4:	6879      	ldr	r1, [r7, #4]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	4613      	mov	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d108      	bne.n	80020ee <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020e6:	461a      	mov	r2, r3
 80020e8:	2100      	movs	r1, #0
 80020ea:	f002 f96d 	bl	80043c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	4619      	mov	r1, r3
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f004 f829 	bl	800614c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	4f54300a 	.word	0x4f54300a
 8002108:	4f54310a 	.word	0x4f54310a

0800210c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	333c      	adds	r3, #60	; 0x3c
 8002124:	3304      	adds	r3, #4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	015a      	lsls	r2, r3, #5
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	4a15      	ldr	r2, [pc, #84]	; (8002194 <PCD_EP_OutSetupPacket_int+0x88>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d90e      	bls.n	8002160 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002148:	2b00      	cmp	r3, #0
 800214a:	d009      	beq.n	8002160 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	015a      	lsls	r2, r3, #5
 8002150:	693b      	ldr	r3, [r7, #16]
 8002152:	4413      	add	r3, r2
 8002154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002158:	461a      	mov	r2, r3
 800215a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800215e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f003 ffe1 	bl	8006128 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <PCD_EP_OutSetupPacket_int+0x88>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d90c      	bls.n	8002188 <PCD_EP_OutSetupPacket_int+0x7c>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	2b01      	cmp	r3, #1
 8002174:	d108      	bne.n	8002188 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6818      	ldr	r0, [r3, #0]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002180:	461a      	mov	r2, r3
 8002182:	2101      	movs	r1, #1
 8002184:	f002 f920 	bl	80043c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	4f54300a 	.word	0x4f54300a

08002198 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	70fb      	strb	r3, [r7, #3]
 80021a4:	4613      	mov	r3, r2
 80021a6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ae:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021b0:	78fb      	ldrb	r3, [r7, #3]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021b6:	883b      	ldrh	r3, [r7, #0]
 80021b8:	0419      	lsls	r1, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68ba      	ldr	r2, [r7, #8]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
 80021c4:	e028      	b.n	8002218 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	0c1b      	lsrs	r3, r3, #16
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	4413      	add	r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
 80021d8:	e00d      	b.n	80021f6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	3340      	adds	r3, #64	; 0x40
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4413      	add	r3, r2
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	0c1b      	lsrs	r3, r3, #16
 80021ea:	68ba      	ldr	r2, [r7, #8]
 80021ec:	4413      	add	r3, r2
 80021ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	3b01      	subs	r3, #1
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3ec      	bcc.n	80021da <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002200:	883b      	ldrh	r3, [r7, #0]
 8002202:	0418      	lsls	r0, r3, #16
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6819      	ldr	r1, [r3, #0]
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	3b01      	subs	r3, #1
 800220c:	68ba      	ldr	r2, [r7, #8]
 800220e:	4302      	orrs	r2, r0
 8002210:	3340      	adds	r3, #64	; 0x40
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr

08002226 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
 800222e:	460b      	mov	r3, r1
 8002230:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	887a      	ldrh	r2, [r7, #2]
 8002238:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	460b      	mov	r3, r1
 8002252:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002254:	bf00      	nop
 8002256:	370c      	adds	r7, #12
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002264:	4b03      	ldr	r3, [pc, #12]	; (8002274 <HAL_RCC_GetHCLKFreq+0x14>)
 8002266:	681b      	ldr	r3, [r3, #0]
}
 8002268:	4618      	mov	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	20000000 	.word	0x20000000

08002278 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d101      	bne.n	800228a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e01d      	b.n	80022c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002290:	b2db      	uxtb	r3, r3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d106      	bne.n	80022a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7fe fa2a 	bl	80006f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2202      	movs	r2, #2
 80022a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	4619      	mov	r1, r3
 80022b6:	4610      	mov	r0, r2
 80022b8:	f000 fa3c 	bl	8002734 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2201      	movs	r2, #1
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3708      	adds	r7, #8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b082      	sub	sp, #8
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0302 	and.w	r3, r3, #2
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d122      	bne.n	800232a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d11b      	bne.n	800232a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f06f 0202 	mvn.w	r2, #2
 80022fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f000 f9f1 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 8002316:	e005      	b.n	8002324 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f9e3 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 f9f4 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b04      	cmp	r3, #4
 8002336:	d122      	bne.n	800237e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	2b04      	cmp	r3, #4
 8002344:	d11b      	bne.n	800237e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f06f 0204 	mvn.w	r2, #4
 800234e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2202      	movs	r2, #2
 8002354:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002360:	2b00      	cmp	r3, #0
 8002362:	d003      	beq.n	800236c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 f9c7 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 800236a:	e005      	b.n	8002378 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f9b9 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f000 f9ca 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b08      	cmp	r3, #8
 800238a:	d122      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b08      	cmp	r3, #8
 8002398:	d11b      	bne.n	80023d2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f06f 0208 	mvn.w	r2, #8
 80023a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2204      	movs	r2, #4
 80023a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	69db      	ldr	r3, [r3, #28]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 f99d 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 80023be:	e005      	b.n	80023cc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f98f 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 f9a0 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d122      	bne.n	8002426 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d11b      	bne.n	8002426 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f06f 0210 	mvn.w	r2, #16
 80023f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2208      	movs	r2, #8
 80023fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	69db      	ldr	r3, [r3, #28]
 8002404:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002408:	2b00      	cmp	r3, #0
 800240a:	d003      	beq.n	8002414 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f973 	bl	80026f8 <HAL_TIM_IC_CaptureCallback>
 8002412:	e005      	b.n	8002420 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f965 	bl	80026e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f000 f976 	bl	800270c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	2b01      	cmp	r3, #1
 8002432:	d10e      	bne.n	8002452 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f06f 0201 	mvn.w	r2, #1
 800244a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f93f 	bl	80026d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	691b      	ldr	r3, [r3, #16]
 8002458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800245c:	2b80      	cmp	r3, #128	; 0x80
 800245e:	d10e      	bne.n	800247e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800246a:	2b80      	cmp	r3, #128	; 0x80
 800246c:	d107      	bne.n	800247e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 fba1 	bl	8002bc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691b      	ldr	r3, [r3, #16]
 8002484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002488:	2b40      	cmp	r3, #64	; 0x40
 800248a:	d10e      	bne.n	80024aa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002496:	2b40      	cmp	r3, #64	; 0x40
 8002498:	d107      	bne.n	80024aa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f000 f93b 	bl	8002720 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	f003 0320 	and.w	r3, r3, #32
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d10e      	bne.n	80024d6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b20      	cmp	r3, #32
 80024c4:	d107      	bne.n	80024d6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f06f 0220 	mvn.w	r2, #32
 80024ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fb6b 	bl	8002bac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80024d6:	bf00      	nop
 80024d8:	3708      	adds	r7, #8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024de:	b580      	push	{r7, lr}
 80024e0:	b084      	sub	sp, #16
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6078      	str	r0, [r7, #4]
 80024e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d101      	bne.n	80024f6 <HAL_TIM_ConfigClockSource+0x18>
 80024f2:	2302      	movs	r3, #2
 80024f4:	e0a6      	b.n	8002644 <HAL_TIM_ConfigClockSource+0x166>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002514:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800251c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2b40      	cmp	r3, #64	; 0x40
 800252c:	d067      	beq.n	80025fe <HAL_TIM_ConfigClockSource+0x120>
 800252e:	2b40      	cmp	r3, #64	; 0x40
 8002530:	d80b      	bhi.n	800254a <HAL_TIM_ConfigClockSource+0x6c>
 8002532:	2b10      	cmp	r3, #16
 8002534:	d073      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x140>
 8002536:	2b10      	cmp	r3, #16
 8002538:	d802      	bhi.n	8002540 <HAL_TIM_ConfigClockSource+0x62>
 800253a:	2b00      	cmp	r3, #0
 800253c:	d06f      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800253e:	e078      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002540:	2b20      	cmp	r3, #32
 8002542:	d06c      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x140>
 8002544:	2b30      	cmp	r3, #48	; 0x30
 8002546:	d06a      	beq.n	800261e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002548:	e073      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800254a:	2b70      	cmp	r3, #112	; 0x70
 800254c:	d00d      	beq.n	800256a <HAL_TIM_ConfigClockSource+0x8c>
 800254e:	2b70      	cmp	r3, #112	; 0x70
 8002550:	d804      	bhi.n	800255c <HAL_TIM_ConfigClockSource+0x7e>
 8002552:	2b50      	cmp	r3, #80	; 0x50
 8002554:	d033      	beq.n	80025be <HAL_TIM_ConfigClockSource+0xe0>
 8002556:	2b60      	cmp	r3, #96	; 0x60
 8002558:	d041      	beq.n	80025de <HAL_TIM_ConfigClockSource+0x100>
      break;
 800255a:	e06a      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800255c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002560:	d066      	beq.n	8002630 <HAL_TIM_ConfigClockSource+0x152>
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002566:	d017      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002568:	e063      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685a      	ldr	r2, [r3, #4]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	f000 fa7b 	bl	8002a74 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800258c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68fa      	ldr	r2, [r7, #12]
 8002594:	609a      	str	r2, [r3, #8]
      break;
 8002596:	e04c      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f000 fa64 	bl	8002a74 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689a      	ldr	r2, [r3, #8]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ba:	609a      	str	r2, [r3, #8]
      break;
 80025bc:	e039      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6818      	ldr	r0, [r3, #0]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6859      	ldr	r1, [r3, #4]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	461a      	mov	r2, r3
 80025cc:	f000 f9d8 	bl	8002980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2150      	movs	r1, #80	; 0x50
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 fa31 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 80025dc:	e029      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	6859      	ldr	r1, [r3, #4]
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f000 f9f7 	bl	80029de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2160      	movs	r1, #96	; 0x60
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 fa21 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 80025fc:	e019      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6859      	ldr	r1, [r3, #4]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	461a      	mov	r2, r3
 800260c:	f000 f9b8 	bl	8002980 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2140      	movs	r1, #64	; 0x40
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fa11 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 800261c:	e009      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f000 fa08 	bl	8002a3e <TIM_ITRx_SetConfig>
      break;
 800262e:	e000      	b.n	8002632 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002630:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002642:	2300      	movs	r3, #0
}
 8002644:	4618      	mov	r0, r3
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002660:	2302      	movs	r3, #2
 8002662:	e031      	b.n	80026c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2202      	movs	r2, #2
 8002670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002674:	6839      	ldr	r1, [r7, #0]
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f8fc 	bl	8002874 <TIM_SlaveTimer_SetConfig>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d009      	beq.n	8002696 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e018      	b.n	80026c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68da      	ldr	r2, [r3, #12]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b083      	sub	sp, #12
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026d8:	bf00      	nop
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002728:	bf00      	nop
 800272a:	370c      	adds	r7, #12
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002734:	b480      	push	{r7}
 8002736:	b085      	sub	sp, #20
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	4a40      	ldr	r2, [pc, #256]	; (8002848 <TIM_Base_SetConfig+0x114>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d013      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002752:	d00f      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a3d      	ldr	r2, [pc, #244]	; (800284c <TIM_Base_SetConfig+0x118>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d00b      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a3c      	ldr	r2, [pc, #240]	; (8002850 <TIM_Base_SetConfig+0x11c>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d007      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <TIM_Base_SetConfig+0x120>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d003      	beq.n	8002774 <TIM_Base_SetConfig+0x40>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3a      	ldr	r2, [pc, #232]	; (8002858 <TIM_Base_SetConfig+0x124>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d108      	bne.n	8002786 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800277a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	4313      	orrs	r3, r2
 8002784:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a2f      	ldr	r2, [pc, #188]	; (8002848 <TIM_Base_SetConfig+0x114>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02b      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002794:	d027      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a2c      	ldr	r2, [pc, #176]	; (800284c <TIM_Base_SetConfig+0x118>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d023      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a2b      	ldr	r2, [pc, #172]	; (8002850 <TIM_Base_SetConfig+0x11c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d01f      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a2a      	ldr	r2, [pc, #168]	; (8002854 <TIM_Base_SetConfig+0x120>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d01b      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a29      	ldr	r2, [pc, #164]	; (8002858 <TIM_Base_SetConfig+0x124>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d017      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a28      	ldr	r2, [pc, #160]	; (800285c <TIM_Base_SetConfig+0x128>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d013      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a27      	ldr	r2, [pc, #156]	; (8002860 <TIM_Base_SetConfig+0x12c>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00f      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a26      	ldr	r2, [pc, #152]	; (8002864 <TIM_Base_SetConfig+0x130>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00b      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <TIM_Base_SetConfig+0x134>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <TIM_Base_SetConfig+0x138>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d003      	beq.n	80027e6 <TIM_Base_SetConfig+0xb2>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <TIM_Base_SetConfig+0x13c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d108      	bne.n	80027f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a0a      	ldr	r2, [pc, #40]	; (8002848 <TIM_Base_SetConfig+0x114>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d003      	beq.n	800282c <TIM_Base_SetConfig+0xf8>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4a0c      	ldr	r2, [pc, #48]	; (8002858 <TIM_Base_SetConfig+0x124>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d103      	bne.n	8002834 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	615a      	str	r2, [r3, #20]
}
 800283a:	bf00      	nop
 800283c:	3714      	adds	r7, #20
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40010000 	.word	0x40010000
 800284c:	40000400 	.word	0x40000400
 8002850:	40000800 	.word	0x40000800
 8002854:	40000c00 	.word	0x40000c00
 8002858:	40010400 	.word	0x40010400
 800285c:	40014000 	.word	0x40014000
 8002860:	40014400 	.word	0x40014400
 8002864:	40014800 	.word	0x40014800
 8002868:	40001800 	.word	0x40001800
 800286c:	40001c00 	.word	0x40001c00
 8002870:	40002000 	.word	0x40002000

08002874 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800288c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	4313      	orrs	r3, r2
 8002896:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	f023 0307 	bic.w	r3, r3, #7
 800289e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	697a      	ldr	r2, [r7, #20]
 80028b0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b30      	cmp	r3, #48	; 0x30
 80028b8:	d05c      	beq.n	8002974 <TIM_SlaveTimer_SetConfig+0x100>
 80028ba:	2b30      	cmp	r3, #48	; 0x30
 80028bc:	d806      	bhi.n	80028cc <TIM_SlaveTimer_SetConfig+0x58>
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d058      	beq.n	8002974 <TIM_SlaveTimer_SetConfig+0x100>
 80028c2:	2b20      	cmp	r3, #32
 80028c4:	d056      	beq.n	8002974 <TIM_SlaveTimer_SetConfig+0x100>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d054      	beq.n	8002974 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 80028ca:	e054      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80028cc:	2b50      	cmp	r3, #80	; 0x50
 80028ce:	d03d      	beq.n	800294c <TIM_SlaveTimer_SetConfig+0xd8>
 80028d0:	2b50      	cmp	r3, #80	; 0x50
 80028d2:	d802      	bhi.n	80028da <TIM_SlaveTimer_SetConfig+0x66>
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d010      	beq.n	80028fa <TIM_SlaveTimer_SetConfig+0x86>
      break;
 80028d8:	e04d      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 80028da:	2b60      	cmp	r3, #96	; 0x60
 80028dc:	d040      	beq.n	8002960 <TIM_SlaveTimer_SetConfig+0xec>
 80028de:	2b70      	cmp	r3, #112	; 0x70
 80028e0:	d000      	beq.n	80028e4 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 80028e2:	e048      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	68d9      	ldr	r1, [r3, #12]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	f000 f8be 	bl	8002a74 <TIM_ETR_SetConfig>
      break;
 80028f8:	e03d      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d101      	bne.n	8002906 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e038      	b.n	8002978 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	6a1a      	ldr	r2, [r3, #32]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 0201 	bic.w	r2, r2, #1
 800291c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	011b      	lsls	r3, r3, #4
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	621a      	str	r2, [r3, #32]
      break;
 800294a:	e014      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6818      	ldr	r0, [r3, #0]
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	6899      	ldr	r1, [r3, #8]
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	461a      	mov	r2, r3
 800295a:	f000 f811 	bl	8002980 <TIM_TI1_ConfigInputStage>
      break;
 800295e:	e00a      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6818      	ldr	r0, [r3, #0]
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6899      	ldr	r1, [r3, #8]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691b      	ldr	r3, [r3, #16]
 800296c:	461a      	mov	r2, r3
 800296e:	f000 f836 	bl	80029de <TIM_TI2_ConfigInputStage>
      break;
 8002972:	e000      	b.n	8002976 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8002974:	bf00      	nop
  }
  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}

08002980 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002980:	b480      	push	{r7}
 8002982:	b087      	sub	sp, #28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f023 0201 	bic.w	r2, r3, #1
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	f023 030a 	bic.w	r3, r3, #10
 80029bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	621a      	str	r2, [r3, #32]
}
 80029d2:	bf00      	nop
 80029d4:	371c      	adds	r7, #28
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029de:	b480      	push	{r7}
 80029e0:	b087      	sub	sp, #28
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0210 	bic.w	r2, r3, #16
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a1b      	ldr	r3, [r3, #32]
 8002a00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	031b      	lsls	r3, r3, #12
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a1a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	621a      	str	r2, [r3, #32]
}
 8002a32:	bf00      	nop
 8002a34:	371c      	adds	r7, #28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b085      	sub	sp, #20
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	f043 0307 	orr.w	r3, r3, #7
 8002a60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr

08002a74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	021a      	lsls	r2, r3, #8
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	431a      	orrs	r2, r3
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	371c      	adds	r7, #28
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b085      	sub	sp, #20
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ac8:	2302      	movs	r3, #2
 8002aca:	e05a      	b.n	8002b82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2202      	movs	r2, #2
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a21      	ldr	r2, [pc, #132]	; (8002b90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d022      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b18:	d01d      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d018      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a1b      	ldr	r2, [pc, #108]	; (8002b98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d00e      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d009      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a17      	ldr	r2, [pc, #92]	; (8002ba4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d004      	beq.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a15      	ldr	r2, [pc, #84]	; (8002ba8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d10c      	bne.n	8002b70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3714      	adds	r7, #20
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40000400 	.word	0x40000400
 8002b98:	40000800 	.word	0x40000800
 8002b9c:	40000c00 	.word	0x40000c00
 8002ba0:	40010400 	.word	0x40010400
 8002ba4:	40014000 	.word	0x40014000
 8002ba8:	40001800 	.word	0x40001800

08002bac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr

08002bc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002bc8:	bf00      	nop
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <LL_GPIO_SetPinMode>:
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b089      	sub	sp, #36	; 0x24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	fa93 f3a3 	rbit	r3, r3
 8002bee:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	401a      	ands	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	fa93 f3a3 	rbit	r3, r3
 8002c0e:	61bb      	str	r3, [r7, #24]
  return result;
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fab3 f383 	clz	r3, r3
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c20:	431a      	orrs	r2, r3
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	601a      	str	r2, [r3, #0]
}
 8002c26:	bf00      	nop
 8002c28:	3724      	adds	r7, #36	; 0x24
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <LL_GPIO_SetPinOutputType>:
{
 8002c32:	b480      	push	{r7}
 8002c34:	b085      	sub	sp, #20
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	43db      	mvns	r3, r3
 8002c46:	401a      	ands	r2, r3
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	605a      	str	r2, [r3, #4]
}
 8002c56:	bf00      	nop
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <LL_GPIO_SetPinSpeed>:
{
 8002c62:	b480      	push	{r7}
 8002c64:	b089      	sub	sp, #36	; 0x24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	fa93 f3a3 	rbit	r3, r3
 8002c7c:	613b      	str	r3, [r7, #16]
  return result;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	2103      	movs	r1, #3
 8002c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c8e:	43db      	mvns	r3, r3
 8002c90:	401a      	ands	r2, r3
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	61bb      	str	r3, [r7, #24]
  return result;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	fab3 f383 	clz	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	005b      	lsls	r3, r3, #1
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	fa01 f303 	lsl.w	r3, r1, r3
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	609a      	str	r2, [r3, #8]
}
 8002cb4:	bf00      	nop
 8002cb6:	3724      	adds	r7, #36	; 0x24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr

08002cc0 <LL_GPIO_SetPinPull>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	; 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	68da      	ldr	r2, [r3, #12]
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	fa93 f3a3 	rbit	r3, r3
 8002cda:	613b      	str	r3, [r7, #16]
  return result;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	fab3 f383 	clz	r3, r3
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2103      	movs	r1, #3
 8002ce8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	401a      	ands	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	61bb      	str	r3, [r7, #24]
  return result;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	fab3 f383 	clz	r3, r3
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	6879      	ldr	r1, [r7, #4]
 8002d08:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	60da      	str	r2, [r3, #12]
}
 8002d12:	bf00      	nop
 8002d14:	3724      	adds	r7, #36	; 0x24
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <LL_GPIO_SetAFPin_0_7>:
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b089      	sub	sp, #36	; 0x24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	6a1a      	ldr	r2, [r3, #32]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	fa93 f3a3 	rbit	r3, r3
 8002d38:	613b      	str	r3, [r7, #16]
  return result;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	fab3 f383 	clz	r3, r3
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	210f      	movs	r1, #15
 8002d46:	fa01 f303 	lsl.w	r3, r1, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	401a      	ands	r2, r3
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	fa93 f3a3 	rbit	r3, r3
 8002d58:	61bb      	str	r3, [r7, #24]
  return result;
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	fab3 f383 	clz	r3, r3
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	621a      	str	r2, [r3, #32]
}
 8002d70:	bf00      	nop
 8002d72:	3724      	adds	r7, #36	; 0x24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_GPIO_SetAFPin_8_15>:
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	613b      	str	r3, [r7, #16]
  return result;
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	fab3 f383 	clz	r3, r3
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	210f      	movs	r1, #15
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	401a      	ands	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0a1b      	lsrs	r3, r3, #8
 8002db2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	61bb      	str	r3, [r7, #24]
  return result;
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	fab3 f383 	clz	r3, r3
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002dd2:	bf00      	nop
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b088      	sub	sp, #32
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
 8002de6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002de8:	2300      	movs	r3, #0
 8002dea:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	fa93 f3a3 	rbit	r3, r3
 8002dfc:	613b      	str	r3, [r7, #16]
  return result;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fab3 f383 	clz	r3, r3
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002e08:	e050      	b.n	8002eac <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	2101      	movs	r1, #1
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	fa01 f303 	lsl.w	r3, r1, r3
 8002e16:	4013      	ands	r3, r2
 8002e18:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d042      	beq.n	8002ea6 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d003      	beq.n	8002e30 <LL_GPIO_Init+0x52>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d10d      	bne.n	8002e4c <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	461a      	mov	r2, r3
 8002e36:	69b9      	ldr	r1, [r7, #24]
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f7ff ff12 	bl	8002c62 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	68db      	ldr	r3, [r3, #12]
 8002e42:	461a      	mov	r2, r3
 8002e44:	69b9      	ldr	r1, [r7, #24]
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff fef3 	bl	8002c32 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	461a      	mov	r2, r3
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff33 	bl	8002cc0 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d11a      	bne.n	8002e98 <LL_GPIO_Init+0xba>
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	fa93 f3a3 	rbit	r3, r3
 8002e6c:	60bb      	str	r3, [r7, #8]
  return result;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002e70:	fab3 f383 	clz	r3, r3
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b07      	cmp	r3, #7
 8002e78:	d807      	bhi.n	8002e8a <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	69b9      	ldr	r1, [r7, #24]
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff ff4b 	bl	8002d1e <LL_GPIO_SetAFPin_0_7>
 8002e88:	e006      	b.n	8002e98 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	69b9      	ldr	r1, [r7, #24]
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ff72 	bl	8002d7c <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	69b9      	ldr	r1, [r7, #24]
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fe97 	bl	8002bd4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1a7      	bne.n	8002e0a <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3720      	adds	r7, #32
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002ec4:	b084      	sub	sp, #16
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b084      	sub	sp, #16
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
 8002ece:	f107 001c 	add.w	r0, r7, #28
 8002ed2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d122      	bne.n	8002f22 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f001 fab4 	bl	8004484 <USB_CoreReset>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]
 8002f20:	e01a      	b.n	8002f58 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f001 faa8 	bl	8004484 <USB_CoreReset>
 8002f34:	4603      	mov	r3, r0
 8002f36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d106      	bne.n	8002f4c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4a:	e005      	b.n	8002f58 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d10b      	bne.n	8002f76 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f043 0206 	orr.w	r2, r3, #6
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f043 0220 	orr.w	r2, r3, #32
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f82:	b004      	add	sp, #16
 8002f84:	4770      	bx	lr
	...

08002f88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b087      	sub	sp, #28
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	60f8      	str	r0, [r7, #12]
 8002f90:	60b9      	str	r1, [r7, #8]
 8002f92:	4613      	mov	r3, r2
 8002f94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f96:	79fb      	ldrb	r3, [r7, #7]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d165      	bne.n	8003068 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	4a41      	ldr	r2, [pc, #260]	; (80030a4 <USB_SetTurnaroundTime+0x11c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d906      	bls.n	8002fb2 <USB_SetTurnaroundTime+0x2a>
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	4a40      	ldr	r2, [pc, #256]	; (80030a8 <USB_SetTurnaroundTime+0x120>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d802      	bhi.n	8002fb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002fac:	230f      	movs	r3, #15
 8002fae:	617b      	str	r3, [r7, #20]
 8002fb0:	e062      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	4a3c      	ldr	r2, [pc, #240]	; (80030a8 <USB_SetTurnaroundTime+0x120>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d906      	bls.n	8002fc8 <USB_SetTurnaroundTime+0x40>
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	4a3b      	ldr	r2, [pc, #236]	; (80030ac <USB_SetTurnaroundTime+0x124>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d802      	bhi.n	8002fc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002fc2:	230e      	movs	r3, #14
 8002fc4:	617b      	str	r3, [r7, #20]
 8002fc6:	e057      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4a38      	ldr	r2, [pc, #224]	; (80030ac <USB_SetTurnaroundTime+0x124>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d906      	bls.n	8002fde <USB_SetTurnaroundTime+0x56>
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	4a37      	ldr	r2, [pc, #220]	; (80030b0 <USB_SetTurnaroundTime+0x128>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d802      	bhi.n	8002fde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002fd8:	230d      	movs	r3, #13
 8002fda:	617b      	str	r3, [r7, #20]
 8002fdc:	e04c      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4a33      	ldr	r2, [pc, #204]	; (80030b0 <USB_SetTurnaroundTime+0x128>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d906      	bls.n	8002ff4 <USB_SetTurnaroundTime+0x6c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	4a32      	ldr	r2, [pc, #200]	; (80030b4 <USB_SetTurnaroundTime+0x12c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d802      	bhi.n	8002ff4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002fee:	230c      	movs	r3, #12
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	e041      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4a2f      	ldr	r2, [pc, #188]	; (80030b4 <USB_SetTurnaroundTime+0x12c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d906      	bls.n	800300a <USB_SetTurnaroundTime+0x82>
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	4a2e      	ldr	r2, [pc, #184]	; (80030b8 <USB_SetTurnaroundTime+0x130>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d802      	bhi.n	800300a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003004:	230b      	movs	r3, #11
 8003006:	617b      	str	r3, [r7, #20]
 8003008:	e036      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <USB_SetTurnaroundTime+0x130>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d906      	bls.n	8003020 <USB_SetTurnaroundTime+0x98>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	4a29      	ldr	r2, [pc, #164]	; (80030bc <USB_SetTurnaroundTime+0x134>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d802      	bhi.n	8003020 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800301a:	230a      	movs	r3, #10
 800301c:	617b      	str	r3, [r7, #20]
 800301e:	e02b      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	4a26      	ldr	r2, [pc, #152]	; (80030bc <USB_SetTurnaroundTime+0x134>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d906      	bls.n	8003036 <USB_SetTurnaroundTime+0xae>
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <USB_SetTurnaroundTime+0x138>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d802      	bhi.n	8003036 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003030:	2309      	movs	r3, #9
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e020      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4a21      	ldr	r2, [pc, #132]	; (80030c0 <USB_SetTurnaroundTime+0x138>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d906      	bls.n	800304c <USB_SetTurnaroundTime+0xc4>
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4a20      	ldr	r2, [pc, #128]	; (80030c4 <USB_SetTurnaroundTime+0x13c>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003046:	2308      	movs	r3, #8
 8003048:	617b      	str	r3, [r7, #20]
 800304a:	e015      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4a1d      	ldr	r2, [pc, #116]	; (80030c4 <USB_SetTurnaroundTime+0x13c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d906      	bls.n	8003062 <USB_SetTurnaroundTime+0xda>
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	4a1c      	ldr	r2, [pc, #112]	; (80030c8 <USB_SetTurnaroundTime+0x140>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d802      	bhi.n	8003062 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800305c:	2307      	movs	r3, #7
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e00a      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003062:	2306      	movs	r3, #6
 8003064:	617b      	str	r3, [r7, #20]
 8003066:	e007      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d102      	bne.n	8003074 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800306e:	2309      	movs	r3, #9
 8003070:	617b      	str	r3, [r7, #20]
 8003072:	e001      	b.n	8003078 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003074:	2309      	movs	r3, #9
 8003076:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	68da      	ldr	r2, [r3, #12]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003090:	431a      	orrs	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr
 80030a4:	00d8acbf 	.word	0x00d8acbf
 80030a8:	00e4e1bf 	.word	0x00e4e1bf
 80030ac:	00f423ff 	.word	0x00f423ff
 80030b0:	0106737f 	.word	0x0106737f
 80030b4:	011a499f 	.word	0x011a499f
 80030b8:	01312cff 	.word	0x01312cff
 80030bc:	014ca43f 	.word	0x014ca43f
 80030c0:	016e35ff 	.word	0x016e35ff
 80030c4:	01a6ab1f 	.word	0x01a6ab1f
 80030c8:	01e847ff 	.word	0x01e847ff

080030cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b083      	sub	sp, #12
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f043 0201 	orr.w	r2, r3, #1
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr

080030ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030ee:	b480      	push	{r7}
 80030f0:	b083      	sub	sp, #12
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f023 0201 	bic.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	370c      	adds	r7, #12
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	460b      	mov	r3, r1
 800311a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003128:	78fb      	ldrb	r3, [r7, #3]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d106      	bne.n	800313c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	e00b      	b.n	8003154 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800313c:	78fb      	ldrb	r3, [r7, #3]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d106      	bne.n	8003150 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	60da      	str	r2, [r3, #12]
 800314e:	e001      	b.n	8003154 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e003      	b.n	800315c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003154:	2032      	movs	r0, #50	; 0x32
 8003156:	f7fd fc17 	bl	8000988 <HAL_Delay>

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003164:	b084      	sub	sp, #16
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
 800316e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
 8003182:	e009      	b.n	8003198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	3340      	adds	r3, #64	; 0x40
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	2200      	movs	r2, #0
 8003190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	3301      	adds	r3, #1
 8003196:	613b      	str	r3, [r7, #16]
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b0e      	cmp	r3, #14
 800319c:	d9f2      	bls.n	8003184 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800319e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d11c      	bne.n	80031de <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031b2:	f043 0302 	orr.w	r3, r3, #2
 80031b6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	639a      	str	r2, [r3, #56]	; 0x38
 80031dc:	e00b      	b.n	80031f6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031fc:	461a      	mov	r2, r3
 80031fe:	2300      	movs	r3, #0
 8003200:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003208:	4619      	mov	r1, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003210:	461a      	mov	r2, r3
 8003212:	680b      	ldr	r3, [r1, #0]
 8003214:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003218:	2b01      	cmp	r3, #1
 800321a:	d10c      	bne.n	8003236 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800321c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d104      	bne.n	800322c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003222:	2100      	movs	r1, #0
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 f949 	bl	80034bc <USB_SetDevSpeed>
 800322a:	e008      	b.n	800323e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800322c:	2101      	movs	r1, #1
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f944 	bl	80034bc <USB_SetDevSpeed>
 8003234:	e003      	b.n	800323e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003236:	2103      	movs	r1, #3
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f93f 	bl	80034bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800323e:	2110      	movs	r1, #16
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f000 f8f3 	bl	800342c <USB_FlushTxFifo>
 8003246:	4603      	mov	r3, r0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d001      	beq.n	8003250 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f911 	bl	8003478 <USB_FlushRxFifo>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003266:	461a      	mov	r2, r3
 8003268:	2300      	movs	r3, #0
 800326a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003272:	461a      	mov	r2, r3
 8003274:	2300      	movs	r3, #0
 8003276:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800327e:	461a      	mov	r2, r3
 8003280:	2300      	movs	r3, #0
 8003282:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003284:	2300      	movs	r3, #0
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	e043      	b.n	8003312 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	015a      	lsls	r2, r3, #5
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4413      	add	r3, r2
 8003292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800329c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032a0:	d118      	bne.n	80032d4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d10a      	bne.n	80032be <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	015a      	lsls	r2, r3, #5
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	4413      	add	r3, r2
 80032b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b4:	461a      	mov	r2, r3
 80032b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e013      	b.n	80032e6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ca:	461a      	mov	r2, r3
 80032cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032d0:	6013      	str	r3, [r2, #0]
 80032d2:	e008      	b.n	80032e6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032e0:	461a      	mov	r2, r3
 80032e2:	2300      	movs	r3, #0
 80032e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f2:	461a      	mov	r2, r3
 80032f4:	2300      	movs	r3, #0
 80032f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003304:	461a      	mov	r2, r3
 8003306:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800330a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	3301      	adds	r3, #1
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	429a      	cmp	r2, r3
 8003318:	d3b7      	bcc.n	800328a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800331a:	2300      	movs	r3, #0
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	e043      	b.n	80033a8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	4413      	add	r3, r2
 8003328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003332:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003336:	d118      	bne.n	800336a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10a      	bne.n	8003354 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	461a      	mov	r2, r3
 800334c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e013      	b.n	800337c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003360:	461a      	mov	r2, r3
 8003362:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	e008      	b.n	800337c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	015a      	lsls	r2, r3, #5
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	4413      	add	r3, r2
 8003372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003376:	461a      	mov	r2, r3
 8003378:	2300      	movs	r3, #0
 800337a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003388:	461a      	mov	r2, r3
 800338a:	2300      	movs	r3, #0
 800338c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	015a      	lsls	r2, r3, #5
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4413      	add	r3, r2
 8003396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800339a:	461a      	mov	r2, r3
 800339c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80033a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	3301      	adds	r3, #1
 80033a6:	613b      	str	r3, [r7, #16]
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d3b7      	bcc.n	8003320 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	68fa      	ldr	r2, [r7, #12]
 80033ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	f043 0210 	orr.w	r2, r3, #16
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699a      	ldr	r2, [r3, #24]
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <USB_DevInit+0x2c4>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d005      	beq.n	8003402 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f043 0208 	orr.w	r2, r3, #8
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003404:	2b01      	cmp	r3, #1
 8003406:	d107      	bne.n	8003418 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003410:	f043 0304 	orr.w	r3, r3, #4
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003418:	7dfb      	ldrb	r3, [r7, #23]
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003424:	b004      	add	sp, #16
 8003426:	4770      	bx	lr
 8003428:	803c3800 	.word	0x803c3800

0800342c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003436:	2300      	movs	r3, #0
 8003438:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	f043 0220 	orr.w	r2, r3, #32
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	3301      	adds	r3, #1
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4a09      	ldr	r2, [pc, #36]	; (8003474 <USB_FlushTxFifo+0x48>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d901      	bls.n	8003458 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e006      	b.n	8003466 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b20      	cmp	r3, #32
 8003462:	d0f0      	beq.n	8003446 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	00030d40 	.word	0x00030d40

08003478 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2210      	movs	r2, #16
 8003488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	3301      	adds	r3, #1
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <USB_FlushRxFifo+0x40>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e006      	b.n	80034aa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d0f0      	beq.n	800348a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	00030d40 	.word	0x00030d40

080034bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	460b      	mov	r3, r1
 80034c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034dc:	4313      	orrs	r3, r2
 80034de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034e0:	2300      	movs	r3, #0
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3714      	adds	r7, #20
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034ee:	b480      	push	{r7}
 80034f0:	b087      	sub	sp, #28
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0306 	and.w	r3, r3, #6
 8003506:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
 8003512:	e00a      	b.n	800352a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d002      	beq.n	8003520 <USB_GetDevSpeed+0x32>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2b06      	cmp	r3, #6
 800351e:	d102      	bne.n	8003526 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003520:	2302      	movs	r3, #2
 8003522:	75fb      	strb	r3, [r7, #23]
 8003524:	e001      	b.n	800352a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003526:	230f      	movs	r3, #15
 8003528:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800352a:	7dfb      	ldrb	r3, [r7, #23]
}
 800352c:	4618      	mov	r0, r3
 800352e:	371c      	adds	r7, #28
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	785b      	ldrb	r3, [r3, #1]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d13a      	bne.n	80035ca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	2101      	movs	r1, #1
 8003566:	fa01 f303 	lsl.w	r3, r1, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	68f9      	ldr	r1, [r7, #12]
 800356e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003572:	4313      	orrs	r3, r2
 8003574:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	015a      	lsls	r2, r3, #5
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d155      	bne.n	8003638 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4413      	add	r3, r2
 8003594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	78db      	ldrb	r3, [r3, #3]
 80035a6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035a8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	059b      	lsls	r3, r3, #22
 80035ae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035b0:	4313      	orrs	r3, r2
 80035b2:	68ba      	ldr	r2, [r7, #8]
 80035b4:	0151      	lsls	r1, r2, #5
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	440a      	add	r2, r1
 80035ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c6:	6013      	str	r3, [r2, #0]
 80035c8:	e036      	b.n	8003638 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035d0:	69da      	ldr	r2, [r3, #28]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	f003 030f 	and.w	r3, r3, #15
 80035da:	2101      	movs	r1, #1
 80035dc:	fa01 f303 	lsl.w	r3, r1, r3
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	68f9      	ldr	r1, [r7, #12]
 80035e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d11a      	bne.n	8003638 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	015a      	lsls	r2, r3, #5
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	4413      	add	r3, r2
 800360a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	78db      	ldrb	r3, [r3, #3]
 800361c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800361e:	430b      	orrs	r3, r1
 8003620:	4313      	orrs	r3, r2
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	0151      	lsls	r1, r2, #5
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	440a      	add	r2, r1
 800362a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800362e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003632:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003636:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003648:	b480      	push	{r7}
 800364a:	b085      	sub	sp, #20
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	781b      	ldrb	r3, [r3, #0]
 800365a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	785b      	ldrb	r3, [r3, #1]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d161      	bne.n	8003728 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003676:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800367a:	d11f      	bne.n	80036bc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68ba      	ldr	r2, [r7, #8]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800369a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	0151      	lsls	r1, r2, #5
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	440a      	add	r2, r1
 80036b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	2101      	movs	r1, #1
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	68f9      	ldr	r1, [r7, #12]
 80036d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036dc:	4013      	ands	r3, r2
 80036de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	f003 030f 	and.w	r3, r3, #15
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	43db      	mvns	r3, r3
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003700:	4013      	ands	r3, r2
 8003702:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4413      	add	r3, r2
 800370c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	0159      	lsls	r1, r3, #5
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	440b      	add	r3, r1
 800371a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371e:	4619      	mov	r1, r3
 8003720:	4b35      	ldr	r3, [pc, #212]	; (80037f8 <USB_DeactivateEndpoint+0x1b0>)
 8003722:	4013      	ands	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
 8003726:	e060      	b.n	80037ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4413      	add	r3, r2
 8003730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800373a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800373e:	d11f      	bne.n	8003780 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	0151      	lsls	r1, r2, #5
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	440a      	add	r2, r1
 8003756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800375e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	015a      	lsls	r2, r3, #5
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	4413      	add	r3, r2
 8003768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	0151      	lsls	r1, r2, #5
 8003772:	68fa      	ldr	r2, [r7, #12]
 8003774:	440a      	add	r2, r1
 8003776:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800377a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800377e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	f003 030f 	and.w	r3, r3, #15
 8003790:	2101      	movs	r1, #1
 8003792:	fa01 f303 	lsl.w	r3, r1, r3
 8003796:	041b      	lsls	r3, r3, #16
 8003798:	43db      	mvns	r3, r3
 800379a:	68f9      	ldr	r1, [r7, #12]
 800379c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a0:	4013      	ands	r3, r2
 80037a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037aa:	69da      	ldr	r2, [r3, #28]
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	781b      	ldrb	r3, [r3, #0]
 80037b0:	f003 030f 	and.w	r3, r3, #15
 80037b4:	2101      	movs	r1, #1
 80037b6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ba:	041b      	lsls	r3, r3, #16
 80037bc:	43db      	mvns	r3, r3
 80037be:	68f9      	ldr	r1, [r7, #12]
 80037c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037c4:	4013      	ands	r3, r2
 80037c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	015a      	lsls	r2, r3, #5
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4413      	add	r3, r2
 80037d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	0159      	lsls	r1, r3, #5
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	440b      	add	r3, r1
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	4619      	mov	r1, r3
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <USB_DeactivateEndpoint+0x1b4>)
 80037e6:	4013      	ands	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	ec337800 	.word	0xec337800
 80037fc:	eff37800 	.word	0xeff37800

08003800 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b08a      	sub	sp, #40	; 0x28
 8003804:	af02      	add	r7, sp, #8
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	60b9      	str	r1, [r7, #8]
 800380a:	4613      	mov	r3, r2
 800380c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	785b      	ldrb	r3, [r3, #1]
 800381c:	2b01      	cmp	r3, #1
 800381e:	f040 815c 	bne.w	8003ada <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d132      	bne.n	8003890 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	015a      	lsls	r2, r3, #5
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	0151      	lsls	r1, r2, #5
 800383c:	69fa      	ldr	r2, [r7, #28]
 800383e:	440a      	add	r2, r1
 8003840:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003844:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003848:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800384c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	015a      	lsls	r2, r3, #5
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	4413      	add	r3, r2
 8003856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	69ba      	ldr	r2, [r7, #24]
 800385e:	0151      	lsls	r1, r2, #5
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	440a      	add	r2, r1
 8003864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003868:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800386c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	4413      	add	r3, r2
 8003876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	0151      	lsls	r1, r2, #5
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	440a      	add	r2, r1
 8003884:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003888:	0cdb      	lsrs	r3, r3, #19
 800388a:	04db      	lsls	r3, r3, #19
 800388c:	6113      	str	r3, [r2, #16]
 800388e:	e074      	b.n	800397a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	0151      	lsls	r1, r2, #5
 80038a2:	69fa      	ldr	r2, [r7, #28]
 80038a4:	440a      	add	r2, r1
 80038a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038aa:	0cdb      	lsrs	r3, r3, #19
 80038ac:	04db      	lsls	r3, r3, #19
 80038ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	69fa      	ldr	r2, [r7, #28]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038ce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	6959      	ldr	r1, [r3, #20]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	440b      	add	r3, r1
 80038ec:	1e59      	subs	r1, r3, #1
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80038f6:	04d9      	lsls	r1, r3, #19
 80038f8:	4b9d      	ldr	r3, [pc, #628]	; (8003b70 <USB_EPStartXfer+0x370>)
 80038fa:	400b      	ands	r3, r1
 80038fc:	69b9      	ldr	r1, [r7, #24]
 80038fe:	0148      	lsls	r0, r1, #5
 8003900:	69f9      	ldr	r1, [r7, #28]
 8003902:	4401      	add	r1, r0
 8003904:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003908:	4313      	orrs	r3, r2
 800390a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	015a      	lsls	r2, r3, #5
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	4413      	add	r3, r2
 8003914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003922:	69b9      	ldr	r1, [r7, #24]
 8003924:	0148      	lsls	r0, r1, #5
 8003926:	69f9      	ldr	r1, [r7, #28]
 8003928:	4401      	add	r1, r0
 800392a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800392e:	4313      	orrs	r3, r2
 8003930:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	78db      	ldrb	r3, [r3, #3]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d11f      	bne.n	800397a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	0151      	lsls	r1, r2, #5
 800394c:	69fa      	ldr	r2, [r7, #28]
 800394e:	440a      	add	r2, r1
 8003950:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003954:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003958:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	015a      	lsls	r2, r3, #5
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	4413      	add	r3, r2
 8003962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	0151      	lsls	r1, r2, #5
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	440a      	add	r2, r1
 8003970:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003974:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003978:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d14b      	bne.n	8003a18 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	691b      	ldr	r3, [r3, #16]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d009      	beq.n	800399c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003994:	461a      	mov	r2, r3
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	78db      	ldrb	r3, [r3, #3]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d128      	bne.n	80039f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d110      	bne.n	80039d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	69fb      	ldr	r3, [r7, #28]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	0151      	lsls	r1, r2, #5
 80039c6:	69fa      	ldr	r2, [r7, #28]
 80039c8:	440a      	add	r2, r1
 80039ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	e00f      	b.n	80039f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	015a      	lsls	r2, r3, #5
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	4413      	add	r3, r2
 80039de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	0151      	lsls	r1, r2, #5
 80039e8:	69fa      	ldr	r2, [r7, #28]
 80039ea:	440a      	add	r2, r1
 80039ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039f6:	69bb      	ldr	r3, [r7, #24]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	0151      	lsls	r1, r2, #5
 8003a08:	69fa      	ldr	r2, [r7, #28]
 8003a0a:	440a      	add	r2, r1
 8003a0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	e12f      	b.n	8003c78 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	015a      	lsls	r2, r3, #5
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	0151      	lsls	r1, r2, #5
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	440a      	add	r2, r1
 8003a2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	78db      	ldrb	r3, [r3, #3]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d015      	beq.n	8003a6c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	695b      	ldr	r3, [r3, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	f000 8117 	beq.w	8003c78 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a60:	69f9      	ldr	r1, [r7, #28]
 8003a62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a66:	4313      	orrs	r3, r2
 8003a68:	634b      	str	r3, [r1, #52]	; 0x34
 8003a6a:	e105      	b.n	8003c78 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d110      	bne.n	8003a9e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9a:	6013      	str	r3, [r2, #0]
 8003a9c:	e00f      	b.n	8003abe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	015a      	lsls	r2, r3, #5
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	0151      	lsls	r1, r2, #5
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	440a      	add	r2, r1
 8003ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ab8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003abc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	68d9      	ldr	r1, [r3, #12]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	781a      	ldrb	r2, [r3, #0]
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	695b      	ldr	r3, [r3, #20]
 8003aca:	b298      	uxth	r0, r3
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	68f8      	ldr	r0, [r7, #12]
 8003ad4:	f000 fa2b 	bl	8003f2e <USB_WritePacket>
 8003ad8:	e0ce      	b.n	8003c78 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	0151      	lsls	r1, r2, #5
 8003aec:	69fa      	ldr	r2, [r7, #28]
 8003aee:	440a      	add	r2, r1
 8003af0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af4:	0cdb      	lsrs	r3, r3, #19
 8003af6:	04db      	lsls	r3, r3, #19
 8003af8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003afa:	69bb      	ldr	r3, [r7, #24]
 8003afc:	015a      	lsls	r2, r3, #5
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	69ba      	ldr	r2, [r7, #24]
 8003b0a:	0151      	lsls	r1, r2, #5
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	440a      	add	r2, r1
 8003b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b14:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b18:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b1c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d126      	bne.n	8003b74 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	015a      	lsls	r2, r3, #5
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b32:	691a      	ldr	r2, [r3, #16]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b3c:	69b9      	ldr	r1, [r7, #24]
 8003b3e:	0148      	lsls	r0, r1, #5
 8003b40:	69f9      	ldr	r1, [r7, #28]
 8003b42:	4401      	add	r1, r0
 8003b44:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	69ba      	ldr	r2, [r7, #24]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b6a:	6113      	str	r3, [r2, #16]
 8003b6c:	e036      	b.n	8003bdc <USB_EPStartXfer+0x3dc>
 8003b6e:	bf00      	nop
 8003b70:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	1e5a      	subs	r2, r3, #1
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b88:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	8afb      	ldrh	r3, [r7, #22]
 8003b9a:	04d9      	lsls	r1, r3, #19
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <USB_EPStartXfer+0x484>)
 8003b9e:	400b      	ands	r3, r1
 8003ba0:	69b9      	ldr	r1, [r7, #24]
 8003ba2:	0148      	lsls	r0, r1, #5
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	4401      	add	r1, r0
 8003ba8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bac:	4313      	orrs	r3, r2
 8003bae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	8af9      	ldrh	r1, [r7, #22]
 8003bc4:	fb01 f303 	mul.w	r3, r1, r3
 8003bc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	0148      	lsls	r0, r1, #5
 8003bd0:	69f9      	ldr	r1, [r7, #28]
 8003bd2:	4401      	add	r1, r0
 8003bd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bdc:	79fb      	ldrb	r3, [r7, #7]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d10d      	bne.n	8003bfe <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d009      	beq.n	8003bfe <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	68d9      	ldr	r1, [r3, #12]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	78db      	ldrb	r3, [r3, #3]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d128      	bne.n	8003c58 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d110      	bne.n	8003c38 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	0151      	lsls	r1, r2, #5
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	440a      	add	r2, r1
 8003c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c34:	6013      	str	r3, [r2, #0]
 8003c36:	e00f      	b.n	8003c58 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	0151      	lsls	r1, r2, #5
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	440a      	add	r2, r1
 8003c4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c56:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	0151      	lsls	r1, r2, #5
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	440a      	add	r2, r1
 8003c6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c76:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3720      	adds	r7, #32
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	1ff80000 	.word	0x1ff80000

08003c88 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b087      	sub	sp, #28
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	60b9      	str	r1, [r7, #8]
 8003c92:	4613      	mov	r3, r2
 8003c94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	785b      	ldrb	r3, [r3, #1]
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 80cd 	bne.w	8003e44 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d132      	bne.n	8003d18 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	0151      	lsls	r1, r2, #5
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	440a      	add	r2, r1
 8003cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ccc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cd0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cd4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	0151      	lsls	r1, r2, #5
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	440a      	add	r2, r1
 8003cec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cf4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	0151      	lsls	r1, r2, #5
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	440a      	add	r2, r1
 8003d0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d10:	0cdb      	lsrs	r3, r3, #19
 8003d12:	04db      	lsls	r3, r3, #19
 8003d14:	6113      	str	r3, [r2, #16]
 8003d16:	e04e      	b.n	8003db6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	015a      	lsls	r2, r3, #5
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	4413      	add	r3, r2
 8003d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	693a      	ldr	r2, [r7, #16]
 8003d28:	0151      	lsls	r1, r2, #5
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	440a      	add	r2, r1
 8003d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d32:	0cdb      	lsrs	r3, r3, #19
 8003d34:	04db      	lsls	r3, r3, #19
 8003d36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	015a      	lsls	r2, r3, #5
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	4413      	add	r3, r2
 8003d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	0151      	lsls	r1, r2, #5
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	440a      	add	r2, r1
 8003d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d52:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d56:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d5a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d903      	bls.n	8003d70 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9c:	691a      	ldr	r2, [r3, #16]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003da6:	6939      	ldr	r1, [r7, #16]
 8003da8:	0148      	lsls	r0, r1, #5
 8003daa:	6979      	ldr	r1, [r7, #20]
 8003dac:	4401      	add	r1, r0
 8003dae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003db2:	4313      	orrs	r3, r2
 8003db4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003db6:	79fb      	ldrb	r3, [r7, #7]
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d11e      	bne.n	8003dfa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d009      	beq.n	8003dd8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	0151      	lsls	r1, r2, #5
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	440a      	add	r2, r1
 8003dee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	e092      	b.n	8003f20 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	015a      	lsls	r2, r3, #5
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	4413      	add	r3, r2
 8003e02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	693a      	ldr	r2, [r7, #16]
 8003e0a:	0151      	lsls	r1, r2, #5
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	440a      	add	r2, r1
 8003e10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e18:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d07e      	beq.n	8003f20 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	2101      	movs	r1, #1
 8003e34:	fa01 f303 	lsl.w	r3, r1, r3
 8003e38:	6979      	ldr	r1, [r7, #20]
 8003e3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	634b      	str	r3, [r1, #52]	; 0x34
 8003e42:	e06d      	b.n	8003f20 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	0151      	lsls	r1, r2, #5
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	440a      	add	r2, r1
 8003e5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e5e:	0cdb      	lsrs	r3, r3, #19
 8003e60:	04db      	lsls	r3, r3, #19
 8003e62:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e70:	691b      	ldr	r3, [r3, #16]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e7e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e82:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e86:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	015a      	lsls	r2, r3, #5
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	4413      	add	r3, r2
 8003ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	0151      	lsls	r1, r2, #5
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	440a      	add	r2, r1
 8003eae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ec4:	691a      	ldr	r2, [r3, #16]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ece:	6939      	ldr	r1, [r7, #16]
 8003ed0:	0148      	lsls	r0, r1, #5
 8003ed2:	6979      	ldr	r1, [r7, #20]
 8003ed4:	4401      	add	r1, r0
 8003ed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003eda:	4313      	orrs	r3, r2
 8003edc:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ede:	79fb      	ldrb	r3, [r7, #7]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d10d      	bne.n	8003f00 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d009      	beq.n	8003f00 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	68d9      	ldr	r1, [r3, #12]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	015a      	lsls	r2, r3, #5
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efc:	460a      	mov	r2, r1
 8003efe:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	0151      	lsls	r1, r2, #5
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	440a      	add	r2, r1
 8003f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f1a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f1e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b089      	sub	sp, #36	; 0x24
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	4611      	mov	r1, r2
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	71fb      	strb	r3, [r7, #7]
 8003f40:	4613      	mov	r3, r2
 8003f42:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003f4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d11a      	bne.n	8003f8a <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003f54:	88bb      	ldrh	r3, [r7, #4]
 8003f56:	3303      	adds	r3, #3
 8003f58:	089b      	lsrs	r3, r3, #2
 8003f5a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	61bb      	str	r3, [r7, #24]
 8003f60:	e00f      	b.n	8003f82 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	031a      	lsls	r2, r3, #12
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	4413      	add	r3, r2
 8003f6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f6e:	461a      	mov	r2, r3
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	61bb      	str	r3, [r7, #24]
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d3eb      	bcc.n	8003f62 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f8a:	2300      	movs	r3, #0
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3724      	adds	r7, #36	; 0x24
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b089      	sub	sp, #36	; 0x24
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	3303      	adds	r3, #3
 8003fb2:	089b      	lsrs	r3, r3, #2
 8003fb4:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	61bb      	str	r3, [r7, #24]
 8003fba:	e00b      	b.n	8003fd4 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	3304      	adds	r3, #4
 8003fcc:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	61bb      	str	r3, [r7, #24]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3ef      	bcc.n	8003fbc <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003fdc:	69fb      	ldr	r3, [r7, #28]
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3724      	adds	r7, #36	; 0x24
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b085      	sub	sp, #20
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	785b      	ldrb	r3, [r3, #1]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d12c      	bne.n	8004060 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db12      	blt.n	800403e <USB_EPSetStall+0x54>
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00f      	beq.n	800403e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	015a      	lsls	r2, r3, #5
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	4413      	add	r3, r2
 8004026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	68ba      	ldr	r2, [r7, #8]
 800402e:	0151      	lsls	r1, r2, #5
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	440a      	add	r2, r1
 8004034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004038:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800403c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	015a      	lsls	r2, r3, #5
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4413      	add	r3, r2
 8004046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	0151      	lsls	r1, r2, #5
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	440a      	add	r2, r1
 8004054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e02b      	b.n	80040b8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	015a      	lsls	r2, r3, #5
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	4413      	add	r3, r2
 8004068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	db12      	blt.n	8004098 <USB_EPSetStall+0xae>
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00f      	beq.n	8004098 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	4413      	add	r3, r2
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	440a      	add	r2, r1
 800408e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004092:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004096:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3714      	adds	r7, #20
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr

080040c6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b085      	sub	sp, #20
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
 80040ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	785b      	ldrb	r3, [r3, #1]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d128      	bne.n	8004134 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	015a      	lsls	r2, r3, #5
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68ba      	ldr	r2, [r7, #8]
 80040f2:	0151      	lsls	r1, r2, #5
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	440a      	add	r2, r1
 80040f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004100:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	78db      	ldrb	r3, [r3, #3]
 8004106:	2b03      	cmp	r3, #3
 8004108:	d003      	beq.n	8004112 <USB_EPClearStall+0x4c>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	78db      	ldrb	r3, [r3, #3]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d138      	bne.n	8004184 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	68fa      	ldr	r2, [r7, #12]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6013      	str	r3, [r2, #0]
 8004132:	e027      	b.n	8004184 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	015a      	lsls	r2, r3, #5
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4413      	add	r3, r2
 800413c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	0151      	lsls	r1, r2, #5
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	440a      	add	r2, r1
 800414a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800414e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004152:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	78db      	ldrb	r3, [r3, #3]
 8004158:	2b03      	cmp	r3, #3
 800415a:	d003      	beq.n	8004164 <USB_EPClearStall+0x9e>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	78db      	ldrb	r3, [r3, #3]
 8004160:	2b02      	cmp	r3, #2
 8004162:	d10f      	bne.n	8004184 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	015a      	lsls	r2, r3, #5
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	0151      	lsls	r1, r2, #5
 8004176:	68fa      	ldr	r2, [r7, #12]
 8004178:	440a      	add	r2, r1
 800417a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800417e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004182:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3714      	adds	r7, #20
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr

08004192 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004192:	b480      	push	{r7}
 8004194:	b085      	sub	sp, #20
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
 800419a:	460b      	mov	r3, r1
 800419c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	68fa      	ldr	r2, [r7, #12]
 80041ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041b4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	78fb      	ldrb	r3, [r7, #3]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	3714      	adds	r7, #20
 80041d6:	46bd      	mov	sp, r7
 80041d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041dc:	4770      	bx	lr

080041de <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041de:	b580      	push	{r7, lr}
 80041e0:	b084      	sub	sp, #16
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041f8:	f023 0302 	bic.w	r3, r3, #2
 80041fc:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80041fe:	2003      	movs	r0, #3
 8004200:	f7fc fbc2 	bl	8000988 <HAL_Delay>

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004228:	f043 0302 	orr.w	r3, r3, #2
 800422c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800422e:	2003      	movs	r0, #3
 8004230:	f7fc fbaa 	bl	8000988 <HAL_Delay>

  return HAL_OK;
 8004234:	2300      	movs	r3, #0
}
 8004236:	4618      	mov	r0, r3
 8004238:	3710      	adds	r7, #16
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800423e:	b480      	push	{r7}
 8004240:	b085      	sub	sp, #20
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	68fa      	ldr	r2, [r7, #12]
 8004252:	4013      	ands	r3, r2
 8004254:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	68ba      	ldr	r2, [r7, #8]
 8004284:	4013      	ands	r3, r2
 8004286:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	0c1b      	lsrs	r3, r3, #16
}
 800428c:	4618      	mov	r0, r3
 800428e:	3714      	adds	r7, #20
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	69db      	ldr	r3, [r3, #28]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	b29b      	uxth	r3, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	460b      	mov	r3, r1
 80042d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80042fa:	68bb      	ldr	r3, [r7, #8]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800432a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800432c:	78fb      	ldrb	r3, [r7, #3]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	01db      	lsls	r3, r3, #7
 800433a:	b2db      	uxtb	r3, r3
 800433c:	693a      	ldr	r2, [r7, #16]
 800433e:	4313      	orrs	r3, r2
 8004340:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004342:	78fb      	ldrb	r3, [r7, #3]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	693a      	ldr	r2, [r7, #16]
 8004352:	4013      	ands	r3, r2
 8004354:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004356:	68bb      	ldr	r3, [r7, #8]
}
 8004358:	4618      	mov	r0, r3
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b083      	sub	sp, #12
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f003 0301 	and.w	r3, r3, #1
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800439e:	f023 0307 	bic.w	r3, r3, #7
 80043a2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043b6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
	...

080043c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b087      	sub	sp, #28
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	460b      	mov	r3, r1
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	333c      	adds	r3, #60	; 0x3c
 80043de:	3304      	adds	r3, #4
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	4a26      	ldr	r2, [pc, #152]	; (8004480 <USB_EP0_OutStart+0xb8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d90a      	bls.n	8004402 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043fc:	d101      	bne.n	8004402 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e037      	b.n	8004472 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	461a      	mov	r2, r3
 800440a:	2300      	movs	r3, #0
 800440c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800441c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004420:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004430:	f043 0318 	orr.w	r3, r3, #24
 8004434:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004444:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004448:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800444a:	7afb      	ldrb	r3, [r7, #11]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d10f      	bne.n	8004470 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004456:	461a      	mov	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	697a      	ldr	r2, [r7, #20]
 8004466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800446a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800446e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
 800447e:	bf00      	nop
 8004480:	4f54300a 	.word	0x4f54300a

08004484 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	3301      	adds	r3, #1
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	4a13      	ldr	r2, [pc, #76]	; (80044e8 <USB_CoreReset+0x64>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d901      	bls.n	80044a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e01b      	b.n	80044da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	daf2      	bge.n	8004490 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f043 0201 	orr.w	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3301      	adds	r3, #1
 80044be:	60fb      	str	r3, [r7, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	4a09      	ldr	r2, [pc, #36]	; (80044e8 <USB_CoreReset+0x64>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d901      	bls.n	80044cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e006      	b.n	80044da <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d0f0      	beq.n	80044ba <USB_CoreReset+0x36>

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	00030d40 	.word	0x00030d40

080044ec <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80044f4:	4a04      	ldr	r2, [pc, #16]	; (8004508 <LL_SetSystemCoreClock+0x1c>)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6013      	str	r3, [r2, #0]
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr
 8004506:	bf00      	nop
 8004508:	20000000 	.word	0x20000000

0800450c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004518:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800451c:	f002 f8d6 	bl	80066cc <malloc>
 8004520:	4603      	mov	r3, r0
 8004522:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d105      	bne.n	8004536 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004532:	2302      	movs	r3, #2
 8004534:	e066      	b.n	8004604 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	7c1b      	ldrb	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d119      	bne.n	800457a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004546:	f44f 7300 	mov.w	r3, #512	; 0x200
 800454a:	2202      	movs	r2, #2
 800454c:	2181      	movs	r1, #129	; 0x81
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f001 ff43 	bl	80063da <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800455a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800455e:	2202      	movs	r2, #2
 8004560:	2101      	movs	r1, #1
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f001 ff39 	bl	80063da <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2210      	movs	r2, #16
 8004574:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004578:	e016      	b.n	80045a8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800457a:	2340      	movs	r3, #64	; 0x40
 800457c:	2202      	movs	r2, #2
 800457e:	2181      	movs	r1, #129	; 0x81
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f001 ff2a 	bl	80063da <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800458c:	2340      	movs	r3, #64	; 0x40
 800458e:	2202      	movs	r2, #2
 8004590:	2101      	movs	r1, #1
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 ff21 	bl	80063da <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2210      	movs	r2, #16
 80045a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80045a8:	2308      	movs	r3, #8
 80045aa:	2203      	movs	r2, #3
 80045ac:	2182      	movs	r1, #130	; 0x82
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f001 ff13 	bl	80063da <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	7c1b      	ldrb	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045e8:	2101      	movs	r1, #1
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f001 ffe4 	bl	80065b8 <USBD_LL_PrepareReceive>
 80045f0:	e007      	b.n	8004602 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80045f8:	2340      	movs	r3, #64	; 0x40
 80045fa:	2101      	movs	r1, #1
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f001 ffdb 	bl	80065b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	460b      	mov	r3, r1
 8004616:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800461c:	2181      	movs	r1, #129	; 0x81
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f001 ff01 	bl	8006426 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800462a:	2101      	movs	r1, #1
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 fefa 	bl	8006426 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800463a:	2182      	movs	r1, #130	; 0x82
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f001 fef2 	bl	8006426 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004658:	2b00      	cmp	r3, #0
 800465a:	d00e      	beq.n	800467a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466c:	4618      	mov	r0, r3
 800466e:	f002 f835 	bl	80066dc <free>
    pdev->pClassData = NULL;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800467a:	7bfb      	ldrb	r3, [r7, #15]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004694:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004696:	2300      	movs	r3, #0
 8004698:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800469e:	2300      	movs	r3, #0
 80046a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d03a      	beq.n	8004724 <USBD_CDC_Setup+0xa0>
 80046ae:	2b20      	cmp	r3, #32
 80046b0:	f040 8097 	bne.w	80047e2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	88db      	ldrh	r3, [r3, #6]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d029      	beq.n	8004710 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	b25b      	sxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	da11      	bge.n	80046ea <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	683a      	ldr	r2, [r7, #0]
 80046d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80046d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80046d4:	683a      	ldr	r2, [r7, #0]
 80046d6:	88d2      	ldrh	r2, [r2, #6]
 80046d8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80046da:	6939      	ldr	r1, [r7, #16]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	88db      	ldrh	r3, [r3, #6]
 80046e0:	461a      	mov	r2, r3
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f001 fa6d 	bl	8005bc2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80046e8:	e082      	b.n	80047f0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	785a      	ldrb	r2, [r3, #1]
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	88db      	ldrh	r3, [r3, #6]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004700:	6939      	ldr	r1, [r7, #16]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	88db      	ldrh	r3, [r3, #6]
 8004706:	461a      	mov	r2, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 fa86 	bl	8005c1a <USBD_CtlPrepareRx>
    break;
 800470e:	e06f      	b.n	80047f0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	7850      	ldrb	r0, [r2, #1]
 800471c:	2200      	movs	r2, #0
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	4798      	blx	r3
    break;
 8004722:	e065      	b.n	80047f0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	785b      	ldrb	r3, [r3, #1]
 8004728:	2b0b      	cmp	r3, #11
 800472a:	d84f      	bhi.n	80047cc <USBD_CDC_Setup+0x148>
 800472c:	a201      	add	r2, pc, #4	; (adr r2, 8004734 <USBD_CDC_Setup+0xb0>)
 800472e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004732:	bf00      	nop
 8004734:	08004765 	.word	0x08004765
 8004738:	080047db 	.word	0x080047db
 800473c:	080047cd 	.word	0x080047cd
 8004740:	080047cd 	.word	0x080047cd
 8004744:	080047cd 	.word	0x080047cd
 8004748:	080047cd 	.word	0x080047cd
 800474c:	080047cd 	.word	0x080047cd
 8004750:	080047cd 	.word	0x080047cd
 8004754:	080047cd 	.word	0x080047cd
 8004758:	080047cd 	.word	0x080047cd
 800475c:	0800478d 	.word	0x0800478d
 8004760:	080047b5 	.word	0x080047b5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800476a:	2b03      	cmp	r3, #3
 800476c:	d107      	bne.n	800477e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800476e:	f107 030c 	add.w	r3, r7, #12
 8004772:	2202      	movs	r2, #2
 8004774:	4619      	mov	r1, r3
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f001 fa23 	bl	8005bc2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800477c:	e030      	b.n	80047e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f001 f9ad 	bl	8005ae0 <USBD_CtlError>
        ret = USBD_FAIL;
 8004786:	2303      	movs	r3, #3
 8004788:	75fb      	strb	r3, [r7, #23]
      break;
 800478a:	e029      	b.n	80047e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004792:	2b03      	cmp	r3, #3
 8004794:	d107      	bne.n	80047a6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004796:	f107 030f 	add.w	r3, r7, #15
 800479a:	2201      	movs	r2, #1
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 fa0f 	bl	8005bc2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80047a4:	e01c      	b.n	80047e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f001 f999 	bl	8005ae0 <USBD_CtlError>
        ret = USBD_FAIL;
 80047ae:	2303      	movs	r3, #3
 80047b0:	75fb      	strb	r3, [r7, #23]
      break;
 80047b2:	e015      	b.n	80047e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d00f      	beq.n	80047de <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80047be:	6839      	ldr	r1, [r7, #0]
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f001 f98d 	bl	8005ae0 <USBD_CtlError>
        ret = USBD_FAIL;
 80047c6:	2303      	movs	r3, #3
 80047c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80047ca:	e008      	b.n	80047de <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80047cc:	6839      	ldr	r1, [r7, #0]
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f001 f986 	bl	8005ae0 <USBD_CtlError>
      ret = USBD_FAIL;
 80047d4:	2303      	movs	r3, #3
 80047d6:	75fb      	strb	r3, [r7, #23]
      break;
 80047d8:	e002      	b.n	80047e0 <USBD_CDC_Setup+0x15c>
      break;
 80047da:	bf00      	nop
 80047dc:	e008      	b.n	80047f0 <USBD_CDC_Setup+0x16c>
      break;
 80047de:	bf00      	nop
    }
    break;
 80047e0:	e006      	b.n	80047f0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80047e2:	6839      	ldr	r1, [r7, #0]
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f001 f97b 	bl	8005ae0 <USBD_CtlError>
    ret = USBD_FAIL;
 80047ea:	2303      	movs	r3, #3
 80047ec:	75fb      	strb	r3, [r7, #23]
    break;
 80047ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop

080047fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	460b      	mov	r3, r1
 8004806:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800480e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800481a:	2303      	movs	r3, #3
 800481c:	e049      	b.n	80048b2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004824:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004826:	78fa      	ldrb	r2, [r7, #3]
 8004828:	6879      	ldr	r1, [r7, #4]
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3318      	adds	r3, #24
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d029      	beq.n	8004890 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	009b      	lsls	r3, r3, #2
 8004844:	4413      	add	r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	3318      	adds	r3, #24
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	78f9      	ldrb	r1, [r7, #3]
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	460b      	mov	r3, r1
 8004854:	00db      	lsls	r3, r3, #3
 8004856:	1a5b      	subs	r3, r3, r1
 8004858:	009b      	lsls	r3, r3, #2
 800485a:	4403      	add	r3, r0
 800485c:	3344      	adds	r3, #68	; 0x44
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	fbb2 f1f3 	udiv	r1, r2, r3
 8004864:	fb03 f301 	mul.w	r3, r3, r1
 8004868:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800486a:	2b00      	cmp	r3, #0
 800486c:	d110      	bne.n	8004890 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800486e:	78fa      	ldrb	r2, [r7, #3]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3318      	adds	r3, #24
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004882:	78f9      	ldrb	r1, [r7, #3]
 8004884:	2300      	movs	r3, #0
 8004886:	2200      	movs	r2, #0
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f001 fe74 	bl	8006576 <USBD_LL_Transmit>
 800488e:	e00f      	b.n	80048b0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	2200      	movs	r2, #0
 8004894:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80048a6:	68ba      	ldr	r2, [r7, #8]
 80048a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80048ac:	78fa      	ldrb	r2, [r7, #3]
 80048ae:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}

080048ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80048ba:	b580      	push	{r7, lr}
 80048bc:	b084      	sub	sp, #16
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
 80048c2:	460b      	mov	r3, r1
 80048c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80048d8:	2303      	movs	r3, #3
 80048da:	e015      	b.n	8004908 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80048dc:	78fb      	ldrb	r3, [r7, #3]
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f001 fe8a 	bl	80065fa <USBD_LL_GetRxDataSize>
 80048e6:	4602      	mov	r2, r0
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004902:	4611      	mov	r1, r2
 8004904:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004906:	2300      	movs	r3, #0
}
 8004908:	4618      	mov	r0, r3
 800490a:	3710      	adds	r7, #16
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800491e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d015      	beq.n	8004956 <USBD_CDC_EP0_RxReady+0x46>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004930:	2bff      	cmp	r3, #255	; 0xff
 8004932:	d010      	beq.n	8004956 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004942:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800494a:	b292      	uxth	r2, r2
 800494c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	22ff      	movs	r2, #255	; 0xff
 8004952:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2243      	movs	r2, #67	; 0x43
 800496c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800496e:	4b03      	ldr	r3, [pc, #12]	; (800497c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004970:	4618      	mov	r0, r3
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	20000094 	.word	0x20000094

08004980 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2243      	movs	r2, #67	; 0x43
 800498c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800498e:	4b03      	ldr	r3, [pc, #12]	; (800499c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8004990:	4618      	mov	r0, r3
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	20000050 	.word	0x20000050

080049a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2243      	movs	r2, #67	; 0x43
 80049ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80049ae:	4b03      	ldr	r3, [pc, #12]	; (80049bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	200000d8 	.word	0x200000d8

080049c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	220a      	movs	r2, #10
 80049cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80049ce:	4b03      	ldr	r3, [pc, #12]	; (80049dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	370c      	adds	r7, #12
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	2000000c 	.word	0x2000000c

080049e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e004      	b.n	80049fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	370c      	adds	r7, #12
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr

08004a0a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b087      	sub	sp, #28
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	60f8      	str	r0, [r7, #12]
 8004a12:	60b9      	str	r1, [r7, #8]
 8004a14:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a1c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a4c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3714      	adds	r7, #20
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a72:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e016      	b.n	8004ab0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	7c1b      	ldrb	r3, [r3, #16]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d109      	bne.n	8004a9e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a94:	2101      	movs	r1, #1
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f001 fd8e 	bl	80065b8 <USBD_LL_PrepareReceive>
 8004a9c:	e007      	b.n	8004aae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004aa4:	2340      	movs	r3, #64	; 0x40
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f001 fd85 	bl	80065b8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d101      	bne.n	8004ad0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e025      	b.n	8004b1c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d003      	beq.n	8004ae2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d003      	beq.n	8004af4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	79fa      	ldrb	r2, [r7, #7]
 8004b0e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f001 fbfb 	bl	800630c <USBD_LL_Init>
 8004b16:	4603      	mov	r3, r0
 8004b18:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004b1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	3718      	adds	r7, #24
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e010      	b.n	8004b5e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	683a      	ldr	r2, [r7, #0]
 8004b40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b4c:	f107 020e 	add.w	r2, r7, #14
 8004b50:	4610      	mov	r0, r2
 8004b52:	4798      	blx	r3
 8004b54:	4602      	mov	r2, r0
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004b5c:	2300      	movs	r3, #0
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3710      	adds	r7, #16
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f001 fc18 	bl	80063a4 <USBD_LL_Start>
 8004b74:	4603      	mov	r3, r0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	78fa      	ldrb	r2, [r7, #3]
 8004bb8:	4611      	mov	r1, r2
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b082      	sub	sp, #8
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d007      	beq.n	8004bf2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	78fa      	ldrb	r2, [r7, #3]
 8004bec:	4611      	mov	r1, r2
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	4798      	blx	r3
  }

  return USBD_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 ff2c 	bl	8005a6c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004c22:	461a      	mov	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c30:	f003 031f 	and.w	r3, r3, #31
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d00e      	beq.n	8004c56 <USBD_LL_SetupStage+0x5a>
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d302      	bcc.n	8004c42 <USBD_LL_SetupStage+0x46>
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d014      	beq.n	8004c6a <USBD_LL_SetupStage+0x6e>
 8004c40:	e01d      	b.n	8004c7e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c48:	4619      	mov	r1, r3
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa18 	bl	8005080 <USBD_StdDevReq>
 8004c50:	4603      	mov	r3, r0
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e020      	b.n	8004c98 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa7c 	bl	800515c <USBD_StdItfReq>
 8004c64:	4603      	mov	r3, r0
 8004c66:	73fb      	strb	r3, [r7, #15]
      break;
 8004c68:	e016      	b.n	8004c98 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004c70:	4619      	mov	r1, r3
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 fab8 	bl	80051e8 <USBD_StdEPReq>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c7c:	e00c      	b.n	8004c98 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c84:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f001 fbe9 	bl	8006464 <USBD_LL_StallEP>
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]
      break;
 8004c96:	bf00      	nop
  }

  return ret;
 8004c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3710      	adds	r7, #16
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	60f8      	str	r0, [r7, #12]
 8004caa:	460b      	mov	r3, r1
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004cb0:	7afb      	ldrb	r3, [r7, #11]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d137      	bne.n	8004d26 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004cbc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d14a      	bne.n	8004d5e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	689a      	ldr	r2, [r3, #8]
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d913      	bls.n	8004cfc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	1ad2      	subs	r2, r2, r3
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	68da      	ldr	r2, [r3, #12]
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	4293      	cmp	r3, r2
 8004cec:	bf28      	it	cs
 8004cee:	4613      	movcs	r3, r2
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	6879      	ldr	r1, [r7, #4]
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 ffad 	bl	8005c54 <USBD_CtlContinueRx>
 8004cfa:	e030      	b.n	8004d5e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d105      	bne.n	8004d1e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	68f8      	ldr	r0, [r7, #12]
 8004d1c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f000 ffa9 	bl	8005c76 <USBD_CtlSendStatus>
 8004d24:	e01b      	b.n	8004d5e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d013      	beq.n	8004d5a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004d38:	2b03      	cmp	r3, #3
 8004d3a:	d10e      	bne.n	8004d5a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	7afa      	ldrb	r2, [r7, #11]
 8004d46:	4611      	mov	r1, r2
 8004d48:	68f8      	ldr	r0, [r7, #12]
 8004d4a:	4798      	blx	r3
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d003      	beq.n	8004d5e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004d56:	7dfb      	ldrb	r3, [r7, #23]
 8004d58:	e002      	b.n	8004d60 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e000      	b.n	8004d60 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004d5e:	2300      	movs	r3, #0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b086      	sub	sp, #24
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	460b      	mov	r3, r1
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d16a      	bne.n	8004e52 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3314      	adds	r3, #20
 8004d80:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d155      	bne.n	8004e38 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d914      	bls.n	8004dc2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	1ad2      	subs	r2, r2, r3
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	461a      	mov	r2, r3
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 ff22 	bl	8005bf8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004db4:	2300      	movs	r3, #0
 8004db6:	2200      	movs	r2, #0
 8004db8:	2100      	movs	r1, #0
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f001 fbfc 	bl	80065b8 <USBD_LL_PrepareReceive>
 8004dc0:	e03a      	b.n	8004e38 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d11c      	bne.n	8004e08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	685a      	ldr	r2, [r3, #4]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d316      	bcc.n	8004e08 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d20f      	bcs.n	8004e08 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004de8:	2200      	movs	r2, #0
 8004dea:	2100      	movs	r1, #0
 8004dec:	68f8      	ldr	r0, [r7, #12]
 8004dee:	f000 ff03 	bl	8005bf8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	68f8      	ldr	r0, [r7, #12]
 8004e02:	f001 fbd9 	bl	80065b8 <USBD_LL_PrepareReceive>
 8004e06:	e017      	b.n	8004e38 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d105      	bne.n	8004e2a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e2a:	2180      	movs	r1, #128	; 0x80
 8004e2c:	68f8      	ldr	r0, [r7, #12]
 8004e2e:	f001 fb19 	bl	8006464 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e32:	68f8      	ldr	r0, [r7, #12]
 8004e34:	f000 ff32 	bl	8005c9c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d123      	bne.n	8004e8a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7ff fe9b 	bl	8004b7e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e50:	e01b      	b.n	8004e8a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d013      	beq.n	8004e86 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d10e      	bne.n	8004e86 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e6e:	695b      	ldr	r3, [r3, #20]
 8004e70:	7afa      	ldrb	r2, [r7, #11]
 8004e72:	4611      	mov	r1, r2
 8004e74:	68f8      	ldr	r0, [r7, #12]
 8004e76:	4798      	blx	r3
 8004e78:	4603      	mov	r3, r0
 8004e7a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004e7c:	7dfb      	ldrb	r3, [r7, #23]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004e82:	7dfb      	ldrb	r3, [r7, #23]
 8004e84:	e002      	b.n	8004e8c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e86:	2303      	movs	r3, #3
 8004e88:	e000      	b.n	8004e8c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d009      	beq.n	8004ed8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6852      	ldr	r2, [r2, #4]
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	4611      	mov	r1, r2
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ed8:	2340      	movs	r3, #64	; 0x40
 8004eda:	2200      	movs	r2, #0
 8004edc:	2100      	movs	r1, #0
 8004ede:	6878      	ldr	r0, [r7, #4]
 8004ee0:	f001 fa7b 	bl	80063da <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2240      	movs	r2, #64	; 0x40
 8004ef0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ef4:	2340      	movs	r3, #64	; 0x40
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f001 fa6d 	bl	80063da <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2240      	movs	r2, #64	; 0x40
 8004f0a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3708      	adds	r7, #8
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b083      	sub	sp, #12
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	460b      	mov	r3, r1
 8004f20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	370c      	adds	r7, #12
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b083      	sub	sp, #12
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2204      	movs	r2, #4
 8004f4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b083      	sub	sp, #12
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f6e:	2b04      	cmp	r3, #4
 8004f70:	d105      	bne.n	8004f7e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f9a:	2b03      	cmp	r3, #3
 8004f9c:	d10b      	bne.n	8004fb6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fa4:	69db      	ldr	r3, [r3, #28]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d005      	beq.n	8004fb6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004fb6:	2300      	movs	r3, #0
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3708      	adds	r7, #8
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
 8004fc8:	460b      	mov	r3, r1
 8004fca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004fe6:	2300      	movs	r3, #0
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b083      	sub	sp, #12
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	370c      	adds	r7, #12
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b082      	sub	sp, #8
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6852      	ldr	r2, [r2, #4]
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	4611      	mov	r1, r2
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	4798      	blx	r3
  }

  return USBD_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3708      	adds	r7, #8
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}

08005042 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005042:	b480      	push	{r7}
 8005044:	b087      	sub	sp, #28
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	781b      	ldrb	r3, [r3, #0]
 8005052:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	3301      	adds	r3, #1
 8005058:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005060:	8a3b      	ldrh	r3, [r7, #16]
 8005062:	021b      	lsls	r3, r3, #8
 8005064:	b21a      	sxth	r2, r3
 8005066:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800506a:	4313      	orrs	r3, r2
 800506c:	b21b      	sxth	r3, r3
 800506e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005070:	89fb      	ldrh	r3, [r7, #14]
}
 8005072:	4618      	mov	r0, r3
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
	...

08005080 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b084      	sub	sp, #16
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005096:	2b20      	cmp	r3, #32
 8005098:	d004      	beq.n	80050a4 <USBD_StdDevReq+0x24>
 800509a:	2b40      	cmp	r3, #64	; 0x40
 800509c:	d002      	beq.n	80050a4 <USBD_StdDevReq+0x24>
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d00a      	beq.n	80050b8 <USBD_StdDevReq+0x38>
 80050a2:	e050      	b.n	8005146 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	6839      	ldr	r1, [r7, #0]
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	4798      	blx	r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	73fb      	strb	r3, [r7, #15]
    break;
 80050b6:	e04b      	b.n	8005150 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	785b      	ldrb	r3, [r3, #1]
 80050bc:	2b09      	cmp	r3, #9
 80050be:	d83c      	bhi.n	800513a <USBD_StdDevReq+0xba>
 80050c0:	a201      	add	r2, pc, #4	; (adr r2, 80050c8 <USBD_StdDevReq+0x48>)
 80050c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c6:	bf00      	nop
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	08005131 	.word	0x08005131
 80050d0:	0800513b 	.word	0x0800513b
 80050d4:	08005127 	.word	0x08005127
 80050d8:	0800513b 	.word	0x0800513b
 80050dc:	080050fb 	.word	0x080050fb
 80050e0:	080050f1 	.word	0x080050f1
 80050e4:	0800513b 	.word	0x0800513b
 80050e8:	08005113 	.word	0x08005113
 80050ec:	08005105 	.word	0x08005105
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80050f0:	6839      	ldr	r1, [r7, #0]
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f9ce 	bl	8005494 <USBD_GetDescriptor>
      break;
 80050f8:	e024      	b.n	8005144 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80050fa:	6839      	ldr	r1, [r7, #0]
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fb33 	bl	8005768 <USBD_SetAddress>
      break;
 8005102:	e01f      	b.n	8005144 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fb70 	bl	80057ec <USBD_SetConfig>
 800510c:	4603      	mov	r3, r0
 800510e:	73fb      	strb	r3, [r7, #15]
      break;
 8005110:	e018      	b.n	8005144 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8005112:	6839      	ldr	r1, [r7, #0]
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fc0d 	bl	8005934 <USBD_GetConfig>
      break;
 800511a:	e013      	b.n	8005144 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 fc3c 	bl	800599c <USBD_GetStatus>
      break;
 8005124:	e00e      	b.n	8005144 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005126:	6839      	ldr	r1, [r7, #0]
 8005128:	6878      	ldr	r0, [r7, #4]
 800512a:	f000 fc6a 	bl	8005a02 <USBD_SetFeature>
      break;
 800512e:	e009      	b.n	8005144 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8005130:	6839      	ldr	r1, [r7, #0]
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 fc79 	bl	8005a2a <USBD_ClrFeature>
      break;
 8005138:	e004      	b.n	8005144 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800513a:	6839      	ldr	r1, [r7, #0]
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 fccf 	bl	8005ae0 <USBD_CtlError>
      break;
 8005142:	bf00      	nop
    }
    break;
 8005144:	e004      	b.n	8005150 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005146:	6839      	ldr	r1, [r7, #0]
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f000 fcc9 	bl	8005ae0 <USBD_CtlError>
    break;
 800514e:	bf00      	nop
  }

  return ret;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop

0800515c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005172:	2b20      	cmp	r3, #32
 8005174:	d003      	beq.n	800517e <USBD_StdItfReq+0x22>
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d001      	beq.n	800517e <USBD_StdItfReq+0x22>
 800517a:	2b00      	cmp	r3, #0
 800517c:	d12a      	bne.n	80051d4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005184:	3b01      	subs	r3, #1
 8005186:	2b02      	cmp	r3, #2
 8005188:	d81d      	bhi.n	80051c6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	889b      	ldrh	r3, [r3, #4]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b01      	cmp	r3, #1
 8005192:	d813      	bhi.n	80051bc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	6839      	ldr	r1, [r7, #0]
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	4798      	blx	r3
 80051a2:	4603      	mov	r3, r0
 80051a4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	88db      	ldrh	r3, [r3, #6]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d110      	bne.n	80051d0 <USBD_StdItfReq+0x74>
 80051ae:	7bfb      	ldrb	r3, [r7, #15]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10d      	bne.n	80051d0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fd5e 	bl	8005c76 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80051ba:	e009      	b.n	80051d0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80051bc:	6839      	ldr	r1, [r7, #0]
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fc8e 	bl	8005ae0 <USBD_CtlError>
      break;
 80051c4:	e004      	b.n	80051d0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80051c6:	6839      	ldr	r1, [r7, #0]
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 fc89 	bl	8005ae0 <USBD_CtlError>
      break;
 80051ce:	e000      	b.n	80051d2 <USBD_StdItfReq+0x76>
      break;
 80051d0:	bf00      	nop
    }
    break;
 80051d2:	e004      	b.n	80051de <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80051d4:	6839      	ldr	r1, [r7, #0]
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fc82 	bl	8005ae0 <USBD_CtlError>
    break;
 80051dc:	bf00      	nop
  }

  return ret;
 80051de:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b084      	sub	sp, #16
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	889b      	ldrh	r3, [r3, #4]
 80051fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005204:	2b20      	cmp	r3, #32
 8005206:	d004      	beq.n	8005212 <USBD_StdEPReq+0x2a>
 8005208:	2b40      	cmp	r3, #64	; 0x40
 800520a:	d002      	beq.n	8005212 <USBD_StdEPReq+0x2a>
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <USBD_StdEPReq+0x3e>
 8005210:	e135      	b.n	800547e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	4798      	blx	r3
 8005220:	4603      	mov	r3, r0
 8005222:	73fb      	strb	r3, [r7, #15]
    break;
 8005224:	e130      	b.n	8005488 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d03e      	beq.n	80052ac <USBD_StdEPReq+0xc4>
 800522e:	2b03      	cmp	r3, #3
 8005230:	d002      	beq.n	8005238 <USBD_StdEPReq+0x50>
 8005232:	2b00      	cmp	r3, #0
 8005234:	d077      	beq.n	8005326 <USBD_StdEPReq+0x13e>
 8005236:	e11c      	b.n	8005472 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800523e:	2b02      	cmp	r3, #2
 8005240:	d002      	beq.n	8005248 <USBD_StdEPReq+0x60>
 8005242:	2b03      	cmp	r3, #3
 8005244:	d015      	beq.n	8005272 <USBD_StdEPReq+0x8a>
 8005246:	e02b      	b.n	80052a0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005248:	7bbb      	ldrb	r3, [r7, #14]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00c      	beq.n	8005268 <USBD_StdEPReq+0x80>
 800524e:	7bbb      	ldrb	r3, [r7, #14]
 8005250:	2b80      	cmp	r3, #128	; 0x80
 8005252:	d009      	beq.n	8005268 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005254:	7bbb      	ldrb	r3, [r7, #14]
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f001 f903 	bl	8006464 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800525e:	2180      	movs	r1, #128	; 0x80
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f001 f8ff 	bl	8006464 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005266:	e020      	b.n	80052aa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fc38 	bl	8005ae0 <USBD_CtlError>
        break;
 8005270:	e01b      	b.n	80052aa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	885b      	ldrh	r3, [r3, #2]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d10e      	bne.n	8005298 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800527a:	7bbb      	ldrb	r3, [r7, #14]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <USBD_StdEPReq+0xb0>
 8005280:	7bbb      	ldrb	r3, [r7, #14]
 8005282:	2b80      	cmp	r3, #128	; 0x80
 8005284:	d008      	beq.n	8005298 <USBD_StdEPReq+0xb0>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	88db      	ldrh	r3, [r3, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d104      	bne.n	8005298 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800528e:	7bbb      	ldrb	r3, [r7, #14]
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 f8e6 	bl	8006464 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fcec 	bl	8005c76 <USBD_CtlSendStatus>

        break;
 800529e:	e004      	b.n	80052aa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80052a0:	6839      	ldr	r1, [r7, #0]
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f000 fc1c 	bl	8005ae0 <USBD_CtlError>
        break;
 80052a8:	bf00      	nop
      }
      break;
 80052aa:	e0e7      	b.n	800547c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d002      	beq.n	80052bc <USBD_StdEPReq+0xd4>
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d015      	beq.n	80052e6 <USBD_StdEPReq+0xfe>
 80052ba:	e02d      	b.n	8005318 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052bc:	7bbb      	ldrb	r3, [r7, #14]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00c      	beq.n	80052dc <USBD_StdEPReq+0xf4>
 80052c2:	7bbb      	ldrb	r3, [r7, #14]
 80052c4:	2b80      	cmp	r3, #128	; 0x80
 80052c6:	d009      	beq.n	80052dc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80052c8:	7bbb      	ldrb	r3, [r7, #14]
 80052ca:	4619      	mov	r1, r3
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f001 f8c9 	bl	8006464 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80052d2:	2180      	movs	r1, #128	; 0x80
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f001 f8c5 	bl	8006464 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80052da:	e023      	b.n	8005324 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fbfe 	bl	8005ae0 <USBD_CtlError>
        break;
 80052e4:	e01e      	b.n	8005324 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	885b      	ldrh	r3, [r3, #2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d119      	bne.n	8005322 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80052ee:	7bbb      	ldrb	r3, [r7, #14]
 80052f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80052f8:	7bbb      	ldrb	r3, [r7, #14]
 80052fa:	4619      	mov	r1, r3
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 f8d0 	bl	80064a2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 fcb7 	bl	8005c76 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	4798      	blx	r3
        }
        break;
 8005316:	e004      	b.n	8005322 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbe0 	bl	8005ae0 <USBD_CtlError>
        break;
 8005320:	e000      	b.n	8005324 <USBD_StdEPReq+0x13c>
        break;
 8005322:	bf00      	nop
      }
      break;
 8005324:	e0aa      	b.n	800547c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800532c:	2b02      	cmp	r3, #2
 800532e:	d002      	beq.n	8005336 <USBD_StdEPReq+0x14e>
 8005330:	2b03      	cmp	r3, #3
 8005332:	d032      	beq.n	800539a <USBD_StdEPReq+0x1b2>
 8005334:	e097      	b.n	8005466 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005336:	7bbb      	ldrb	r3, [r7, #14]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <USBD_StdEPReq+0x164>
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	2b80      	cmp	r3, #128	; 0x80
 8005340:	d004      	beq.n	800534c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005342:	6839      	ldr	r1, [r7, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 fbcb 	bl	8005ae0 <USBD_CtlError>
          break;
 800534a:	e091      	b.n	8005470 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800534c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005350:	2b00      	cmp	r3, #0
 8005352:	da0b      	bge.n	800536c <USBD_StdEPReq+0x184>
 8005354:	7bbb      	ldrb	r3, [r7, #14]
 8005356:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800535a:	4613      	mov	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4413      	add	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	3310      	adds	r3, #16
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	4413      	add	r3, r2
 8005368:	3304      	adds	r3, #4
 800536a:	e00b      	b.n	8005384 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800536c:	7bbb      	ldrb	r3, [r7, #14]
 800536e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005372:	4613      	mov	r3, r2
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4413      	add	r3, r2
 8005378:	009b      	lsls	r3, r3, #2
 800537a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	4413      	add	r3, r2
 8005382:	3304      	adds	r3, #4
 8005384:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	2200      	movs	r2, #0
 800538a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	2202      	movs	r2, #2
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fc15 	bl	8005bc2 <USBD_CtlSendData>
        break;
 8005398:	e06a      	b.n	8005470 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800539a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	da11      	bge.n	80053c6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80053a2:	7bbb      	ldrb	r3, [r7, #14]
 80053a4:	f003 020f 	and.w	r2, r3, #15
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	3324      	adds	r3, #36	; 0x24
 80053b6:	881b      	ldrh	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d117      	bne.n	80053ec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80053bc:	6839      	ldr	r1, [r7, #0]
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fb8e 	bl	8005ae0 <USBD_CtlError>
            break;
 80053c4:	e054      	b.n	8005470 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80053c6:	7bbb      	ldrb	r3, [r7, #14]
 80053c8:	f003 020f 	and.w	r2, r3, #15
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	440b      	add	r3, r1
 80053d8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80053dc:	881b      	ldrh	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb7b 	bl	8005ae0 <USBD_CtlError>
            break;
 80053ea:	e041      	b.n	8005470 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80053ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da0b      	bge.n	800540c <USBD_StdEPReq+0x224>
 80053f4:	7bbb      	ldrb	r3, [r7, #14]
 80053f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3310      	adds	r3, #16
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3304      	adds	r3, #4
 800540a:	e00b      	b.n	8005424 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800540c:	7bbb      	ldrb	r3, [r7, #14]
 800540e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	3304      	adds	r3, #4
 8005424:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005426:	7bbb      	ldrb	r3, [r7, #14]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d002      	beq.n	8005432 <USBD_StdEPReq+0x24a>
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	2b80      	cmp	r3, #128	; 0x80
 8005430:	d103      	bne.n	800543a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2200      	movs	r2, #0
 8005436:	601a      	str	r2, [r3, #0]
 8005438:	e00e      	b.n	8005458 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800543a:	7bbb      	ldrb	r3, [r7, #14]
 800543c:	4619      	mov	r1, r3
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f001 f84e 	bl	80064e0 <USBD_LL_IsStallEP>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
 8005450:	e002      	b.n	8005458 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2202      	movs	r2, #2
 800545c:	4619      	mov	r1, r3
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fbaf 	bl	8005bc2 <USBD_CtlSendData>
          break;
 8005464:	e004      	b.n	8005470 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005466:	6839      	ldr	r1, [r7, #0]
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fb39 	bl	8005ae0 <USBD_CtlError>
        break;
 800546e:	bf00      	nop
      }
      break;
 8005470:	e004      	b.n	800547c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005472:	6839      	ldr	r1, [r7, #0]
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 fb33 	bl	8005ae0 <USBD_CtlError>
      break;
 800547a:	bf00      	nop
    }
    break;
 800547c:	e004      	b.n	8005488 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800547e:	6839      	ldr	r1, [r7, #0]
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f000 fb2d 	bl	8005ae0 <USBD_CtlError>
    break;
 8005486:	bf00      	nop
  }

  return ret;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800549e:	2300      	movs	r3, #0
 80054a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	885b      	ldrh	r3, [r3, #2]
 80054ae:	0a1b      	lsrs	r3, r3, #8
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	3b01      	subs	r3, #1
 80054b4:	2b06      	cmp	r3, #6
 80054b6:	f200 8128 	bhi.w	800570a <USBD_GetDescriptor+0x276>
 80054ba:	a201      	add	r2, pc, #4	; (adr r2, 80054c0 <USBD_GetDescriptor+0x2c>)
 80054bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	080054f5 	.word	0x080054f5
 80054c8:	08005535 	.word	0x08005535
 80054cc:	0800570b 	.word	0x0800570b
 80054d0:	0800570b 	.word	0x0800570b
 80054d4:	080056ab 	.word	0x080056ab
 80054d8:	080056d7 	.word	0x080056d7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	687a      	ldr	r2, [r7, #4]
 80054e6:	7c12      	ldrb	r2, [r2, #16]
 80054e8:	f107 0108 	add.w	r1, r7, #8
 80054ec:	4610      	mov	r0, r2
 80054ee:	4798      	blx	r3
 80054f0:	60f8      	str	r0, [r7, #12]
    break;
 80054f2:	e112      	b.n	800571a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7c1b      	ldrb	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d10d      	bne.n	8005518 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005504:	f107 0208 	add.w	r2, r7, #8
 8005508:	4610      	mov	r0, r2
 800550a:	4798      	blx	r3
 800550c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3301      	adds	r3, #1
 8005512:	2202      	movs	r2, #2
 8005514:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005516:	e100      	b.n	800571a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	f107 0208 	add.w	r2, r7, #8
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
 8005528:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	2202      	movs	r2, #2
 8005530:	701a      	strb	r2, [r3, #0]
    break;
 8005532:	e0f2      	b.n	800571a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	885b      	ldrh	r3, [r3, #2]
 8005538:	b2db      	uxtb	r3, r3
 800553a:	2b05      	cmp	r3, #5
 800553c:	f200 80ac 	bhi.w	8005698 <USBD_GetDescriptor+0x204>
 8005540:	a201      	add	r2, pc, #4	; (adr r2, 8005548 <USBD_GetDescriptor+0xb4>)
 8005542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005546:	bf00      	nop
 8005548:	08005561 	.word	0x08005561
 800554c:	08005595 	.word	0x08005595
 8005550:	080055c9 	.word	0x080055c9
 8005554:	080055fd 	.word	0x080055fd
 8005558:	08005631 	.word	0x08005631
 800555c:	08005665 	.word	0x08005665
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	7c12      	ldrb	r2, [r2, #16]
 8005578:	f107 0108 	add.w	r1, r7, #8
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005582:	e091      	b.n	80056a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005584:	6839      	ldr	r1, [r7, #0]
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 faaa 	bl	8005ae0 <USBD_CtlError>
        err++;
 800558c:	7afb      	ldrb	r3, [r7, #11]
 800558e:	3301      	adds	r3, #1
 8005590:	72fb      	strb	r3, [r7, #11]
      break;
 8005592:	e089      	b.n	80056a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d00b      	beq.n	80055b8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	7c12      	ldrb	r2, [r2, #16]
 80055ac:	f107 0108 	add.w	r1, r7, #8
 80055b0:	4610      	mov	r0, r2
 80055b2:	4798      	blx	r3
 80055b4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055b6:	e077      	b.n	80056a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80055b8:	6839      	ldr	r1, [r7, #0]
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 fa90 	bl	8005ae0 <USBD_CtlError>
        err++;
 80055c0:	7afb      	ldrb	r3, [r7, #11]
 80055c2:	3301      	adds	r3, #1
 80055c4:	72fb      	strb	r3, [r7, #11]
      break;
 80055c6:	e06f      	b.n	80056a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00b      	beq.n	80055ec <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7c12      	ldrb	r2, [r2, #16]
 80055e0:	f107 0108 	add.w	r1, r7, #8
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80055ea:	e05d      	b.n	80056a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80055ec:	6839      	ldr	r1, [r7, #0]
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa76 	bl	8005ae0 <USBD_CtlError>
        err++;
 80055f4:	7afb      	ldrb	r3, [r7, #11]
 80055f6:	3301      	adds	r3, #1
 80055f8:	72fb      	strb	r3, [r7, #11]
      break;
 80055fa:	e055      	b.n	80056a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800560e:	691b      	ldr	r3, [r3, #16]
 8005610:	687a      	ldr	r2, [r7, #4]
 8005612:	7c12      	ldrb	r2, [r2, #16]
 8005614:	f107 0108 	add.w	r1, r7, #8
 8005618:	4610      	mov	r0, r2
 800561a:	4798      	blx	r3
 800561c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800561e:	e043      	b.n	80056a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005620:	6839      	ldr	r1, [r7, #0]
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 fa5c 	bl	8005ae0 <USBD_CtlError>
        err++;
 8005628:	7afb      	ldrb	r3, [r7, #11]
 800562a:	3301      	adds	r3, #1
 800562c:	72fb      	strb	r3, [r7, #11]
      break;
 800562e:	e03b      	b.n	80056a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005636:	695b      	ldr	r3, [r3, #20]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	7c12      	ldrb	r2, [r2, #16]
 8005648:	f107 0108 	add.w	r1, r7, #8
 800564c:	4610      	mov	r0, r2
 800564e:	4798      	blx	r3
 8005650:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005652:	e029      	b.n	80056a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005654:	6839      	ldr	r1, [r7, #0]
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa42 	bl	8005ae0 <USBD_CtlError>
        err++;
 800565c:	7afb      	ldrb	r3, [r7, #11]
 800565e:	3301      	adds	r3, #1
 8005660:	72fb      	strb	r3, [r7, #11]
      break;
 8005662:	e021      	b.n	80056a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00b      	beq.n	8005688 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	7c12      	ldrb	r2, [r2, #16]
 800567c:	f107 0108 	add.w	r1, r7, #8
 8005680:	4610      	mov	r0, r2
 8005682:	4798      	blx	r3
 8005684:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005686:	e00f      	b.n	80056a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fa28 	bl	8005ae0 <USBD_CtlError>
        err++;
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	3301      	adds	r3, #1
 8005694:	72fb      	strb	r3, [r7, #11]
      break;
 8005696:	e007      	b.n	80056a8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005698:	6839      	ldr	r1, [r7, #0]
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 fa20 	bl	8005ae0 <USBD_CtlError>
      err++;
 80056a0:	7afb      	ldrb	r3, [r7, #11]
 80056a2:	3301      	adds	r3, #1
 80056a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80056a6:	bf00      	nop
    }
    break;
 80056a8:	e037      	b.n	800571a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7c1b      	ldrb	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ba:	f107 0208 	add.w	r2, r7, #8
 80056be:	4610      	mov	r0, r2
 80056c0:	4798      	blx	r3
 80056c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80056c4:	e029      	b.n	800571a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80056c6:	6839      	ldr	r1, [r7, #0]
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fa09 	bl	8005ae0 <USBD_CtlError>
      err++;
 80056ce:	7afb      	ldrb	r3, [r7, #11]
 80056d0:	3301      	adds	r3, #1
 80056d2:	72fb      	strb	r3, [r7, #11]
    break;
 80056d4:	e021      	b.n	800571a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	7c1b      	ldrb	r3, [r3, #16]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10d      	bne.n	80056fa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e6:	f107 0208 	add.w	r2, r7, #8
 80056ea:	4610      	mov	r0, r2
 80056ec:	4798      	blx	r3
 80056ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3301      	adds	r3, #1
 80056f4:	2207      	movs	r2, #7
 80056f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80056f8:	e00f      	b.n	800571a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80056fa:	6839      	ldr	r1, [r7, #0]
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f9ef 	bl	8005ae0 <USBD_CtlError>
      err++;
 8005702:	7afb      	ldrb	r3, [r7, #11]
 8005704:	3301      	adds	r3, #1
 8005706:	72fb      	strb	r3, [r7, #11]
    break;
 8005708:	e007      	b.n	800571a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800570a:	6839      	ldr	r1, [r7, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 f9e7 	bl	8005ae0 <USBD_CtlError>
    err++;
 8005712:	7afb      	ldrb	r3, [r7, #11]
 8005714:	3301      	adds	r3, #1
 8005716:	72fb      	strb	r3, [r7, #11]
    break;
 8005718:	bf00      	nop
  }

  if (err != 0U)
 800571a:	7afb      	ldrb	r3, [r7, #11]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d11e      	bne.n	800575e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	88db      	ldrh	r3, [r3, #6]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d016      	beq.n	8005756 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00e      	beq.n	800574c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	88da      	ldrh	r2, [r3, #6]
 8005732:	893b      	ldrh	r3, [r7, #8]
 8005734:	4293      	cmp	r3, r2
 8005736:	bf28      	it	cs
 8005738:	4613      	movcs	r3, r2
 800573a:	b29b      	uxth	r3, r3
 800573c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800573e:	893b      	ldrh	r3, [r7, #8]
 8005740:	461a      	mov	r2, r3
 8005742:	68f9      	ldr	r1, [r7, #12]
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fa3c 	bl	8005bc2 <USBD_CtlSendData>
 800574a:	e009      	b.n	8005760 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f9c6 	bl	8005ae0 <USBD_CtlError>
 8005754:	e004      	b.n	8005760 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 fa8d 	bl	8005c76 <USBD_CtlSendStatus>
 800575c:	e000      	b.n	8005760 <USBD_GetDescriptor+0x2cc>
    return;
 800575e:	bf00      	nop
    }
  }
}
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop

08005768 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	889b      	ldrh	r3, [r3, #4]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d130      	bne.n	80057dc <USBD_SetAddress+0x74>
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	88db      	ldrh	r3, [r3, #6]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d12c      	bne.n	80057dc <USBD_SetAddress+0x74>
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	885b      	ldrh	r3, [r3, #2]
 8005786:	2b7f      	cmp	r3, #127	; 0x7f
 8005788:	d828      	bhi.n	80057dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	885b      	ldrh	r3, [r3, #2]
 800578e:	b2db      	uxtb	r3, r3
 8005790:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005794:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579c:	2b03      	cmp	r3, #3
 800579e:	d104      	bne.n	80057aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80057a0:	6839      	ldr	r1, [r7, #0]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f99c 	bl	8005ae0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a8:	e01c      	b.n	80057e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80057b2:	7bfb      	ldrb	r3, [r7, #15]
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 febe 	bl	8006538 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 fa5a 	bl	8005c76 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d004      	beq.n	80057d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2202      	movs	r2, #2
 80057cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057d0:	e008      	b.n	80057e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057da:	e003      	b.n	80057e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f97e 	bl	8005ae0 <USBD_CtlError>
  }
}
 80057e4:	bf00      	nop
 80057e6:	3710      	adds	r7, #16
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b084      	sub	sp, #16
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80057f6:	2300      	movs	r3, #0
 80057f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	885b      	ldrh	r3, [r3, #2]
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	4b4b      	ldr	r3, [pc, #300]	; (8005930 <USBD_SetConfig+0x144>)
 8005802:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005804:	4b4a      	ldr	r3, [pc, #296]	; (8005930 <USBD_SetConfig+0x144>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d905      	bls.n	8005818 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800580c:	6839      	ldr	r1, [r7, #0]
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 f966 	bl	8005ae0 <USBD_CtlError>
    return USBD_FAIL;
 8005814:	2303      	movs	r3, #3
 8005816:	e087      	b.n	8005928 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800581e:	2b02      	cmp	r3, #2
 8005820:	d002      	beq.n	8005828 <USBD_SetConfig+0x3c>
 8005822:	2b03      	cmp	r3, #3
 8005824:	d025      	beq.n	8005872 <USBD_SetConfig+0x86>
 8005826:	e071      	b.n	800590c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005828:	4b41      	ldr	r3, [pc, #260]	; (8005930 <USBD_SetConfig+0x144>)
 800582a:	781b      	ldrb	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d01c      	beq.n	800586a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005830:	4b3f      	ldr	r3, [pc, #252]	; (8005930 <USBD_SetConfig+0x144>)
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800583a:	4b3d      	ldr	r3, [pc, #244]	; (8005930 <USBD_SetConfig+0x144>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff f9a7 	bl	8004b94 <USBD_SetClassConfig>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005850:	6839      	ldr	r1, [r7, #0]
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f000 f944 	bl	8005ae0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005858:	e065      	b.n	8005926 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f000 fa0b 	bl	8005c76 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2203      	movs	r2, #3
 8005864:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005868:	e05d      	b.n	8005926 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f000 fa03 	bl	8005c76 <USBD_CtlSendStatus>
    break;
 8005870:	e059      	b.n	8005926 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005872:	4b2f      	ldr	r3, [pc, #188]	; (8005930 <USBD_SetConfig+0x144>)
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d112      	bne.n	80058a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005882:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <USBD_SetConfig+0x144>)
 8005884:	781b      	ldrb	r3, [r3, #0]
 8005886:	461a      	mov	r2, r3
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800588c:	4b28      	ldr	r3, [pc, #160]	; (8005930 <USBD_SetConfig+0x144>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	4619      	mov	r1, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7ff f99a 	bl	8004bcc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f9ec 	bl	8005c76 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800589e:	e042      	b.n	8005926 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80058a0:	4b23      	ldr	r3, [pc, #140]	; (8005930 <USBD_SetConfig+0x144>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	461a      	mov	r2, r3
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d02a      	beq.n	8005904 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff f988 	bl	8004bcc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80058bc:	4b1c      	ldr	r3, [pc, #112]	; (8005930 <USBD_SetConfig+0x144>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80058c6:	4b1a      	ldr	r3, [pc, #104]	; (8005930 <USBD_SetConfig+0x144>)
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	4619      	mov	r1, r3
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff f961 	bl	8004b94 <USBD_SetClassConfig>
 80058d2:	4603      	mov	r3, r0
 80058d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80058d6:	7bfb      	ldrb	r3, [r7, #15]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00f      	beq.n	80058fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80058dc:	6839      	ldr	r1, [r7, #0]
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f8fe 	bl	8005ae0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	b2db      	uxtb	r3, r3
 80058ea:	4619      	mov	r1, r3
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff f96d 	bl	8004bcc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80058fa:	e014      	b.n	8005926 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f9ba 	bl	8005c76 <USBD_CtlSendStatus>
    break;
 8005902:	e010      	b.n	8005926 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f9b6 	bl	8005c76 <USBD_CtlSendStatus>
    break;
 800590a:	e00c      	b.n	8005926 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800590c:	6839      	ldr	r1, [r7, #0]
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f8e6 	bl	8005ae0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005914:	4b06      	ldr	r3, [pc, #24]	; (8005930 <USBD_SetConfig+0x144>)
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	4619      	mov	r1, r3
 800591a:	6878      	ldr	r0, [r7, #4]
 800591c:	f7ff f956 	bl	8004bcc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005920:	2303      	movs	r3, #3
 8005922:	73fb      	strb	r3, [r7, #15]
    break;
 8005924:	bf00      	nop
  }

  return ret;
 8005926:	7bfb      	ldrb	r3, [r7, #15]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3710      	adds	r7, #16
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	20000204 	.word	0x20000204

08005934 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	88db      	ldrh	r3, [r3, #6]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d004      	beq.n	8005950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f8c9 	bl	8005ae0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800594e:	e021      	b.n	8005994 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005956:	2b01      	cmp	r3, #1
 8005958:	db17      	blt.n	800598a <USBD_GetConfig+0x56>
 800595a:	2b02      	cmp	r3, #2
 800595c:	dd02      	ble.n	8005964 <USBD_GetConfig+0x30>
 800595e:	2b03      	cmp	r3, #3
 8005960:	d00b      	beq.n	800597a <USBD_GetConfig+0x46>
 8005962:	e012      	b.n	800598a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	3308      	adds	r3, #8
 800596e:	2201      	movs	r2, #1
 8005970:	4619      	mov	r1, r3
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f925 	bl	8005bc2 <USBD_CtlSendData>
      break;
 8005978:	e00c      	b.n	8005994 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	3304      	adds	r3, #4
 800597e:	2201      	movs	r2, #1
 8005980:	4619      	mov	r1, r3
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f91d 	bl	8005bc2 <USBD_CtlSendData>
      break;
 8005988:	e004      	b.n	8005994 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f8a7 	bl	8005ae0 <USBD_CtlError>
      break;
 8005992:	bf00      	nop
}
 8005994:	bf00      	nop
 8005996:	3708      	adds	r7, #8
 8005998:	46bd      	mov	sp, r7
 800599a:	bd80      	pop	{r7, pc}

0800599c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059ac:	3b01      	subs	r3, #1
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d81e      	bhi.n	80059f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	88db      	ldrh	r3, [r3, #6]
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d004      	beq.n	80059c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80059ba:	6839      	ldr	r1, [r7, #0]
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f000 f88f 	bl	8005ae0 <USBD_CtlError>
      break;
 80059c2:	e01a      	b.n	80059fa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d005      	beq.n	80059e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f043 0202 	orr.w	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	330c      	adds	r3, #12
 80059e4:	2202      	movs	r2, #2
 80059e6:	4619      	mov	r1, r3
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f000 f8ea 	bl	8005bc2 <USBD_CtlSendData>
    break;
 80059ee:	e004      	b.n	80059fa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80059f0:	6839      	ldr	r1, [r7, #0]
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 f874 	bl	8005ae0 <USBD_CtlError>
    break;
 80059f8:	bf00      	nop
  }
}
 80059fa:	bf00      	nop
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	885b      	ldrh	r3, [r3, #2]
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d106      	bne.n	8005a22 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f92a 	bl	8005c76 <USBD_CtlSendStatus>
  }
}
 8005a22:	bf00      	nop
 8005a24:	3708      	adds	r7, #8
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b082      	sub	sp, #8
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
 8005a32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d80b      	bhi.n	8005a58 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	885b      	ldrh	r3, [r3, #2]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d10c      	bne.n	8005a62 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f910 	bl	8005c76 <USBD_CtlSendStatus>
      }
      break;
 8005a56:	e004      	b.n	8005a62 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f840 	bl	8005ae0 <USBD_CtlError>
      break;
 8005a60:	e000      	b.n	8005a64 <USBD_ClrFeature+0x3a>
      break;
 8005a62:	bf00      	nop
  }
}
 8005a64:	bf00      	nop
 8005a66:	3708      	adds	r7, #8
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b084      	sub	sp, #16
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	781a      	ldrb	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	3301      	adds	r3, #1
 8005a86:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	781a      	ldrb	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	3301      	adds	r3, #1
 8005a94:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	f7ff fad3 	bl	8005042 <SWAPBYTE>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3301      	adds	r3, #1
 8005aa8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fac6 	bl	8005042 <SWAPBYTE>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	461a      	mov	r2, r3
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	3301      	adds	r3, #1
 8005ac2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff fab9 	bl	8005042 <SWAPBYTE>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	80da      	strh	r2, [r3, #6]
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b082      	sub	sp, #8
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005aea:	2180      	movs	r1, #128	; 0x80
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fcb9 	bl	8006464 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005af2:	2100      	movs	r1, #0
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fcb5 	bl	8006464 <USBD_LL_StallEP>
}
 8005afa:	bf00      	nop
 8005afc:	3708      	adds	r7, #8
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	60f8      	str	r0, [r7, #12]
 8005b0a:	60b9      	str	r1, [r7, #8]
 8005b0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d036      	beq.n	8005b86 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005b1c:	6938      	ldr	r0, [r7, #16]
 8005b1e:	f000 f836 	bl	8005b8e <USBD_GetLen>
 8005b22:	4603      	mov	r3, r0
 8005b24:	3301      	adds	r3, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	005b      	lsls	r3, r3, #1
 8005b2a:	b29a      	uxth	r2, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005b30:	7dfb      	ldrb	r3, [r7, #23]
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	4413      	add	r3, r2
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	7812      	ldrb	r2, [r2, #0]
 8005b3a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b3c:	7dfb      	ldrb	r3, [r7, #23]
 8005b3e:	3301      	adds	r3, #1
 8005b40:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005b42:	7dfb      	ldrb	r3, [r7, #23]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	4413      	add	r3, r2
 8005b48:	2203      	movs	r2, #3
 8005b4a:	701a      	strb	r2, [r3, #0]
  idx++;
 8005b4c:	7dfb      	ldrb	r3, [r7, #23]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005b52:	e013      	b.n	8005b7c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005b54:	7dfb      	ldrb	r3, [r7, #23]
 8005b56:	68ba      	ldr	r2, [r7, #8]
 8005b58:	4413      	add	r3, r2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	7812      	ldrb	r2, [r2, #0]
 8005b5e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3301      	adds	r3, #1
 8005b64:	613b      	str	r3, [r7, #16]
    idx++;
 8005b66:	7dfb      	ldrb	r3, [r7, #23]
 8005b68:	3301      	adds	r3, #1
 8005b6a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005b6c:	7dfb      	ldrb	r3, [r7, #23]
 8005b6e:	68ba      	ldr	r2, [r7, #8]
 8005b70:	4413      	add	r3, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	701a      	strb	r2, [r3, #0]
    idx++;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e7      	bne.n	8005b54 <USBD_GetString+0x52>
 8005b84:	e000      	b.n	8005b88 <USBD_GetString+0x86>
    return;
 8005b86:	bf00      	nop
  }
}
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005b9e:	e005      	b.n	8005bac <USBD_GetLen+0x1e>
  {
    len++;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d1f5      	bne.n	8005ba0 <USBD_GetLen+0x12>
  }

  return len;
 8005bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b084      	sub	sp, #16
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	60f8      	str	r0, [r7, #12]
 8005bca:	60b9      	str	r1, [r7, #8]
 8005bcc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2202      	movs	r2, #2
 8005bd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	2100      	movs	r1, #0
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f000 fcc4 	bl	8006576 <USBD_LL_Transmit>

  return USBD_OK;
 8005bee:	2300      	movs	r3, #0
}
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	2100      	movs	r1, #0
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fcb3 	bl	8006576 <USBD_LL_Transmit>

  return USBD_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2203      	movs	r2, #3
 8005c2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	687a      	ldr	r2, [r7, #4]
 8005c32:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	68ba      	ldr	r2, [r7, #8]
 8005c42:	2100      	movs	r1, #0
 8005c44:	68f8      	ldr	r0, [r7, #12]
 8005c46:	f000 fcb7 	bl	80065b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	68ba      	ldr	r2, [r7, #8]
 8005c64:	2100      	movs	r1, #0
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f000 fca6 	bl	80065b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c86:	2300      	movs	r3, #0
 8005c88:	2200      	movs	r2, #0
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fc72 	bl	8006576 <USBD_LL_Transmit>

  return USBD_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}

08005c9c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2205      	movs	r2, #5
 8005ca8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005cac:	2300      	movs	r3, #0
 8005cae:	2200      	movs	r2, #0
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fc80 	bl	80065b8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	4912      	ldr	r1, [pc, #72]	; (8005d14 <MX_USB_DEVICE_Init+0x50>)
 8005ccc:	4812      	ldr	r0, [pc, #72]	; (8005d18 <MX_USB_DEVICE_Init+0x54>)
 8005cce:	f7fe fef3 	bl	8004ab8 <USBD_Init>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005cd8:	f7fa fcde 	bl	8000698 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005cdc:	490f      	ldr	r1, [pc, #60]	; (8005d1c <MX_USB_DEVICE_Init+0x58>)
 8005cde:	480e      	ldr	r0, [pc, #56]	; (8005d18 <MX_USB_DEVICE_Init+0x54>)
 8005ce0:	f7fe ff20 	bl	8004b24 <USBD_RegisterClass>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005cea:	f7fa fcd5 	bl	8000698 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005cee:	490c      	ldr	r1, [pc, #48]	; (8005d20 <MX_USB_DEVICE_Init+0x5c>)
 8005cf0:	4809      	ldr	r0, [pc, #36]	; (8005d18 <MX_USB_DEVICE_Init+0x54>)
 8005cf2:	f7fe fe75 	bl	80049e0 <USBD_CDC_RegisterInterface>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005cfc:	f7fa fccc 	bl	8000698 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005d00:	4805      	ldr	r0, [pc, #20]	; (8005d18 <MX_USB_DEVICE_Init+0x54>)
 8005d02:	f7fe ff30 	bl	8004b66 <USBD_Start>
 8005d06:	4603      	mov	r3, r0
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005d0c:	f7fa fcc4 	bl	8000698 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005d10:	bf00      	nop
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000130 	.word	0x20000130
 8005d18:	20000254 	.word	0x20000254
 8005d1c:	20000018 	.word	0x20000018
 8005d20:	2000011c 	.word	0x2000011c

08005d24 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d28:	2200      	movs	r2, #0
 8005d2a:	4905      	ldr	r1, [pc, #20]	; (8005d40 <CDC_Init_FS+0x1c>)
 8005d2c:	4805      	ldr	r0, [pc, #20]	; (8005d44 <CDC_Init_FS+0x20>)
 8005d2e:	f7fe fe6c 	bl	8004a0a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d32:	4905      	ldr	r1, [pc, #20]	; (8005d48 <CDC_Init_FS+0x24>)
 8005d34:	4803      	ldr	r0, [pc, #12]	; (8005d44 <CDC_Init_FS+0x20>)
 8005d36:	f7fe fe81 	bl	8004a3c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005d3a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	bd80      	pop	{r7, pc}
 8005d40:	20000d24 	.word	0x20000d24
 8005d44:	20000254 	.word	0x20000254
 8005d48:	20000524 	.word	0x20000524

08005d4c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005d50:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	4603      	mov	r3, r0
 8005d64:	6039      	str	r1, [r7, #0]
 8005d66:	71fb      	strb	r3, [r7, #7]
 8005d68:	4613      	mov	r3, r2
 8005d6a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005d6c:	79fb      	ldrb	r3, [r7, #7]
 8005d6e:	2b23      	cmp	r3, #35	; 0x23
 8005d70:	d84a      	bhi.n	8005e08 <CDC_Control_FS+0xac>
 8005d72:	a201      	add	r2, pc, #4	; (adr r2, 8005d78 <CDC_Control_FS+0x1c>)
 8005d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d78:	08005e09 	.word	0x08005e09
 8005d7c:	08005e09 	.word	0x08005e09
 8005d80:	08005e09 	.word	0x08005e09
 8005d84:	08005e09 	.word	0x08005e09
 8005d88:	08005e09 	.word	0x08005e09
 8005d8c:	08005e09 	.word	0x08005e09
 8005d90:	08005e09 	.word	0x08005e09
 8005d94:	08005e09 	.word	0x08005e09
 8005d98:	08005e09 	.word	0x08005e09
 8005d9c:	08005e09 	.word	0x08005e09
 8005da0:	08005e09 	.word	0x08005e09
 8005da4:	08005e09 	.word	0x08005e09
 8005da8:	08005e09 	.word	0x08005e09
 8005dac:	08005e09 	.word	0x08005e09
 8005db0:	08005e09 	.word	0x08005e09
 8005db4:	08005e09 	.word	0x08005e09
 8005db8:	08005e09 	.word	0x08005e09
 8005dbc:	08005e09 	.word	0x08005e09
 8005dc0:	08005e09 	.word	0x08005e09
 8005dc4:	08005e09 	.word	0x08005e09
 8005dc8:	08005e09 	.word	0x08005e09
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005e09 	.word	0x08005e09
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e09 	.word	0x08005e09
 8005ddc:	08005e09 	.word	0x08005e09
 8005de0:	08005e09 	.word	0x08005e09
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e09 	.word	0x08005e09
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	08005e09 	.word	0x08005e09
 8005df4:	08005e09 	.word	0x08005e09
 8005df8:	08005e09 	.word	0x08005e09
 8005dfc:	08005e09 	.word	0x08005e09
 8005e00:	08005e09 	.word	0x08005e09
 8005e04:	08005e09 	.word	0x08005e09
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005e08:	bf00      	nop
  }

  return (USBD_OK);
 8005e0a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4805      	ldr	r0, [pc, #20]	; (8005e3c <CDC_Receive_FS+0x24>)
 8005e26:	f7fe fe09 	bl	8004a3c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005e2a:	4804      	ldr	r0, [pc, #16]	; (8005e3c <CDC_Receive_FS+0x24>)
 8005e2c:	f7fe fe1a 	bl	8004a64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005e30:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3708      	adds	r7, #8
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	20000254 	.word	0x20000254

08005e40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b087      	sub	sp, #28
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	371c      	adds	r7, #28
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
	...

08005e64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	6039      	str	r1, [r7, #0]
 8005e6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2212      	movs	r2, #18
 8005e74:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005e76:	4b03      	ldr	r3, [pc, #12]	; (8005e84 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	2000014c 	.word	0x2000014c

08005e88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2204      	movs	r2, #4
 8005e98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005e9a:	4b03      	ldr	r3, [pc, #12]	; (8005ea8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	370c      	adds	r7, #12
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr
 8005ea8:	20000160 	.word	0x20000160

08005eac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	6039      	str	r1, [r7, #0]
 8005eb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005eb8:	79fb      	ldrb	r3, [r7, #7]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d105      	bne.n	8005eca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ec2:	4808      	ldr	r0, [pc, #32]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ec4:	f7ff fe1d 	bl	8005b02 <USBD_GetString>
 8005ec8:	e004      	b.n	8005ed4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005eca:	683a      	ldr	r2, [r7, #0]
 8005ecc:	4904      	ldr	r1, [pc, #16]	; (8005ee0 <USBD_FS_ProductStrDescriptor+0x34>)
 8005ece:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <USBD_FS_ProductStrDescriptor+0x38>)
 8005ed0:	f7ff fe17 	bl	8005b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ed4:	4b02      	ldr	r3, [pc, #8]	; (8005ee0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20001524 	.word	0x20001524
 8005ee4:	08006878 	.word	0x08006878

08005ee8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	4904      	ldr	r1, [pc, #16]	; (8005f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005ef8:	4804      	ldr	r0, [pc, #16]	; (8005f0c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005efa:	f7ff fe02 	bl	8005b02 <USBD_GetString>
  return USBD_StrDesc;
 8005efe:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}
 8005f08:	20001524 	.word	0x20001524
 8005f0c:	08006890 	.word	0x08006890

08005f10 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b082      	sub	sp, #8
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	4603      	mov	r3, r0
 8005f18:	6039      	str	r1, [r7, #0]
 8005f1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	221a      	movs	r2, #26
 8005f20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005f22:	f000 f843 	bl	8005fac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005f26:	4b02      	ldr	r3, [pc, #8]	; (8005f30 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}
 8005f30:	20000164 	.word	0x20000164

08005f34 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	6039      	str	r1, [r7, #0]
 8005f3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d105      	bne.n	8005f52 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f46:	683a      	ldr	r2, [r7, #0]
 8005f48:	4907      	ldr	r1, [pc, #28]	; (8005f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f4a:	4808      	ldr	r0, [pc, #32]	; (8005f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f4c:	f7ff fdd9 	bl	8005b02 <USBD_GetString>
 8005f50:	e004      	b.n	8005f5c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005f52:	683a      	ldr	r2, [r7, #0]
 8005f54:	4904      	ldr	r1, [pc, #16]	; (8005f68 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005f56:	4805      	ldr	r0, [pc, #20]	; (8005f6c <USBD_FS_ConfigStrDescriptor+0x38>)
 8005f58:	f7ff fdd3 	bl	8005b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f5c:	4b02      	ldr	r3, [pc, #8]	; (8005f68 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3708      	adds	r7, #8
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20001524 	.word	0x20001524
 8005f6c:	080068a4 	.word	0x080068a4

08005f70 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	4603      	mov	r3, r0
 8005f78:	6039      	str	r1, [r7, #0]
 8005f7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005f7c:	79fb      	ldrb	r3, [r7, #7]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d105      	bne.n	8005f8e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f82:	683a      	ldr	r2, [r7, #0]
 8005f84:	4907      	ldr	r1, [pc, #28]	; (8005fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f86:	4808      	ldr	r0, [pc, #32]	; (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f88:	f7ff fdbb 	bl	8005b02 <USBD_GetString>
 8005f8c:	e004      	b.n	8005f98 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	4904      	ldr	r1, [pc, #16]	; (8005fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005f92:	4805      	ldr	r0, [pc, #20]	; (8005fa8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005f94:	f7ff fdb5 	bl	8005b02 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005f98:	4b02      	ldr	r3, [pc, #8]	; (8005fa4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3708      	adds	r7, #8
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20001524 	.word	0x20001524
 8005fa8:	080068b0 	.word	0x080068b0

08005fac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005fb2:	4b0f      	ldr	r3, [pc, #60]	; (8005ff0 <Get_SerialNum+0x44>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	; (8005ff4 <Get_SerialNum+0x48>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005fbe:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <Get_SerialNum+0x4c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4413      	add	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d009      	beq.n	8005fe6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005fd2:	2208      	movs	r2, #8
 8005fd4:	4909      	ldr	r1, [pc, #36]	; (8005ffc <Get_SerialNum+0x50>)
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f814 	bl	8006004 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005fdc:	2204      	movs	r2, #4
 8005fde:	4908      	ldr	r1, [pc, #32]	; (8006000 <Get_SerialNum+0x54>)
 8005fe0:	68b8      	ldr	r0, [r7, #8]
 8005fe2:	f000 f80f 	bl	8006004 <IntToUnicode>
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	1fff7a10 	.word	0x1fff7a10
 8005ff4:	1fff7a14 	.word	0x1fff7a14
 8005ff8:	1fff7a18 	.word	0x1fff7a18
 8005ffc:	20000166 	.word	0x20000166
 8006000:	20000176 	.word	0x20000176

08006004 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006004:	b480      	push	{r7}
 8006006:	b087      	sub	sp, #28
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	4613      	mov	r3, r2
 8006010:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006012:	2300      	movs	r3, #0
 8006014:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]
 800601a:	e027      	b.n	800606c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	0f1b      	lsrs	r3, r3, #28
 8006020:	2b09      	cmp	r3, #9
 8006022:	d80b      	bhi.n	800603c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	0f1b      	lsrs	r3, r3, #28
 8006028:	b2da      	uxtb	r2, r3
 800602a:	7dfb      	ldrb	r3, [r7, #23]
 800602c:	005b      	lsls	r3, r3, #1
 800602e:	4619      	mov	r1, r3
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	440b      	add	r3, r1
 8006034:	3230      	adds	r2, #48	; 0x30
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	e00a      	b.n	8006052 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	0f1b      	lsrs	r3, r3, #28
 8006040:	b2da      	uxtb	r2, r3
 8006042:	7dfb      	ldrb	r3, [r7, #23]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4619      	mov	r1, r3
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	440b      	add	r3, r1
 800604c:	3237      	adds	r2, #55	; 0x37
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	011b      	lsls	r3, r3, #4
 8006056:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	3301      	adds	r3, #1
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	4413      	add	r3, r2
 8006062:	2200      	movs	r2, #0
 8006064:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006066:	7dfb      	ldrb	r3, [r7, #23]
 8006068:	3301      	adds	r3, #1
 800606a:	75fb      	strb	r3, [r7, #23]
 800606c:	7dfa      	ldrb	r2, [r7, #23]
 800606e:	79fb      	ldrb	r3, [r7, #7]
 8006070:	429a      	cmp	r2, r3
 8006072:	d3d3      	bcc.n	800601c <IntToUnicode+0x18>
  }
}
 8006074:	bf00      	nop
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006088:	f107 0314 	add.w	r3, r7, #20
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
 8006090:	605a      	str	r2, [r3, #4]
 8006092:	609a      	str	r2, [r3, #8]
 8006094:	60da      	str	r2, [r3, #12]
 8006096:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80060a0:	d13a      	bne.n	8006118 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060a2:	2300      	movs	r3, #0
 80060a4:	613b      	str	r3, [r7, #16]
 80060a6:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	6313      	str	r3, [r2, #48]	; 0x30
 80060b2:	4b1b      	ldr	r3, [pc, #108]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	f003 0301 	and.w	r3, r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
 80060bc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80060be:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80060c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060c4:	2302      	movs	r3, #2
 80060c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060c8:	2300      	movs	r3, #0
 80060ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060cc:	2303      	movs	r3, #3
 80060ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80060d0:	230a      	movs	r3, #10
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060d4:	f107 0314 	add.w	r3, r7, #20
 80060d8:	4619      	mov	r1, r3
 80060da:	4812      	ldr	r0, [pc, #72]	; (8006124 <HAL_PCD_MspInit+0xa4>)
 80060dc:	f7fa fd88 	bl	8000bf0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060e4:	4a0e      	ldr	r2, [pc, #56]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ea:	6353      	str	r3, [r2, #52]	; 0x34
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	4b0b      	ldr	r3, [pc, #44]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f4:	4a0a      	ldr	r2, [pc, #40]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060fa:	6453      	str	r3, [r2, #68]	; 0x44
 80060fc:	4b08      	ldr	r3, [pc, #32]	; (8006120 <HAL_PCD_MspInit+0xa0>)
 80060fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006104:	60fb      	str	r3, [r7, #12]
 8006106:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006108:	2200      	movs	r2, #0
 800610a:	2100      	movs	r1, #0
 800610c:	2043      	movs	r0, #67	; 0x43
 800610e:	f7fa fd38 	bl	8000b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006112:	2043      	movs	r0, #67	; 0x43
 8006114:	f7fa fd51 	bl	8000bba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006118:	bf00      	nop
 800611a:	3728      	adds	r7, #40	; 0x28
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40023800 	.word	0x40023800
 8006124:	40020000 	.word	0x40020000

08006128 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800613c:	4619      	mov	r1, r3
 800613e:	4610      	mov	r0, r2
 8006140:	f7fe fd5c 	bl	8004bfc <USBD_LL_SetupStage>
}
 8006144:	bf00      	nop
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	460b      	mov	r3, r1
 8006156:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800615e:	78fa      	ldrb	r2, [r7, #3]
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	4613      	mov	r3, r2
 8006164:	00db      	lsls	r3, r3, #3
 8006166:	1a9b      	subs	r3, r3, r2
 8006168:	009b      	lsls	r3, r3, #2
 800616a:	440b      	add	r3, r1
 800616c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	78fb      	ldrb	r3, [r7, #3]
 8006174:	4619      	mov	r1, r3
 8006176:	f7fe fd94 	bl	8004ca2 <USBD_LL_DataOutStage>
}
 800617a:	bf00      	nop
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}

08006182 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006182:	b580      	push	{r7, lr}
 8006184:	b082      	sub	sp, #8
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	460b      	mov	r3, r1
 800618c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006194:	78fa      	ldrb	r2, [r7, #3]
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	4613      	mov	r3, r2
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	1a9b      	subs	r3, r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	440b      	add	r3, r1
 80061a2:	3348      	adds	r3, #72	; 0x48
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	4619      	mov	r1, r3
 80061aa:	f7fe fddd 	bl	8004d68 <USBD_LL_DataInStage>
}
 80061ae:	bf00      	nop
 80061b0:	3708      	adds	r7, #8
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}

080061b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fee1 	bl	8004f8c <USBD_LL_SOF>
}
 80061ca:	bf00      	nop
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}

080061d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80061da:	2301      	movs	r3, #1
 80061dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68db      	ldr	r3, [r3, #12]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d102      	bne.n	80061ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80061e6:	2300      	movs	r3, #0
 80061e8:	73fb      	strb	r3, [r7, #15]
 80061ea:	e008      	b.n	80061fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	2b02      	cmp	r3, #2
 80061f2:	d102      	bne.n	80061fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
 80061f8:	e001      	b.n	80061fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80061fa:	f7fa fa4d 	bl	8000698 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006204:	7bfa      	ldrb	r2, [r7, #15]
 8006206:	4611      	mov	r1, r2
 8006208:	4618      	mov	r0, r3
 800620a:	f7fe fe84 	bl	8004f16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006214:	4618      	mov	r0, r3
 8006216:	f7fe fe3d 	bl	8004e94 <USBD_LL_Reset>
}
 800621a:	bf00      	nop
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
	...

08006224 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b082      	sub	sp, #8
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006232:	4618      	mov	r0, r3
 8006234:	f7fe fe7f 	bl	8004f36 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6812      	ldr	r2, [r2, #0]
 8006246:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d005      	beq.n	8006264 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006258:	4b04      	ldr	r3, [pc, #16]	; (800626c <HAL_PCD_SuspendCallback+0x48>)
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	4a03      	ldr	r2, [pc, #12]	; (800626c <HAL_PCD_SuspendCallback+0x48>)
 800625e:	f043 0306 	orr.w	r3, r3, #6
 8006262:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}
 800626c:	e000ed00 	.word	0xe000ed00

08006270 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b082      	sub	sp, #8
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800627e:	4618      	mov	r0, r3
 8006280:	f7fe fe6e 	bl	8004f60 <USBD_LL_Resume>
}
 8006284:	bf00      	nop
 8006286:	3708      	adds	r7, #8
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	460b      	mov	r3, r1
 8006296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800629e:	78fa      	ldrb	r2, [r7, #3]
 80062a0:	4611      	mov	r1, r2
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7fe fe99 	bl	8004fda <USBD_LL_IsoOUTIncomplete>
}
 80062a8:	bf00      	nop
 80062aa:	3708      	adds	r7, #8
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b082      	sub	sp, #8
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	4611      	mov	r1, r2
 80062c6:	4618      	mov	r0, r3
 80062c8:	f7fe fe7a 	bl	8004fc0 <USBD_LL_IsoINIncomplete>
}
 80062cc:	bf00      	nop
 80062ce:	3708      	adds	r7, #8
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7fe fe86 	bl	8004ff4 <USBD_LL_DevConnected>
}
 80062e8:	bf00      	nop
 80062ea:	3708      	adds	r7, #8
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}

080062f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80062fe:	4618      	mov	r0, r3
 8006300:	f7fe fe83 	bl	800500a <USBD_LL_DevDisconnected>
}
 8006304:	bf00      	nop
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d13c      	bne.n	8006396 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800631c:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <USBD_LL_Init+0x94>)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a1e      	ldr	r2, [pc, #120]	; (80063a0 <USBD_LL_Init+0x94>)
 8006328:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800632c:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <USBD_LL_Init+0x94>)
 800632e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006332:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006334:	4b1a      	ldr	r3, [pc, #104]	; (80063a0 <USBD_LL_Init+0x94>)
 8006336:	2204      	movs	r2, #4
 8006338:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800633a:	4b19      	ldr	r3, [pc, #100]	; (80063a0 <USBD_LL_Init+0x94>)
 800633c:	2202      	movs	r2, #2
 800633e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006340:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <USBD_LL_Init+0x94>)
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006346:	4b16      	ldr	r3, [pc, #88]	; (80063a0 <USBD_LL_Init+0x94>)
 8006348:	2202      	movs	r2, #2
 800634a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <USBD_LL_Init+0x94>)
 800634e:	2200      	movs	r2, #0
 8006350:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006352:	4b13      	ldr	r3, [pc, #76]	; (80063a0 <USBD_LL_Init+0x94>)
 8006354:	2200      	movs	r2, #0
 8006356:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006358:	4b11      	ldr	r3, [pc, #68]	; (80063a0 <USBD_LL_Init+0x94>)
 800635a:	2200      	movs	r2, #0
 800635c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800635e:	4b10      	ldr	r3, [pc, #64]	; (80063a0 <USBD_LL_Init+0x94>)
 8006360:	2200      	movs	r2, #0
 8006362:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006364:	4b0e      	ldr	r3, [pc, #56]	; (80063a0 <USBD_LL_Init+0x94>)
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800636a:	480d      	ldr	r0, [pc, #52]	; (80063a0 <USBD_LL_Init+0x94>)
 800636c:	f7fa fdf5 	bl	8000f5a <HAL_PCD_Init>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006376:	f7fa f98f 	bl	8000698 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800637a:	2180      	movs	r1, #128	; 0x80
 800637c:	4808      	ldr	r0, [pc, #32]	; (80063a0 <USBD_LL_Init+0x94>)
 800637e:	f7fb ff52 	bl	8002226 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006382:	2240      	movs	r2, #64	; 0x40
 8006384:	2100      	movs	r1, #0
 8006386:	4806      	ldr	r0, [pc, #24]	; (80063a0 <USBD_LL_Init+0x94>)
 8006388:	f7fb ff06 	bl	8002198 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800638c:	2280      	movs	r2, #128	; 0x80
 800638e:	2101      	movs	r1, #1
 8006390:	4803      	ldr	r0, [pc, #12]	; (80063a0 <USBD_LL_Init+0x94>)
 8006392:	f7fb ff01 	bl	8002198 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	20001724 	.word	0x20001724

080063a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063ac:	2300      	movs	r3, #0
 80063ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063b0:	2300      	movs	r3, #0
 80063b2:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80063ba:	4618      	mov	r0, r3
 80063bc:	f7fa feea 	bl	8001194 <HAL_PCD_Start>
 80063c0:	4603      	mov	r3, r0
 80063c2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 80063c4:	7bfb      	ldrb	r3, [r7, #15]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f92a 	bl	8006620 <USBD_Get_USB_Status>
 80063cc:	4603      	mov	r3, r0
 80063ce:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80063d0:	7bbb      	ldrb	r3, [r7, #14]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	4608      	mov	r0, r1
 80063e4:	4611      	mov	r1, r2
 80063e6:	461a      	mov	r2, r3
 80063e8:	4603      	mov	r3, r0
 80063ea:	70fb      	strb	r3, [r7, #3]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70bb      	strb	r3, [r7, #2]
 80063f0:	4613      	mov	r3, r2
 80063f2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063f4:	2300      	movs	r3, #0
 80063f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063f8:	2300      	movs	r3, #0
 80063fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006402:	78bb      	ldrb	r3, [r7, #2]
 8006404:	883a      	ldrh	r2, [r7, #0]
 8006406:	78f9      	ldrb	r1, [r7, #3]
 8006408:	f7fb face 	bl	80019a8 <HAL_PCD_EP_Open>
 800640c:	4603      	mov	r3, r0
 800640e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	4618      	mov	r0, r3
 8006414:	f000 f904 	bl	8006620 <USBD_Get_USB_Status>
 8006418:	4603      	mov	r3, r0
 800641a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800641c:	7bbb      	ldrb	r3, [r7, #14]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b084      	sub	sp, #16
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
 800642e:	460b      	mov	r3, r1
 8006430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006436:	2300      	movs	r3, #0
 8006438:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006440:	78fa      	ldrb	r2, [r7, #3]
 8006442:	4611      	mov	r1, r2
 8006444:	4618      	mov	r0, r3
 8006446:	f7fb fb17 	bl	8001a78 <HAL_PCD_EP_Close>
 800644a:	4603      	mov	r3, r0
 800644c:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 800644e:	7bfb      	ldrb	r3, [r7, #15]
 8006450:	4618      	mov	r0, r3
 8006452:	f000 f8e5 	bl	8006620 <USBD_Get_USB_Status>
 8006456:	4603      	mov	r3, r0
 8006458:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 800645a:	7bbb      	ldrb	r3, [r7, #14]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	460b      	mov	r3, r1
 800646e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006470:	2300      	movs	r3, #0
 8006472:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800647e:	78fa      	ldrb	r2, [r7, #3]
 8006480:	4611      	mov	r1, r2
 8006482:	4618      	mov	r0, r3
 8006484:	f7fb fbef 	bl	8001c66 <HAL_PCD_EP_SetStall>
 8006488:	4603      	mov	r3, r0
 800648a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800648c:	7bfb      	ldrb	r3, [r7, #15]
 800648e:	4618      	mov	r0, r3
 8006490:	f000 f8c6 	bl	8006620 <USBD_Get_USB_Status>
 8006494:	4603      	mov	r3, r0
 8006496:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8006498:	7bbb      	ldrb	r3, [r7, #14]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b084      	sub	sp, #16
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	4611      	mov	r1, r2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fb fc34 	bl	8001d2e <HAL_PCD_EP_ClrStall>
 80064c6:	4603      	mov	r3, r0
 80064c8:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80064ca:	7bfb      	ldrb	r3, [r7, #15]
 80064cc:	4618      	mov	r0, r3
 80064ce:	f000 f8a7 	bl	8006620 <USBD_Get_USB_Status>
 80064d2:	4603      	mov	r3, r0
 80064d4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80064d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b085      	sub	sp, #20
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	460b      	mov	r3, r1
 80064ea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80064f2:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80064f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	da0b      	bge.n	8006514 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80064fc:	78fb      	ldrb	r3, [r7, #3]
 80064fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006502:	68f9      	ldr	r1, [r7, #12]
 8006504:	4613      	mov	r3, r2
 8006506:	00db      	lsls	r3, r3, #3
 8006508:	1a9b      	subs	r3, r3, r2
 800650a:	009b      	lsls	r3, r3, #2
 800650c:	440b      	add	r3, r1
 800650e:	333e      	adds	r3, #62	; 0x3e
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	e00b      	b.n	800652c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	4613      	mov	r3, r2
 800651e:	00db      	lsls	r3, r3, #3
 8006520:	1a9b      	subs	r3, r3, r2
 8006522:	009b      	lsls	r3, r3, #2
 8006524:	440b      	add	r3, r1
 8006526:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800652a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006548:	2300      	movs	r3, #0
 800654a:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006552:	78fa      	ldrb	r2, [r7, #3]
 8006554:	4611      	mov	r1, r2
 8006556:	4618      	mov	r0, r3
 8006558:	f7fb fa01 	bl	800195e <HAL_PCD_SetAddress>
 800655c:	4603      	mov	r3, r0
 800655e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006560:	7bfb      	ldrb	r3, [r7, #15]
 8006562:	4618      	mov	r0, r3
 8006564:	f000 f85c 	bl	8006620 <USBD_Get_USB_Status>
 8006568:	4603      	mov	r3, r0
 800656a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 800656c:	7bbb      	ldrb	r3, [r7, #14]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	60f8      	str	r0, [r7, #12]
 800657e:	607a      	str	r2, [r7, #4]
 8006580:	603b      	str	r3, [r7, #0]
 8006582:	460b      	mov	r3, r1
 8006584:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006594:	7af9      	ldrb	r1, [r7, #11]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	f7fb fb1a 	bl	8001bd2 <HAL_PCD_EP_Transmit>
 800659e:	4603      	mov	r3, r0
 80065a0:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 80065a2:	7dfb      	ldrb	r3, [r7, #23]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f000 f83b 	bl	8006620 <USBD_Get_USB_Status>
 80065aa:	4603      	mov	r3, r0
 80065ac:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80065ae:	7dbb      	ldrb	r3, [r7, #22]
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	607a      	str	r2, [r7, #4]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	460b      	mov	r3, r1
 80065c6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80065d6:	7af9      	ldrb	r1, [r7, #11]
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	f7fb fa96 	bl	8001b0c <HAL_PCD_EP_Receive>
 80065e0:	4603      	mov	r3, r0
 80065e2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80065e4:	7dfb      	ldrb	r3, [r7, #23]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f81a 	bl	8006620 <USBD_Get_USB_Status>
 80065ec:	4603      	mov	r3, r0
 80065ee:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80065f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b082      	sub	sp, #8
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800660c:	78fa      	ldrb	r2, [r7, #3]
 800660e:	4611      	mov	r1, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f7fb fac6 	bl	8001ba2 <HAL_PCD_EP_GetRxCount>
 8006616:	4603      	mov	r3, r0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3708      	adds	r7, #8
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800662e:	79fb      	ldrb	r3, [r7, #7]
 8006630:	2b03      	cmp	r3, #3
 8006632:	d817      	bhi.n	8006664 <USBD_Get_USB_Status+0x44>
 8006634:	a201      	add	r2, pc, #4	; (adr r2, 800663c <USBD_Get_USB_Status+0x1c>)
 8006636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663a:	bf00      	nop
 800663c:	0800664d 	.word	0x0800664d
 8006640:	08006653 	.word	0x08006653
 8006644:	08006659 	.word	0x08006659
 8006648:	0800665f 	.word	0x0800665f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800664c:	2300      	movs	r3, #0
 800664e:	73fb      	strb	r3, [r7, #15]
    break;
 8006650:	e00b      	b.n	800666a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006652:	2303      	movs	r3, #3
 8006654:	73fb      	strb	r3, [r7, #15]
    break;
 8006656:	e008      	b.n	800666a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006658:	2301      	movs	r3, #1
 800665a:	73fb      	strb	r3, [r7, #15]
    break;
 800665c:	e005      	b.n	800666a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800665e:	2303      	movs	r3, #3
 8006660:	73fb      	strb	r3, [r7, #15]
    break;
 8006662:	e002      	b.n	800666a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006664:	2303      	movs	r3, #3
 8006666:	73fb      	strb	r3, [r7, #15]
    break;
 8006668:	bf00      	nop
  }
  return usb_status;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
}
 800666c:	4618      	mov	r0, r3
 800666e:	3714      	adds	r7, #20
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <__errno>:
 8006678:	4b01      	ldr	r3, [pc, #4]	; (8006680 <__errno+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	20000180 	.word	0x20000180

08006684 <__libc_init_array>:
 8006684:	b570      	push	{r4, r5, r6, lr}
 8006686:	4e0d      	ldr	r6, [pc, #52]	; (80066bc <__libc_init_array+0x38>)
 8006688:	4c0d      	ldr	r4, [pc, #52]	; (80066c0 <__libc_init_array+0x3c>)
 800668a:	1ba4      	subs	r4, r4, r6
 800668c:	10a4      	asrs	r4, r4, #2
 800668e:	2500      	movs	r5, #0
 8006690:	42a5      	cmp	r5, r4
 8006692:	d109      	bne.n	80066a8 <__libc_init_array+0x24>
 8006694:	4e0b      	ldr	r6, [pc, #44]	; (80066c4 <__libc_init_array+0x40>)
 8006696:	4c0c      	ldr	r4, [pc, #48]	; (80066c8 <__libc_init_array+0x44>)
 8006698:	f000 f8e2 	bl	8006860 <_init>
 800669c:	1ba4      	subs	r4, r4, r6
 800669e:	10a4      	asrs	r4, r4, #2
 80066a0:	2500      	movs	r5, #0
 80066a2:	42a5      	cmp	r5, r4
 80066a4:	d105      	bne.n	80066b2 <__libc_init_array+0x2e>
 80066a6:	bd70      	pop	{r4, r5, r6, pc}
 80066a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066ac:	4798      	blx	r3
 80066ae:	3501      	adds	r5, #1
 80066b0:	e7ee      	b.n	8006690 <__libc_init_array+0xc>
 80066b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80066b6:	4798      	blx	r3
 80066b8:	3501      	adds	r5, #1
 80066ba:	e7f2      	b.n	80066a2 <__libc_init_array+0x1e>
 80066bc:	080068c0 	.word	0x080068c0
 80066c0:	080068c0 	.word	0x080068c0
 80066c4:	080068c0 	.word	0x080068c0
 80066c8:	080068c4 	.word	0x080068c4

080066cc <malloc>:
 80066cc:	4b02      	ldr	r3, [pc, #8]	; (80066d8 <malloc+0xc>)
 80066ce:	4601      	mov	r1, r0
 80066d0:	6818      	ldr	r0, [r3, #0]
 80066d2:	f000 b859 	b.w	8006788 <_malloc_r>
 80066d6:	bf00      	nop
 80066d8:	20000180 	.word	0x20000180

080066dc <free>:
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <free+0xc>)
 80066de:	4601      	mov	r1, r0
 80066e0:	6818      	ldr	r0, [r3, #0]
 80066e2:	f000 b803 	b.w	80066ec <_free_r>
 80066e6:	bf00      	nop
 80066e8:	20000180 	.word	0x20000180

080066ec <_free_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4605      	mov	r5, r0
 80066f0:	2900      	cmp	r1, #0
 80066f2:	d045      	beq.n	8006780 <_free_r+0x94>
 80066f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f8:	1f0c      	subs	r4, r1, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfb8      	it	lt
 80066fe:	18e4      	addlt	r4, r4, r3
 8006700:	f000 f8ac 	bl	800685c <__malloc_lock>
 8006704:	4a1f      	ldr	r2, [pc, #124]	; (8006784 <_free_r+0x98>)
 8006706:	6813      	ldr	r3, [r2, #0]
 8006708:	4610      	mov	r0, r2
 800670a:	b933      	cbnz	r3, 800671a <_free_r+0x2e>
 800670c:	6063      	str	r3, [r4, #4]
 800670e:	6014      	str	r4, [r2, #0]
 8006710:	4628      	mov	r0, r5
 8006712:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006716:	f000 b8a2 	b.w	800685e <__malloc_unlock>
 800671a:	42a3      	cmp	r3, r4
 800671c:	d90c      	bls.n	8006738 <_free_r+0x4c>
 800671e:	6821      	ldr	r1, [r4, #0]
 8006720:	1862      	adds	r2, r4, r1
 8006722:	4293      	cmp	r3, r2
 8006724:	bf04      	itt	eq
 8006726:	681a      	ldreq	r2, [r3, #0]
 8006728:	685b      	ldreq	r3, [r3, #4]
 800672a:	6063      	str	r3, [r4, #4]
 800672c:	bf04      	itt	eq
 800672e:	1852      	addeq	r2, r2, r1
 8006730:	6022      	streq	r2, [r4, #0]
 8006732:	6004      	str	r4, [r0, #0]
 8006734:	e7ec      	b.n	8006710 <_free_r+0x24>
 8006736:	4613      	mov	r3, r2
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	b10a      	cbz	r2, 8006740 <_free_r+0x54>
 800673c:	42a2      	cmp	r2, r4
 800673e:	d9fa      	bls.n	8006736 <_free_r+0x4a>
 8006740:	6819      	ldr	r1, [r3, #0]
 8006742:	1858      	adds	r0, r3, r1
 8006744:	42a0      	cmp	r0, r4
 8006746:	d10b      	bne.n	8006760 <_free_r+0x74>
 8006748:	6820      	ldr	r0, [r4, #0]
 800674a:	4401      	add	r1, r0
 800674c:	1858      	adds	r0, r3, r1
 800674e:	4282      	cmp	r2, r0
 8006750:	6019      	str	r1, [r3, #0]
 8006752:	d1dd      	bne.n	8006710 <_free_r+0x24>
 8006754:	6810      	ldr	r0, [r2, #0]
 8006756:	6852      	ldr	r2, [r2, #4]
 8006758:	605a      	str	r2, [r3, #4]
 800675a:	4401      	add	r1, r0
 800675c:	6019      	str	r1, [r3, #0]
 800675e:	e7d7      	b.n	8006710 <_free_r+0x24>
 8006760:	d902      	bls.n	8006768 <_free_r+0x7c>
 8006762:	230c      	movs	r3, #12
 8006764:	602b      	str	r3, [r5, #0]
 8006766:	e7d3      	b.n	8006710 <_free_r+0x24>
 8006768:	6820      	ldr	r0, [r4, #0]
 800676a:	1821      	adds	r1, r4, r0
 800676c:	428a      	cmp	r2, r1
 800676e:	bf04      	itt	eq
 8006770:	6811      	ldreq	r1, [r2, #0]
 8006772:	6852      	ldreq	r2, [r2, #4]
 8006774:	6062      	str	r2, [r4, #4]
 8006776:	bf04      	itt	eq
 8006778:	1809      	addeq	r1, r1, r0
 800677a:	6021      	streq	r1, [r4, #0]
 800677c:	605c      	str	r4, [r3, #4]
 800677e:	e7c7      	b.n	8006710 <_free_r+0x24>
 8006780:	bd38      	pop	{r3, r4, r5, pc}
 8006782:	bf00      	nop
 8006784:	20000208 	.word	0x20000208

08006788 <_malloc_r>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	1ccd      	adds	r5, r1, #3
 800678c:	f025 0503 	bic.w	r5, r5, #3
 8006790:	3508      	adds	r5, #8
 8006792:	2d0c      	cmp	r5, #12
 8006794:	bf38      	it	cc
 8006796:	250c      	movcc	r5, #12
 8006798:	2d00      	cmp	r5, #0
 800679a:	4606      	mov	r6, r0
 800679c:	db01      	blt.n	80067a2 <_malloc_r+0x1a>
 800679e:	42a9      	cmp	r1, r5
 80067a0:	d903      	bls.n	80067aa <_malloc_r+0x22>
 80067a2:	230c      	movs	r3, #12
 80067a4:	6033      	str	r3, [r6, #0]
 80067a6:	2000      	movs	r0, #0
 80067a8:	bd70      	pop	{r4, r5, r6, pc}
 80067aa:	f000 f857 	bl	800685c <__malloc_lock>
 80067ae:	4a21      	ldr	r2, [pc, #132]	; (8006834 <_malloc_r+0xac>)
 80067b0:	6814      	ldr	r4, [r2, #0]
 80067b2:	4621      	mov	r1, r4
 80067b4:	b991      	cbnz	r1, 80067dc <_malloc_r+0x54>
 80067b6:	4c20      	ldr	r4, [pc, #128]	; (8006838 <_malloc_r+0xb0>)
 80067b8:	6823      	ldr	r3, [r4, #0]
 80067ba:	b91b      	cbnz	r3, 80067c4 <_malloc_r+0x3c>
 80067bc:	4630      	mov	r0, r6
 80067be:	f000 f83d 	bl	800683c <_sbrk_r>
 80067c2:	6020      	str	r0, [r4, #0]
 80067c4:	4629      	mov	r1, r5
 80067c6:	4630      	mov	r0, r6
 80067c8:	f000 f838 	bl	800683c <_sbrk_r>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d124      	bne.n	800681a <_malloc_r+0x92>
 80067d0:	230c      	movs	r3, #12
 80067d2:	6033      	str	r3, [r6, #0]
 80067d4:	4630      	mov	r0, r6
 80067d6:	f000 f842 	bl	800685e <__malloc_unlock>
 80067da:	e7e4      	b.n	80067a6 <_malloc_r+0x1e>
 80067dc:	680b      	ldr	r3, [r1, #0]
 80067de:	1b5b      	subs	r3, r3, r5
 80067e0:	d418      	bmi.n	8006814 <_malloc_r+0x8c>
 80067e2:	2b0b      	cmp	r3, #11
 80067e4:	d90f      	bls.n	8006806 <_malloc_r+0x7e>
 80067e6:	600b      	str	r3, [r1, #0]
 80067e8:	50cd      	str	r5, [r1, r3]
 80067ea:	18cc      	adds	r4, r1, r3
 80067ec:	4630      	mov	r0, r6
 80067ee:	f000 f836 	bl	800685e <__malloc_unlock>
 80067f2:	f104 000b 	add.w	r0, r4, #11
 80067f6:	1d23      	adds	r3, r4, #4
 80067f8:	f020 0007 	bic.w	r0, r0, #7
 80067fc:	1ac3      	subs	r3, r0, r3
 80067fe:	d0d3      	beq.n	80067a8 <_malloc_r+0x20>
 8006800:	425a      	negs	r2, r3
 8006802:	50e2      	str	r2, [r4, r3]
 8006804:	e7d0      	b.n	80067a8 <_malloc_r+0x20>
 8006806:	428c      	cmp	r4, r1
 8006808:	684b      	ldr	r3, [r1, #4]
 800680a:	bf16      	itet	ne
 800680c:	6063      	strne	r3, [r4, #4]
 800680e:	6013      	streq	r3, [r2, #0]
 8006810:	460c      	movne	r4, r1
 8006812:	e7eb      	b.n	80067ec <_malloc_r+0x64>
 8006814:	460c      	mov	r4, r1
 8006816:	6849      	ldr	r1, [r1, #4]
 8006818:	e7cc      	b.n	80067b4 <_malloc_r+0x2c>
 800681a:	1cc4      	adds	r4, r0, #3
 800681c:	f024 0403 	bic.w	r4, r4, #3
 8006820:	42a0      	cmp	r0, r4
 8006822:	d005      	beq.n	8006830 <_malloc_r+0xa8>
 8006824:	1a21      	subs	r1, r4, r0
 8006826:	4630      	mov	r0, r6
 8006828:	f000 f808 	bl	800683c <_sbrk_r>
 800682c:	3001      	adds	r0, #1
 800682e:	d0cf      	beq.n	80067d0 <_malloc_r+0x48>
 8006830:	6025      	str	r5, [r4, #0]
 8006832:	e7db      	b.n	80067ec <_malloc_r+0x64>
 8006834:	20000208 	.word	0x20000208
 8006838:	2000020c 	.word	0x2000020c

0800683c <_sbrk_r>:
 800683c:	b538      	push	{r3, r4, r5, lr}
 800683e:	4c06      	ldr	r4, [pc, #24]	; (8006858 <_sbrk_r+0x1c>)
 8006840:	2300      	movs	r3, #0
 8006842:	4605      	mov	r5, r0
 8006844:	4608      	mov	r0, r1
 8006846:	6023      	str	r3, [r4, #0]
 8006848:	f7f9 ffc0 	bl	80007cc <_sbrk>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d102      	bne.n	8006856 <_sbrk_r+0x1a>
 8006850:	6823      	ldr	r3, [r4, #0]
 8006852:	b103      	cbz	r3, 8006856 <_sbrk_r+0x1a>
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	bd38      	pop	{r3, r4, r5, pc}
 8006858:	20001b2c 	.word	0x20001b2c

0800685c <__malloc_lock>:
 800685c:	4770      	bx	lr

0800685e <__malloc_unlock>:
 800685e:	4770      	bx	lr

08006860 <_init>:
 8006860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006862:	bf00      	nop
 8006864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006866:	bc08      	pop	{r3}
 8006868:	469e      	mov	lr, r3
 800686a:	4770      	bx	lr

0800686c <_fini>:
 800686c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800686e:	bf00      	nop
 8006870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006872:	bc08      	pop	{r3}
 8006874:	469e      	mov	lr, r3
 8006876:	4770      	bx	lr
