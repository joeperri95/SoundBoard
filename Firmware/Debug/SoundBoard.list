
SoundBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006090  08006090  00016090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060d8  080060d8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080060d8  080060d8  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060d8  080060d8  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060d8  080060d8  000160d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060dc  080060dc  000160dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080060e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000190c  200001e4  080062c4  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  080062c4  00021af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136cd  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031a2  00000000  00000000  000338e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d88  00000000  00000000  00036a88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c00  00000000  00000000  00037810  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235c3  00000000  00000000  00038410  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e8fc  00000000  00000000  0005b9d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5961  00000000  00000000  0006a2cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012fc30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003630  00000000  00000000  0012fcac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001e4 	.word	0x200001e4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006078 	.word	0x08006078

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001e8 	.word	0x200001e8
 80001c4:	08006078 	.word	0x08006078

080001c8 <GPIO_init>:

#include "joe-GPIO.h"


	void GPIO_init(uint32_t port)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	if(port == GPIO_PORT_A_BASE)
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a31      	ldr	r2, [pc, #196]	; (8000298 <GPIO_init+0xd0>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d110      	bne.n	80001fa <GPIO_init+0x32>
	{
		*((uint32_t *)(port + GPIO_MODER_OFFSET))   = 0xA8000000; //per manual
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	f04f 4228 	mov.w	r2, #2818572288	; 0xa8000000
 80001de:	601a      	str	r2, [r3, #0]
		*((uint32_t *)(port + GPIO_OSPEEDR_OFFSET)) = 0x0C000000; //per manual
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3308      	adds	r3, #8
 80001e4:	461a      	mov	r2, r3
 80001e6:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 80001ea:	6013      	str	r3, [r2, #0]
		*((uint32_t *)(port + GPIO_PUPDR_OFFSET))   = 0x64000000; //per manual
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	330c      	adds	r3, #12
 80001f0:	461a      	mov	r2, r3
 80001f2:	f04f 43c8 	mov.w	r3, #1677721600	; 0x64000000
 80001f6:	6013      	str	r3, [r2, #0]
 80001f8:	e020      	b.n	800023c <GPIO_init+0x74>

	}
	else if(port == GPIO_PORT_B_BASE)
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	4a27      	ldr	r2, [pc, #156]	; (800029c <GPIO_init+0xd4>)
 80001fe:	4293      	cmp	r3, r2
 8000200:	d10f      	bne.n	8000222 <GPIO_init+0x5a>
	{
		*((uint32_t *)(port + GPIO_MODER_OFFSET)) =   0x00000280; //per manual
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	f44f 7220 	mov.w	r2, #640	; 0x280
 8000208:	601a      	str	r2, [r3, #0]
		*((uint32_t *)(port + GPIO_OSPEEDR_OFFSET)) = 0x000000C0; //per manual
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3308      	adds	r3, #8
 800020e:	461a      	mov	r2, r3
 8000210:	23c0      	movs	r3, #192	; 0xc0
 8000212:	6013      	str	r3, [r2, #0]
		*((uint32_t *)(port + GPIO_PUPDR_OFFSET))   = 0x00000100; //per manual
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	330c      	adds	r3, #12
 8000218:	461a      	mov	r2, r3
 800021a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800021e:	6013      	str	r3, [r2, #0]
 8000220:	e00c      	b.n	800023c <GPIO_init+0x74>
	}
	else
	{
		*((uint32_t *)(port + GPIO_MODER_OFFSET))   = 	0x00000000;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
		*((uint32_t *)(port + GPIO_OSPEEDR_OFFSET)) =   0x00000000;
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	3308      	adds	r3, #8
 800022c:	461a      	mov	r2, r3
 800022e:	2300      	movs	r3, #0
 8000230:	6013      	str	r3, [r2, #0]
		*((uint32_t *)(port + GPIO_PUPDR_OFFSET))   =   0x00000000;
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	330c      	adds	r3, #12
 8000236:	461a      	mov	r2, r3
 8000238:	2300      	movs	r3, #0
 800023a:	6013      	str	r3, [r2, #0]
	}

	*((uint32_t *)(port + GPIO_ODR_OFFSET))   =   0x00000000;
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	3314      	adds	r3, #20
 8000240:	461a      	mov	r2, r3
 8000242:	2300      	movs	r3, #0
 8000244:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_IDR_OFFSET))   =   0x00000000;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	3310      	adds	r3, #16
 800024a:	461a      	mov	r2, r3
 800024c:	2300      	movs	r3, #0
 800024e:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_AFRL_OFFSET))   =   0x00000000;
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3320      	adds	r3, #32
 8000254:	461a      	mov	r2, r3
 8000256:	2300      	movs	r3, #0
 8000258:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_AFRH_OFFSET))   =   0x00000000;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	3324      	adds	r3, #36	; 0x24
 800025e:	461a      	mov	r2, r3
 8000260:	2300      	movs	r3, #0
 8000262:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_LCKR_OFFSET))   =   0x00000000;
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	331c      	adds	r3, #28
 8000268:	461a      	mov	r2, r3
 800026a:	2300      	movs	r3, #0
 800026c:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_BSSR_OFFSET))   =   0x00000000;
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	3318      	adds	r3, #24
 8000272:	461a      	mov	r2, r3
 8000274:	2300      	movs	r3, #0
 8000276:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_PUPDR_OFFSET))   =   0x00000000;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	330c      	adds	r3, #12
 800027c:	461a      	mov	r2, r3
 800027e:	2300      	movs	r3, #0
 8000280:	6013      	str	r3, [r2, #0]
	*((uint32_t *)(port + GPIO_OTYPER_OFFSET))   =   0x00000000;
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3304      	adds	r3, #4
 8000286:	461a      	mov	r2, r3
 8000288:	2300      	movs	r3, #0
 800028a:	6013      	str	r3, [r2, #0]



}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	40020000 	.word	0x40020000
 800029c:	40020400 	.word	0x40020400

080002a0 <GPIO_togglePin>:
	}

}

void GPIO_togglePin(uint32_t port, uint32_t pin)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	6078      	str	r0, [r7, #4]
 80002a8:	6039      	str	r1, [r7, #0]
	*((uint32_t *)(port + GPIO_ODR_OFFSET)) = *((uint32_t *)(port + GPIO_ODR_OFFSET)) ^ pin;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	3314      	adds	r3, #20
 80002ae:	681a      	ldr	r2, [r3, #0]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	3314      	adds	r3, #20
 80002b4:	4619      	mov	r1, r3
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	4053      	eors	r3, r2
 80002ba:	600b      	str	r3, [r1, #0]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr

080002c8 <GPIO_setDataDirection>:

void GPIO_setDataDirection(uint32_t port, uint32_t pin, uint8_t val)
{
 80002c8:	b480      	push	{r7}
 80002ca:	b087      	sub	sp, #28
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	4613      	mov	r3, r2
 80002d4:	71fb      	strb	r3, [r7, #7]
	if(val > 3)
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	2b03      	cmp	r3, #3
 80002da:	d80b      	bhi.n	80002f4 <GPIO_setDataDirection+0x2c>
		return;

	//TODO change this to work with actual pin values
	uint32_t regVal = val << pin;
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	68bb      	ldr	r3, [r7, #8]
 80002e0:	fa02 f303 	lsl.w	r3, r2, r3
 80002e4:	617b      	str	r3, [r7, #20]

	*((uint32_t *)(port + GPIO_MODER_OFFSET)) = *((uint32_t *)(port + GPIO_MODER_OFFSET)) | regVal;
 80002e6:	68fb      	ldr	r3, [r7, #12]
 80002e8:	6819      	ldr	r1, [r3, #0]
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	697a      	ldr	r2, [r7, #20]
 80002ee:	430a      	orrs	r2, r1
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	e000      	b.n	80002f6 <GPIO_setDataDirection+0x2e>
		return;
 80002f4:	bf00      	nop
}
 80002f6:	371c      	adds	r7, #28
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <LL_RCC_HSE_Enable+0x1c>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <LL_RCC_HSE_Enable+0x1c>)
 800030a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800

08000320 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000324:	4b07      	ldr	r3, [pc, #28]	; (8000344 <LL_RCC_HSE_IsReady+0x24>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800032c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000330:	bf0c      	ite	eq
 8000332:	2301      	moveq	r3, #1
 8000334:	2300      	movne	r3, #0
 8000336:	b2db      	uxtb	r3, r3
}
 8000338:	4618      	mov	r0, r3
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40023800 	.word	0x40023800

08000348 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <LL_RCC_SetSysClkSource+0x24>)
 8000352:	689b      	ldr	r3, [r3, #8]
 8000354:	f023 0203 	bic.w	r2, r3, #3
 8000358:	4904      	ldr	r1, [pc, #16]	; (800036c <LL_RCC_SetSysClkSource+0x24>)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4313      	orrs	r3, r2
 800035e:	608b      	str	r3, [r1, #8]
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40023800 	.word	0x40023800

08000370 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000370:	b480      	push	{r7}
 8000372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000374:	4b04      	ldr	r3, [pc, #16]	; (8000388 <LL_RCC_GetSysClkSource+0x18>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	f003 030c 	and.w	r3, r3, #12
}
 800037c:	4618      	mov	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	40023800 	.word	0x40023800

0800038c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800039c:	4904      	ldr	r1, [pc, #16]	; (80003b0 <LL_RCC_SetAHBPrescaler+0x24>)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4313      	orrs	r3, r2
 80003a2:	608b      	str	r3, [r1, #8]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr
 80003b0:	40023800 	.word	0x40023800

080003b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80003c4:	4904      	ldr	r1, [pc, #16]	; (80003d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	608b      	str	r3, [r1, #8]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr
 80003d8:	40023800 	.word	0x40023800

080003dc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003e4:	4b06      	ldr	r3, [pc, #24]	; (8000400 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003e6:	689b      	ldr	r3, [r3, #8]
 80003e8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80003ec:	4904      	ldr	r1, [pc, #16]	; (8000400 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4313      	orrs	r3, r2
 80003f2:	608b      	str	r3, [r1, #8]
}
 80003f4:	bf00      	nop
 80003f6:	370c      	adds	r7, #12
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	40023800 	.word	0x40023800

08000404 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000408:	4b05      	ldr	r3, [pc, #20]	; (8000420 <LL_RCC_PLL_Enable+0x1c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	4a04      	ldr	r2, [pc, #16]	; (8000420 <LL_RCC_PLL_Enable+0x1c>)
 800040e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	40023800 	.word	0x40023800

08000424 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <LL_RCC_PLL_IsReady+0x24>)
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000430:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000434:	bf0c      	ite	eq
 8000436:	2301      	moveq	r3, #1
 8000438:	2300      	movne	r3, #0
 800043a:	b2db      	uxtb	r3, r3
}
 800043c:	4618      	mov	r0, r3
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40023800 	.word	0x40023800

0800044c <LL_RCC_PLL_ConfigDomain_48M>:
  *         @arg @ref LL_RCC_PLLQ_DIV_14
  *         @arg @ref LL_RCC_PLLQ_DIV_15
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_48M(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLQ)
{
 800044c:	b480      	push	{r7}
 800044e:	b085      	sub	sp, #20
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
 8000458:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLQ,
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 800045c:	685a      	ldr	r2, [r3, #4]
 800045e:	4b0a      	ldr	r3, [pc, #40]	; (8000488 <LL_RCC_PLL_ConfigDomain_48M+0x3c>)
 8000460:	4013      	ands	r3, r2
 8000462:	68f9      	ldr	r1, [r7, #12]
 8000464:	68ba      	ldr	r2, [r7, #8]
 8000466:	4311      	orrs	r1, r2
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	0192      	lsls	r2, r2, #6
 800046c:	4311      	orrs	r1, r2
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	430a      	orrs	r2, r1
 8000472:	4904      	ldr	r1, [pc, #16]	; (8000484 <LL_RCC_PLL_ConfigDomain_48M+0x38>)
 8000474:	4313      	orrs	r3, r2
 8000476:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos | PLLQ);
}
 8000478:	bf00      	nop
 800047a:	3714      	adds	r7, #20
 800047c:	46bd      	mov	sp, r7
 800047e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000482:	4770      	bx	lr
 8000484:	40023800 	.word	0x40023800
 8000488:	f0bf8000 	.word	0xf0bf8000

0800048c <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000498:	4907      	ldr	r1, [pc, #28]	; (80004b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4313      	orrs	r3, r2
 800049e:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80004a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	4013      	ands	r3, r2
 80004a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004aa:	68fb      	ldr	r3, [r7, #12]
}
 80004ac:	bf00      	nop
 80004ae:	3714      	adds	r7, #20
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr
 80004b8:	40023800 	.word	0x40023800

080004bc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004bc:	b480      	push	{r7}
 80004be:	b085      	sub	sp, #20
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80004c4:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004c8:	4907      	ldr	r1, [pc, #28]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4313      	orrs	r3, r2
 80004ce:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80004d0:	4b05      	ldr	r3, [pc, #20]	; (80004e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80004d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	4013      	ands	r3, r2
 80004d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004da:	68fb      	ldr	r3, [r7, #12]
}
 80004dc:	bf00      	nop
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40023800 	.word	0x40023800

080004ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_FLASH_SetLatency+0x24>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	f023 020f 	bic.w	r2, r3, #15
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <LL_FLASH_SetLatency+0x24>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	600b      	str	r3, [r1, #0]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40023c00 	.word	0x40023c00

08000514 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_FLASH_GetLatency+0x18>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	f003 030f 	and.w	r3, r3, #15
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	600b      	str	r3, [r1, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40007000 	.word	0x40007000

08000558 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000562:	683b      	ldr	r3, [r7, #0]
 8000564:	041a      	lsls	r2, r3, #16
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	619a      	str	r2, [r3, #24]
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr
	...

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 f9f6 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f826 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  GPIO_init(GPIO_PORT_A_BASE);
 8000584:	4810      	ldr	r0, [pc, #64]	; (80005c8 <main+0x50>)
 8000586:	f7ff fe1f 	bl	80001c8 <GPIO_init>
  GPIO_init(GPIO_PORT_B_BASE);
 800058a:	4810      	ldr	r0, [pc, #64]	; (80005cc <main+0x54>)
 800058c:	f7ff fe1c 	bl	80001c8 <GPIO_init>


  GPIO_setDataDirection(GPIO_PORT_A_BASE, 9, GPIO_MODE_OUTPUT);
 8000590:	2201      	movs	r2, #1
 8000592:	2109      	movs	r1, #9
 8000594:	480c      	ldr	r0, [pc, #48]	; (80005c8 <main+0x50>)
 8000596:	f7ff fe97 	bl	80002c8 <GPIO_setDataDirection>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800059a:	2001      	movs	r0, #1
 800059c:	f7ff ff76 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  LL_GPIO_ResetOutputPin(GPIOA, SPI_SCK_Pin|SPI_MOSI_Pin|LED_2_Pin|LED_1_Pin);
 80005a0:	f44f 7158 	mov.w	r1, #864	; 0x360
 80005a4:	4808      	ldr	r0, [pc, #32]	; (80005c8 <main+0x50>)
 80005a6:	f7ff ffd7 	bl	8000558 <LL_GPIO_ResetOutputPin>

  MX_GPIO_Init();
 80005aa:	f000 f897 	bl	80006dc <MX_GPIO_Init>
  MX_DAC_Init();
 80005ae:	f000 f859 	bl	8000664 <MX_DAC_Init>
  MX_USB_DEVICE_Init();
 80005b2:	f004 ff93 	bl	80054dc <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  //HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);

	  GPIO_togglePin(GPIO_PORT_A_BASE, GPIO_PIN_9);
 80005b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <main+0x50>)
 80005bc:	f7ff fe70 	bl	80002a0 <GPIO_togglePin>
	  HAL_Delay(200);
 80005c0:	20c8      	movs	r0, #200	; 0xc8
 80005c2:	f000 fa45 	bl	8000a50 <HAL_Delay>
	  GPIO_togglePin(GPIO_PORT_A_BASE, GPIO_PIN_9);
 80005c6:	e7f6      	b.n	80005b6 <main+0x3e>
 80005c8:	40020000 	.word	0x40020000
 80005cc:	40020400 	.word	0x40020400

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005d4:	2000      	movs	r0, #0
 80005d6:	f7ff ff89 	bl	80004ec <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 80005da:	f7ff ff9b 	bl	8000514 <LL_FLASH_GetLatency>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 80005e4:	f000 f8ee 	bl	80007c4 <Error_Handler>
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80005e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ec:	f7ff ffa0 	bl	8000530 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSE_Enable();
 80005f0:	f7ff fe86 	bl	8000300 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 80005f4:	bf00      	nop
 80005f6:	f7ff fe93 	bl	8000320 <LL_RCC_HSE_IsReady>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d1fa      	bne.n	80005f6 <SystemClock_Config+0x26>
  {
    
  }
  LL_RCC_PLL_ConfigDomain_48M(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_15, 144, LL_RCC_PLLQ_DIV_5);
 8000600:	f04f 63a0 	mov.w	r3, #83886080	; 0x5000000
 8000604:	2290      	movs	r2, #144	; 0x90
 8000606:	210f      	movs	r1, #15
 8000608:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800060c:	f7ff ff1e 	bl	800044c <LL_RCC_PLL_ConfigDomain_48M>
  LL_RCC_PLL_Enable();
 8000610:	f7ff fef8 	bl	8000404 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000614:	bf00      	nop
 8000616:	f7ff ff05 	bl	8000424 <LL_RCC_PLL_IsReady>
 800061a:	4603      	mov	r3, r0
 800061c:	2b01      	cmp	r3, #1
 800061e:	d1fa      	bne.n	8000616 <SystemClock_Config+0x46>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff feb3 	bl	800038c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000626:	2000      	movs	r0, #0
 8000628:	f7ff fec4 	bl	80003b4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800062c:	2000      	movs	r0, #0
 800062e:	f7ff fed5 	bl	80003dc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSE);
 8000632:	2001      	movs	r0, #1
 8000634:	f7ff fe88 	bl	8000348 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSE)
 8000638:	bf00      	nop
 800063a:	f7ff fe99 	bl	8000370 <LL_RCC_GetSysClkSource>
 800063e:	4603      	mov	r3, r0
 8000640:	2b04      	cmp	r3, #4
 8000642:	d1fa      	bne.n	800063a <SystemClock_Config+0x6a>
  {
  
  }
  LL_SetSystemCoreClock(25000000);
 8000644:	4806      	ldr	r0, [pc, #24]	; (8000660 <SystemClock_Config+0x90>)
 8000646:	f003 fb5d 	bl	8003d04 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800064a:	2000      	movs	r0, #0
 800064c:	f000 f9b0 	bl	80009b0 <HAL_InitTick>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x8a>
  {
    Error_Handler();  
 8000656:	f000 f8b5 	bl	80007c4 <Error_Handler>
  };
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	017d7840 	.word	0x017d7840

08000664 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b08a      	sub	sp, #40	; 0x28
 8000668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  LL_DAC_InitTypeDef DAC_InitStruct = {0};
 800066a:	f107 0318 	add.w	r3, r7, #24
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	463b      	mov	r3, r7
 800067a:	2200      	movs	r2, #0
 800067c:	601a      	str	r2, [r3, #0]
 800067e:	605a      	str	r2, [r3, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	60da      	str	r2, [r3, #12]
 8000684:	611a      	str	r2, [r3, #16]
 8000686:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_DAC1);
 8000688:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 800068c:	f7ff ff16 	bl	80004bc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000690:	2001      	movs	r0, #1
 8000692:	f7ff fefb 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  /**DAC GPIO Configuration  
  PA4   ------> DAC_OUT1 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000696:	2310      	movs	r3, #16
 8000698:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800069a:	2303      	movs	r3, #3
 800069c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006a2:	463b      	mov	r3, r7
 80006a4:	4619      	mov	r1, r3
 80006a6:	480a      	ldr	r0, [pc, #40]	; (80006d0 <MX_DAC_Init+0x6c>)
 80006a8:	f001 ffa5 	bl	80025f6 <LL_GPIO_Init>
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC channel OUT1 config 
  */
  DAC_InitStruct.TriggerSource = LL_DAC_TRIG_SOFTWARE;
 80006ac:	2338      	movs	r3, #56	; 0x38
 80006ae:	61bb      	str	r3, [r7, #24]
  DAC_InitStruct.WaveAutoGeneration = LL_DAC_WAVE_AUTO_GENERATION_NONE;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  DAC_InitStruct.OutputBuffer = LL_DAC_OUTPUT_BUFFER_ENABLE;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  LL_DAC_Init(DAC, LL_DAC_CHANNEL_1, &DAC_InitStruct);
 80006b8:	f107 0318 	add.w	r3, r7, #24
 80006bc:	461a      	mov	r2, r3
 80006be:	4905      	ldr	r1, [pc, #20]	; (80006d4 <MX_DAC_Init+0x70>)
 80006c0:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_DAC_Init+0x74>)
 80006c2:	f001 fe42 	bl	800234a <LL_DAC_Init>
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006c6:	bf00      	nop
 80006c8:	3728      	adds	r7, #40	; 0x28
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020000 	.word	0x40020000
 80006d4:	02100001 	.word	0x02100001
 80006d8:	40007400 	.word	0x40007400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 80006f2:	2080      	movs	r0, #128	; 0x80
 80006f4:	f7ff feca 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80006f8:	2001      	movs	r0, #1
 80006fa:	f7ff fec7 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 80006fe:	2004      	movs	r0, #4
 8000700:	f7ff fec4 	bl	800048c <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000704:	2002      	movs	r0, #2
 8000706:	f7ff fec1 	bl	800048c <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, SPI_SCK_Pin|SPI_MOSI_Pin|LED_2_Pin|LED_1_Pin);
 800070a:	f44f 7158 	mov.w	r1, #864	; 0x360
 800070e:	482a      	ldr	r0, [pc, #168]	; (80007b8 <MX_GPIO_Init+0xdc>)
 8000710:	f7ff ff22 	bl	8000558 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SPI_FLASH_CS_N_GPIO_Port, SPI_FLASH_CS_N_Pin);
 8000714:	2110      	movs	r1, #16
 8000716:	4829      	ldr	r0, [pc, #164]	; (80007bc <MX_GPIO_Init+0xe0>)
 8000718:	f7ff ff1e 	bl	8000558 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, POT_CS_N_Pin|POT_UD_Pin);
 800071c:	2130      	movs	r1, #48	; 0x30
 800071e:	4828      	ldr	r0, [pc, #160]	; (80007c0 <MX_GPIO_Init+0xe4>)
 8000720:	f7ff ff1a 	bl	8000558 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = SPI_SCK_Pin|SPI_MOSI_Pin|LED_2_Pin|LED_1_Pin;
 8000724:	f44f 7358 	mov.w	r3, #864	; 0x360
 8000728:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800072a:	2301      	movs	r3, #1
 800072c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800073a:	463b      	mov	r3, r7
 800073c:	4619      	mov	r1, r3
 800073e:	481e      	ldr	r0, [pc, #120]	; (80007b8 <MX_GPIO_Init+0xdc>)
 8000740:	f001 ff59 	bl	80025f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_MISO_Pin;
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000748:	2300      	movs	r3, #0
 800074a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_MISO_GPIO_Port, &GPIO_InitStruct);
 8000750:	463b      	mov	r3, r7
 8000752:	4619      	mov	r1, r3
 8000754:	4818      	ldr	r0, [pc, #96]	; (80007b8 <MX_GPIO_Init+0xdc>)
 8000756:	f001 ff4e 	bl	80025f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPI_FLASH_CS_N_Pin;
 800075a:	2310      	movs	r3, #16
 800075c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800075e:	2301      	movs	r3, #1
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(SPI_FLASH_CS_N_GPIO_Port, &GPIO_InitStruct);
 800076e:	463b      	mov	r3, r7
 8000770:	4619      	mov	r1, r3
 8000772:	4812      	ldr	r0, [pc, #72]	; (80007bc <MX_GPIO_Init+0xe0>)
 8000774:	f001 ff3f 	bl	80025f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin;
 8000778:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800077c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000786:	463b      	mov	r3, r7
 8000788:	4619      	mov	r1, r3
 800078a:	480d      	ldr	r0, [pc, #52]	; (80007c0 <MX_GPIO_Init+0xe4>)
 800078c:	f001 ff33 	bl	80025f6 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = POT_CS_N_Pin|POT_UD_Pin;
 8000790:	2330      	movs	r3, #48	; 0x30
 8000792:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000794:	2301      	movs	r3, #1
 8000796:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007a4:	463b      	mov	r3, r7
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_GPIO_Init+0xe4>)
 80007aa:	f001 ff24 	bl	80025f6 <LL_GPIO_Init>

}
 80007ae:	bf00      	nop
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020800 	.word	0x40020800
 80007c0:	40020400 	.word	0x40020400

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007c8:	bf00      	nop
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
	...

080007d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <HAL_MspInit+0x4c>)
 80007e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e8:	6453      	str	r3, [r2, #68]	; 0x44
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <HAL_MspInit+0x4c>)
 80007ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	4b09      	ldr	r3, [pc, #36]	; (8000820 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <HAL_MspInit+0x4c>)
 8000800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000804:	6413      	str	r3, [r2, #64]	; 0x40
 8000806:	4b06      	ldr	r3, [pc, #24]	; (8000820 <HAL_MspInit+0x4c>)
 8000808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080e:	603b      	str	r3, [r7, #0]
 8000810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000836:	e7fe      	b.n	8000836 <HardFault_Handler+0x4>

08000838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800083c:	e7fe      	b.n	800083c <MemManage_Handler+0x4>

0800083e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler+0x4>

08000844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000848:	e7fe      	b.n	8000848 <UsageFault_Handler+0x4>

0800084a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr

08000866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086a:	bf00      	nop
 800086c:	46bd      	mov	sp, r7
 800086e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000872:	4770      	bx	lr

08000874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000878:	f000 f8ca 	bl	8000a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}

08000880 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000884:	4802      	ldr	r0, [pc, #8]	; (8000890 <OTG_FS_IRQHandler+0x10>)
 8000886:	f000 fd01 	bl	800128c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200016e4 	.word	0x200016e4

08000894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_sbrk+0x50>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d102      	bne.n	80008aa <_sbrk+0x16>
		heap_end = &end;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <_sbrk+0x50>)
 80008a6:	4a10      	ldr	r2, [pc, #64]	; (80008e8 <_sbrk+0x54>)
 80008a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <_sbrk+0x50>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <_sbrk+0x50>)
 80008b2:	681a      	ldr	r2, [r3, #0]
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4413      	add	r3, r2
 80008b8:	466a      	mov	r2, sp
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d907      	bls.n	80008ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80008be:	f005 fae7 	bl	8005e90 <__errno>
 80008c2:	4602      	mov	r2, r0
 80008c4:	230c      	movs	r3, #12
 80008c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80008c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008cc:	e006      	b.n	80008dc <_sbrk+0x48>
	}

	heap_end += incr;
 80008ce:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <_sbrk+0x50>)
 80008d0:	681a      	ldr	r2, [r3, #0]
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	4a03      	ldr	r2, [pc, #12]	; (80008e4 <_sbrk+0x50>)
 80008d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008da:	68fb      	ldr	r3, [r7, #12]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000200 	.word	0x20000200
 80008e8:	20001af0 	.word	0x20001af0

080008ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x28>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x28>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000900:	4b04      	ldr	r3, [pc, #16]	; (8000914 <SystemInit+0x28>)
 8000902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000906:	609a      	str	r2, [r3, #8]
#endif
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	e000ed00 	.word	0xe000ed00

08000918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800091c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800091e:	e003      	b.n	8000928 <LoopCopyDataInit>

08000920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000926:	3104      	adds	r1, #4

08000928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000928:	480b      	ldr	r0, [pc, #44]	; (8000958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800092c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800092e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000930:	d3f6      	bcc.n	8000920 <CopyDataInit>
  ldr  r2, =_sbss
 8000932:	4a0b      	ldr	r2, [pc, #44]	; (8000960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000934:	e002      	b.n	800093c <LoopFillZerobss>

08000936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000938:	f842 3b04 	str.w	r3, [r2], #4

0800093c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800093e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000940:	d3f9      	bcc.n	8000936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000942:	f7ff ffd3 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000946:	f005 faa9 	bl	8005e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800094a:	f7ff fe15 	bl	8000578 <main>
  bx  lr    
 800094e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000950:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000954:	080060e0 	.word	0x080060e0
  ldr  r0, =_sdata
 8000958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800095c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8000960:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8000964:	20001af0 	.word	0x20001af0

08000968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC_IRQHandler>
	...

0800096c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <HAL_Init+0x40>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <HAL_Init+0x40>)
 8000976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800097a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <HAL_Init+0x40>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <HAL_Init+0x40>)
 8000982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a07      	ldr	r2, [pc, #28]	; (80009ac <HAL_Init+0x40>)
 800098e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000994:	2003      	movs	r0, #3
 8000996:	f000 f94d 	bl	8000c34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099a:	2000      	movs	r0, #0
 800099c:	f000 f808 	bl	80009b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a0:	f7ff ff18 	bl	80007d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a4:	2300      	movs	r3, #0
}
 80009a6:	4618      	mov	r0, r3
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023c00 	.word	0x40023c00

080009b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009b8:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_InitTick+0x54>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <HAL_InitTick+0x58>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 f965 	bl	8000c9e <HAL_SYSTICK_Config>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009da:	2301      	movs	r3, #1
 80009dc:	e00e      	b.n	80009fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2b0f      	cmp	r3, #15
 80009e2:	d80a      	bhi.n	80009fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e4:	2200      	movs	r2, #0
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ec:	f000 f92d 	bl	8000c4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4a06      	ldr	r2, [pc, #24]	; (8000a0c <HAL_InitTick+0x5c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009f6:	2300      	movs	r3, #0
 80009f8:	e000      	b.n	80009fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fa:	2301      	movs	r3, #1
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20000000 	.word	0x20000000
 8000a08:	20000008 	.word	0x20000008
 8000a0c:	20000004 	.word	0x20000004

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000210 	.word	0x20000210

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	20000210 	.word	0x20000210

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff ffee 	bl	8000a38 <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <HAL_Delay+0x40>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffde 	bl	8000a38 <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000008 	.word	0x20000008

08000a94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	f003 0307 	and.w	r3, r3, #7
 8000aa2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa6:	68db      	ldr	r3, [r3, #12]
 8000aa8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aaa:	68ba      	ldr	r2, [r7, #8]
 8000aac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ac6:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	60d3      	str	r3, [r2, #12]
}
 8000acc:	bf00      	nop
 8000ace:	3714      	adds	r7, #20
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae0:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	0a1b      	lsrs	r3, r3, #8
 8000ae6:	f003 0307 	and.w	r3, r3, #7
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	db0b      	blt.n	8000b22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0a:	79fb      	ldrb	r3, [r7, #7]
 8000b0c:	f003 021f 	and.w	r2, r3, #31
 8000b10:	4907      	ldr	r1, [pc, #28]	; (8000b30 <__NVIC_EnableIRQ+0x38>)
 8000b12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b16:	095b      	lsrs	r3, r3, #5
 8000b18:	2001      	movs	r0, #1
 8000b1a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	e000e100 	.word	0xe000e100

08000b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	db0a      	blt.n	8000b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	b2da      	uxtb	r2, r3
 8000b4c:	490c      	ldr	r1, [pc, #48]	; (8000b80 <__NVIC_SetPriority+0x4c>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	0112      	lsls	r2, r2, #4
 8000b54:	b2d2      	uxtb	r2, r2
 8000b56:	440b      	add	r3, r1
 8000b58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b5c:	e00a      	b.n	8000b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	b2da      	uxtb	r2, r3
 8000b62:	4908      	ldr	r1, [pc, #32]	; (8000b84 <__NVIC_SetPriority+0x50>)
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	f003 030f 	and.w	r3, r3, #15
 8000b6a:	3b04      	subs	r3, #4
 8000b6c:	0112      	lsls	r2, r2, #4
 8000b6e:	b2d2      	uxtb	r2, r2
 8000b70:	440b      	add	r3, r1
 8000b72:	761a      	strb	r2, [r3, #24]
}
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b089      	sub	sp, #36	; 0x24
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ba2:	2b04      	cmp	r3, #4
 8000ba4:	bf28      	it	cs
 8000ba6:	2304      	movcs	r3, #4
 8000ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	3304      	adds	r3, #4
 8000bae:	2b06      	cmp	r3, #6
 8000bb0:	d902      	bls.n	8000bb8 <NVIC_EncodePriority+0x30>
 8000bb2:	69fb      	ldr	r3, [r7, #28]
 8000bb4:	3b03      	subs	r3, #3
 8000bb6:	e000      	b.n	8000bba <NVIC_EncodePriority+0x32>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000bc0:	69bb      	ldr	r3, [r7, #24]
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43da      	mvns	r2, r3
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	401a      	ands	r2, r3
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bd4:	697b      	ldr	r3, [r7, #20]
 8000bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bda:	43d9      	mvns	r1, r3
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be0:	4313      	orrs	r3, r2
         );
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3724      	adds	r7, #36	; 0x24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
	...

08000bf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3b01      	subs	r3, #1
 8000bfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c00:	d301      	bcc.n	8000c06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00f      	b.n	8000c26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c06:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <SysTick_Config+0x40>)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3b01      	subs	r3, #1
 8000c0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c0e:	210f      	movs	r1, #15
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c14:	f7ff ff8e 	bl	8000b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <SysTick_Config+0x40>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c1e:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <SysTick_Config+0x40>)
 8000c20:	2207      	movs	r2, #7
 8000c22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c24:	2300      	movs	r3, #0
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	e000e010 	.word	0xe000e010

08000c34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c3c:	6878      	ldr	r0, [r7, #4]
 8000c3e:	f7ff ff29 	bl	8000a94 <__NVIC_SetPriorityGrouping>
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	4603      	mov	r3, r0
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
 8000c56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c5c:	f7ff ff3e 	bl	8000adc <__NVIC_GetPriorityGrouping>
 8000c60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c62:	687a      	ldr	r2, [r7, #4]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	6978      	ldr	r0, [r7, #20]
 8000c68:	f7ff ff8e 	bl	8000b88 <NVIC_EncodePriority>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c72:	4611      	mov	r1, r2
 8000c74:	4618      	mov	r0, r3
 8000c76:	f7ff ff5d 	bl	8000b34 <__NVIC_SetPriority>
}
 8000c7a:	bf00      	nop
 8000c7c:	3718      	adds	r7, #24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}

08000c82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	4603      	mov	r3, r0
 8000c8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff31 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c96:	bf00      	nop
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff ffa2 	bl	8000bf0 <SysTick_Config>
 8000cac:	4603      	mov	r3, r0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61fb      	str	r3, [r7, #28]
 8000cd2:	e16b      	b.n	8000fac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ce8:	693a      	ldr	r2, [r7, #16]
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	429a      	cmp	r2, r3
 8000cee:	f040 815a 	bne.w	8000fa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d00b      	beq.n	8000d12 <HAL_GPIO_Init+0x5a>
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d007      	beq.n	8000d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d06:	2b11      	cmp	r3, #17
 8000d08:	d003      	beq.n	8000d12 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	2b12      	cmp	r3, #18
 8000d10:	d130      	bne.n	8000d74 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	689b      	ldr	r3, [r3, #8]
 8000d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	68da      	ldr	r2, [r3, #12]
 8000d2e:	69fb      	ldr	r3, [r7, #28]
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	fa02 f303 	lsl.w	r3, r2, r3
 8000d36:	69ba      	ldr	r2, [r7, #24]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	69ba      	ldr	r2, [r7, #24]
 8000d40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d48:	2201      	movs	r2, #1
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	091b      	lsrs	r3, r3, #4
 8000d5e:	f003 0201 	and.w	r2, r3, #1
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	005b      	lsls	r3, r3, #1
 8000d7e:	2203      	movs	r2, #3
 8000d80:	fa02 f303 	lsl.w	r3, r2, r3
 8000d84:	43db      	mvns	r3, r3
 8000d86:	69ba      	ldr	r2, [r7, #24]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	689a      	ldr	r2, [r3, #8]
 8000d90:	69fb      	ldr	r3, [r7, #28]
 8000d92:	005b      	lsls	r3, r3, #1
 8000d94:	fa02 f303 	lsl.w	r3, r2, r3
 8000d98:	69ba      	ldr	r2, [r7, #24]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0xfc>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b12      	cmp	r3, #18
 8000db2:	d123      	bne.n	8000dfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	08da      	lsrs	r2, r3, #3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3208      	adds	r2, #8
 8000dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	f003 0307 	and.w	r3, r3, #7
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	220f      	movs	r2, #15
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	691a      	ldr	r2, [r3, #16]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	009b      	lsls	r3, r3, #2
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	08da      	lsrs	r2, r3, #3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	3208      	adds	r2, #8
 8000df6:	69b9      	ldr	r1, [r7, #24]
 8000df8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f003 0203 	and.w	r2, r3, #3
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	005b      	lsls	r3, r3, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	f000 80b4 	beq.w	8000fa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b5f      	ldr	r3, [pc, #380]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a5e      	ldr	r2, [pc, #376]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b5c      	ldr	r3, [pc, #368]	; (8000fc0 <HAL_GPIO_Init+0x308>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	f003 0303 	and.w	r3, r3, #3
 8000e6e:	009b      	lsls	r3, r3, #2
 8000e70:	220f      	movs	r2, #15
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	4a51      	ldr	r2, [pc, #324]	; (8000fc8 <HAL_GPIO_Init+0x310>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d02b      	beq.n	8000ede <HAL_GPIO_Init+0x226>
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4a50      	ldr	r2, [pc, #320]	; (8000fcc <HAL_GPIO_Init+0x314>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d025      	beq.n	8000eda <HAL_GPIO_Init+0x222>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_GPIO_Init+0x318>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d01f      	beq.n	8000ed6 <HAL_GPIO_Init+0x21e>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a4e      	ldr	r2, [pc, #312]	; (8000fd4 <HAL_GPIO_Init+0x31c>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d019      	beq.n	8000ed2 <HAL_GPIO_Init+0x21a>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a4d      	ldr	r2, [pc, #308]	; (8000fd8 <HAL_GPIO_Init+0x320>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d013      	beq.n	8000ece <HAL_GPIO_Init+0x216>
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	4a4c      	ldr	r2, [pc, #304]	; (8000fdc <HAL_GPIO_Init+0x324>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d00d      	beq.n	8000eca <HAL_GPIO_Init+0x212>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <HAL_GPIO_Init+0x328>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d007      	beq.n	8000ec6 <HAL_GPIO_Init+0x20e>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4a4a      	ldr	r2, [pc, #296]	; (8000fe4 <HAL_GPIO_Init+0x32c>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d101      	bne.n	8000ec2 <HAL_GPIO_Init+0x20a>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00e      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec2:	2308      	movs	r3, #8
 8000ec4:	e00c      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	e00a      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eca:	2305      	movs	r3, #5
 8000ecc:	e008      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ece:	2304      	movs	r3, #4
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed2:	2303      	movs	r3, #3
 8000ed4:	e004      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	e002      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000eda:	2301      	movs	r3, #1
 8000edc:	e000      	b.n	8000ee0 <HAL_GPIO_Init+0x228>
 8000ede:	2300      	movs	r3, #0
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	f002 0203 	and.w	r2, r2, #3
 8000ee6:	0092      	lsls	r2, r2, #2
 8000ee8:	4093      	lsls	r3, r2
 8000eea:	69ba      	ldr	r2, [r7, #24]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ef0:	4934      	ldr	r1, [pc, #208]	; (8000fc4 <HAL_GPIO_Init+0x30c>)
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000efe:	4b3a      	ldr	r3, [pc, #232]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f22:	4a31      	ldr	r2, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f28:	4b2f      	ldr	r3, [pc, #188]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4013      	ands	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d003      	beq.n	8000f4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f4c:	4a26      	ldr	r2, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f4e:	69bb      	ldr	r3, [r7, #24]
 8000f50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f52:	4b25      	ldr	r3, [pc, #148]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	43db      	mvns	r3, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4013      	ands	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f76:	4a1c      	ldr	r2, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f7c:	4b1a      	ldr	r3, [pc, #104]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	43db      	mvns	r3, r3
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	4013      	ands	r3, r2
 8000f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fa0:	4a11      	ldr	r2, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x330>)
 8000fa2:	69bb      	ldr	r3, [r7, #24]
 8000fa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	f67f ae90 	bls.w	8000cd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	3724      	adds	r7, #36	; 0x24
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40023800 	.word	0x40023800
 8000fc4:	40013800 	.word	0x40013800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020400 	.word	0x40020400
 8000fd0:	40020800 	.word	0x40020800
 8000fd4:	40020c00 	.word	0x40020c00
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	40021400 	.word	0x40021400
 8000fe0:	40021800 	.word	0x40021800
 8000fe4:	40021c00 	.word	0x40021c00
 8000fe8:	40013c00 	.word	0x40013c00

08000fec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000fec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fee:	b08f      	sub	sp, #60	; 0x3c
 8000ff0:	af0a      	add	r7, sp, #40	; 0x28
 8000ff2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e10f      	b.n	800121e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800100a:	b2db      	uxtb	r3, r3
 800100c:	2b00      	cmp	r3, #0
 800100e:	d106      	bne.n	800101e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2200      	movs	r2, #0
 8001014:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f004 fc3d 	bl	8005898 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2203      	movs	r2, #3
 8001022:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001026:	68bb      	ldr	r3, [r7, #8]
 8001028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800102a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800102e:	2b00      	cmp	r3, #0
 8001030:	d102      	bne.n	8001038 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f001 fc62 	bl	8002906 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	687e      	ldr	r6, [r7, #4]
 800104a:	466d      	mov	r5, sp
 800104c:	f106 0410 	add.w	r4, r6, #16
 8001050:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001052:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001058:	e894 0003 	ldmia.w	r4, {r0, r1}
 800105c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001060:	1d33      	adds	r3, r6, #4
 8001062:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001064:	6838      	ldr	r0, [r7, #0]
 8001066:	f001 fb39 	bl	80026dc <USB_CoreInit>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e0d0      	b.n	800121e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f001 fc50 	bl	8002928 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	73fb      	strb	r3, [r7, #15]
 800108c:	e04a      	b.n	8001124 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	1a9b      	subs	r3, r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	333d      	adds	r3, #61	; 0x3d
 800109e:	2201      	movs	r2, #1
 80010a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	333c      	adds	r3, #60	; 0x3c
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	b298      	uxth	r0, r3
 80010bc:	6879      	ldr	r1, [r7, #4]
 80010be:	4613      	mov	r3, r2
 80010c0:	00db      	lsls	r3, r3, #3
 80010c2:	1a9b      	subs	r3, r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	440b      	add	r3, r1
 80010c8:	3342      	adds	r3, #66	; 0x42
 80010ca:	4602      	mov	r2, r0
 80010cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	333f      	adds	r3, #63	; 0x3f
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	3344      	adds	r3, #68	; 0x44
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	3348      	adds	r3, #72	; 0x48
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3350      	adds	r3, #80	; 0x50
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800111e:	7bfb      	ldrb	r3, [r7, #15]
 8001120:	3301      	adds	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
 8001124:	7bfa      	ldrb	r2, [r7, #15]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	429a      	cmp	r2, r3
 800112c:	d3af      	bcc.n	800108e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800112e:	2300      	movs	r3, #0
 8001130:	73fb      	strb	r3, [r7, #15]
 8001132:	e044      	b.n	80011be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800115c:	7bfa      	ldrb	r2, [r7, #15]
 800115e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001160:	7bfa      	ldrb	r2, [r7, #15]
 8001162:	6879      	ldr	r1, [r7, #4]
 8001164:	4613      	mov	r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	1a9b      	subs	r3, r3, r2
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	440b      	add	r3, r1
 800116e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001172:	2200      	movs	r2, #0
 8001174:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001176:	7bfa      	ldrb	r2, [r7, #15]
 8001178:	6879      	ldr	r1, [r7, #4]
 800117a:	4613      	mov	r3, r2
 800117c:	00db      	lsls	r3, r3, #3
 800117e:	1a9b      	subs	r3, r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800118c:	7bfa      	ldrb	r2, [r7, #15]
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	4613      	mov	r3, r2
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	1a9b      	subs	r3, r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	440b      	add	r3, r1
 800119a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011a2:	7bfa      	ldrb	r2, [r7, #15]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	4613      	mov	r3, r2
 80011a8:	00db      	lsls	r3, r3, #3
 80011aa:	1a9b      	subs	r3, r3, r2
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	440b      	add	r3, r1
 80011b0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
 80011ba:	3301      	adds	r3, #1
 80011bc:	73fb      	strb	r3, [r7, #15]
 80011be:	7bfa      	ldrb	r2, [r7, #15]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d3b5      	bcc.n	8001134 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	687e      	ldr	r6, [r7, #4]
 80011d0:	466d      	mov	r5, sp
 80011d2:	f106 0410 	add.w	r4, r6, #16
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80011e6:	1d33      	adds	r3, r6, #4
 80011e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011ea:	6838      	ldr	r0, [r7, #0]
 80011ec:	f001 fbc6 	bl	800297c <USB_DevInit>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d005      	beq.n	8001202 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2202      	movs	r2, #2
 80011fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00d      	b.n	800121e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f002 fc05 	bl	8003a26 <USB_DevDisconnect>

  return HAL_OK;
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3714      	adds	r7, #20
 8001222:	46bd      	mov	sp, r7
 8001224:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001226 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_PCD_Start+0x1c>
 800123e:	2302      	movs	r3, #2
 8001240:	e020      	b.n	8001284 <HAL_PCD_Start+0x5e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800124e:	2b01      	cmp	r3, #1
 8001250:	d109      	bne.n	8001266 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001256:	2b01      	cmp	r3, #1
 8001258:	d005      	beq.n	8001266 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800125e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 fbc3 	bl	80039f6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f001 fb35 	bl	80028e4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b08d      	sub	sp, #52	; 0x34
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800129a:	6a3b      	ldr	r3, [r7, #32]
 800129c:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f002 fc6a 	bl	8003b7c <USB_GetMode>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 839d 	bne.w	80019ea <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f002 fbce 	bl	8003a56 <USB_ReadInterrupts>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 8393 	beq.w	80019e8 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fbc5 	bl	8003a56 <USB_ReadInterrupts>
 80012cc:	4603      	mov	r3, r0
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d107      	bne.n	80012e6 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f002 0202 	and.w	r2, r2, #2
 80012e4:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f002 fbb3 	bl	8003a56 <USB_ReadInterrupts>
 80012f0:	4603      	mov	r3, r0
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b10      	cmp	r3, #16
 80012f8:	d161      	bne.n	80013be <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	699a      	ldr	r2, [r3, #24]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 0210 	bic.w	r2, r2, #16
 8001308:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800130a:	6a3b      	ldr	r3, [r7, #32]
 800130c:	6a1b      	ldr	r3, [r3, #32]
 800130e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	f003 020f 	and.w	r2, r3, #15
 8001316:	4613      	mov	r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	1a9b      	subs	r3, r3, r2
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	4413      	add	r3, r2
 8001326:	3304      	adds	r3, #4
 8001328:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	0c5b      	lsrs	r3, r3, #17
 800132e:	f003 030f 	and.w	r3, r3, #15
 8001332:	2b02      	cmp	r3, #2
 8001334:	d124      	bne.n	8001380 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800133c:	4013      	ands	r3, r2
 800133e:	2b00      	cmp	r3, #0
 8001340:	d035      	beq.n	80013ae <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	091b      	lsrs	r3, r3, #4
 800134a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800134c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001350:	b29b      	uxth	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	6a38      	ldr	r0, [r7, #32]
 8001356:	f002 fa2b 	bl	80037b0 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001366:	441a      	add	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	699a      	ldr	r2, [r3, #24]
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001378:	441a      	add	r2, r3
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	e016      	b.n	80013ae <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	0c5b      	lsrs	r3, r3, #17
 8001384:	f003 030f 	and.w	r3, r3, #15
 8001388:	2b06      	cmp	r3, #6
 800138a:	d110      	bne.n	80013ae <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001392:	2208      	movs	r2, #8
 8001394:	4619      	mov	r1, r3
 8001396:	6a38      	ldr	r0, [r7, #32]
 8001398:	f002 fa0a 	bl	80037b0 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	699a      	ldr	r2, [r3, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	091b      	lsrs	r3, r3, #4
 80013a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013a8:	441a      	add	r2, r3
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699a      	ldr	r2, [r3, #24]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f042 0210 	orr.w	r2, r2, #16
 80013bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f002 fb47 	bl	8003a56 <USB_ReadInterrupts>
 80013c8:	4603      	mov	r3, r0
 80013ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013d2:	d16e      	bne.n	80014b2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fb4d 	bl	8003a7c <USB_ReadDevAllOutEpInterrupt>
 80013e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013e4:	e062      	b.n	80014ac <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80013e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e8:	f003 0301 	and.w	r3, r3, #1
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d057      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013f6:	b2d2      	uxtb	r2, r2
 80013f8:	4611      	mov	r1, r2
 80013fa:	4618      	mov	r0, r3
 80013fc:	f002 fb72 	bl	8003ae4 <USB_ReadDevOutEPInterrupt>
 8001400:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d00c      	beq.n	8001426 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800140c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140e:	015a      	lsls	r2, r3, #5
 8001410:	69fb      	ldr	r3, [r7, #28]
 8001412:	4413      	add	r3, r2
 8001414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001418:	461a      	mov	r2, r3
 800141a:	2301      	movs	r3, #1
 800141c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800141e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fdb1 	bl	8001f88 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	f003 0308 	and.w	r3, r3, #8
 800142c:	2b00      	cmp	r3, #0
 800142e:	d00c      	beq.n	800144a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001432:	015a      	lsls	r2, r3, #5
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	4413      	add	r3, r2
 8001438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800143c:	461a      	mov	r2, r3
 800143e:	2308      	movs	r3, #8
 8001440:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001442:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f000 feab 	bl	80021a0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	f003 0310 	and.w	r3, r3, #16
 8001450:	2b00      	cmp	r3, #0
 8001452:	d008      	beq.n	8001466 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001456:	015a      	lsls	r2, r3, #5
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	4413      	add	r3, r2
 800145c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001460:	461a      	mov	r2, r3
 8001462:	2310      	movs	r3, #16
 8001464:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f003 0320 	and.w	r3, r3, #32
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	015a      	lsls	r2, r3, #5
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	4413      	add	r3, r2
 8001478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147c:	461a      	mov	r2, r3
 800147e:	2320      	movs	r3, #32
 8001480:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d009      	beq.n	80014a0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001498:	461a      	mov	r2, r3
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	3301      	adds	r3, #1
 80014a4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a8:	085b      	lsrs	r3, r3, #1
 80014aa:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d199      	bne.n	80013e6 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f002 facd 	bl	8003a56 <USB_ReadInterrupts>
 80014bc:	4603      	mov	r3, r0
 80014be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014c6:	f040 80c0 	bne.w	800164a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f002 faee 	bl	8003ab0 <USB_ReadDevAllInEpInterrupt>
 80014d4:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014da:	e0b2      	b.n	8001642 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	f000 80a7 	beq.w	8001636 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	b2d2      	uxtb	r2, r2
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 fb14 	bl	8003b20 <USB_ReadDevInEPInterrupt>
 80014f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b00      	cmp	r3, #0
 8001502:	d057      	beq.n	80015b4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	2201      	movs	r2, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	43db      	mvns	r3, r3
 800151e:	69f9      	ldr	r1, [r7, #28]
 8001520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001524:	4013      	ands	r3, r2
 8001526:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800152a:	015a      	lsls	r2, r3, #5
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	4413      	add	r3, r2
 8001530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001534:	461a      	mov	r2, r3
 8001536:	2301      	movs	r3, #1
 8001538:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b01      	cmp	r3, #1
 8001540:	d132      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	1a9b      	subs	r3, r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	3348      	adds	r3, #72	; 0x48
 8001552:	6819      	ldr	r1, [r3, #0]
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001558:	4613      	mov	r3, r2
 800155a:	00db      	lsls	r3, r3, #3
 800155c:	1a9b      	subs	r3, r3, r2
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4403      	add	r3, r0
 8001562:	3344      	adds	r3, #68	; 0x44
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4419      	add	r1, r3
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	1a9b      	subs	r3, r3, r2
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	4403      	add	r3, r0
 8001576:	3348      	adds	r3, #72	; 0x48
 8001578:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800157c:	2b00      	cmp	r3, #0
 800157e:	d113      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x31c>
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001584:	4613      	mov	r3, r2
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	1a9b      	subs	r3, r3, r2
 800158a:	009b      	lsls	r3, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	3350      	adds	r3, #80	; 0x50
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d108      	bne.n	80015a8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6818      	ldr	r0, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015a0:	461a      	mov	r2, r3
 80015a2:	2101      	movs	r1, #1
 80015a4:	f002 fb1c 	bl	8003be0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80015a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	4619      	mov	r1, r3
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f004 f9f3 	bl	800599a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	f003 0308 	and.w	r3, r3, #8
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d008      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ca:	461a      	mov	r2, r3
 80015cc:	2308      	movs	r3, #8
 80015ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0310 	and.w	r3, r3, #16
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015e6:	461a      	mov	r2, r3
 80015e8:	2310      	movs	r3, #16
 80015ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d008      	beq.n	8001608 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001602:	461a      	mov	r2, r3
 8001604:	2340      	movs	r3, #64	; 0x40
 8001606:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d008      	beq.n	8001624 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	015a      	lsls	r2, r3, #5
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	4413      	add	r3, r2
 800161a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800161e:	461a      	mov	r2, r3
 8001620:	2302      	movs	r3, #2
 8001622:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800162a:	2b00      	cmp	r3, #0
 800162c:	d003      	beq.n	8001636 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800162e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fc1b 	bl	8001e6c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	3301      	adds	r3, #1
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	085b      	lsrs	r3, r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001644:	2b00      	cmp	r3, #0
 8001646:	f47f af49 	bne.w	80014dc <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f002 fa01 	bl	8003a56 <USB_ReadInterrupts>
 8001654:	4603      	mov	r3, r0
 8001656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800165a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800165e:	d122      	bne.n	80016a6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	69fa      	ldr	r2, [r7, #28]
 800166a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800166e:	f023 0301 	bic.w	r3, r3, #1
 8001672:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800167a:	2b01      	cmp	r3, #1
 800167c:	d108      	bne.n	8001690 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001686:	2100      	movs	r1, #0
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f000 fe27 	bl	80022dc <HAL_PCDEx_LPM_Callback>
 800168e:	e002      	b.n	8001696 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f004 f9f9 	bl	8005a88 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	695a      	ldr	r2, [r3, #20]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80016a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 f9d3 	bl	8003a56 <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016ba:	d112      	bne.n	80016e2 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f003 0301 	and.w	r3, r3, #1
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d102      	bne.n	80016d2 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f004 f9b5 	bl	8005a3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80016e0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4618      	mov	r0, r3
 80016e8:	f002 f9b5 	bl	8003a56 <USB_ReadInterrupts>
 80016ec:	4603      	mov	r3, r0
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80016f6:	f040 80c7 	bne.w	8001888 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	69fa      	ldr	r2, [r7, #28]
 8001704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001708:	f023 0301 	bic.w	r3, r3, #1
 800170c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	2110      	movs	r1, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f001 fa95 	bl	8002c44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800171a:	2300      	movs	r3, #0
 800171c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800171e:	e056      	b.n	80017ce <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001722:	015a      	lsls	r2, r3, #5
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	4413      	add	r3, r2
 8001728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800172c:	461a      	mov	r2, r3
 800172e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001732:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001736:	015a      	lsls	r2, r3, #5
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	4413      	add	r3, r2
 800173c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001744:	0151      	lsls	r1, r2, #5
 8001746:	69fa      	ldr	r2, [r7, #28]
 8001748:	440a      	add	r2, r1
 800174a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800174e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001752:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8001754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001756:	015a      	lsls	r2, r3, #5
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	4413      	add	r3, r2
 800175c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001764:	0151      	lsls	r1, r2, #5
 8001766:	69fa      	ldr	r2, [r7, #28]
 8001768:	440a      	add	r2, r1
 800176a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800176e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001772:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001780:	461a      	mov	r2, r3
 8001782:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001786:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	4413      	add	r3, r2
 8001790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001798:	0151      	lsls	r1, r2, #5
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	440a      	add	r2, r1
 800179e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80017a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017aa:	015a      	lsls	r2, r3, #5
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	4413      	add	r3, r2
 80017b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017b8:	0151      	lsls	r1, r2, #5
 80017ba:	69fa      	ldr	r2, [r7, #28]
 80017bc:	440a      	add	r2, r1
 80017be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ca:	3301      	adds	r3, #1
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d3a3      	bcc.n	8001720 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d016      	beq.n	8001822 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001804:	f043 030b 	orr.w	r3, r3, #11
 8001808:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181a:	f043 030b 	orr.w	r3, r3, #11
 800181e:	6453      	str	r3, [r2, #68]	; 0x44
 8001820:	e015      	b.n	800184e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	69fa      	ldr	r2, [r7, #28]
 800182c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001830:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001834:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001838:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001848:	f043 030b 	orr.w	r3, r3, #11
 800184c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800185c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001860:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6818      	ldr	r0, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	691b      	ldr	r3, [r3, #16]
 800186a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001872:	461a      	mov	r2, r3
 8001874:	f002 f9b4 	bl	8003be0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	695a      	ldr	r2, [r3, #20]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001886:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4618      	mov	r0, r3
 800188e:	f002 f8e2 	bl	8003a56 <USB_ReadInterrupts>
 8001892:	4603      	mov	r3, r0
 8001894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001898:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800189c:	d124      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f002 f978 	bl	8003b98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 fa2a 	bl	8002d06 <USB_GetDevSpeed>
 80018b2:	4603      	mov	r3, r0
 80018b4:	461a      	mov	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681c      	ldr	r4, [r3, #0]
 80018be:	f000 fd19 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 80018c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	4620      	mov	r0, r4
 80018ce:	f000 ff67 	bl	80027a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018d2:	6878      	ldr	r0, [r7, #4]
 80018d4:	f004 f889 	bl	80059ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	695a      	ldr	r2, [r3, #20]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 f8b2 	bl	8003a56 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f003 0308 	and.w	r3, r3, #8
 80018f8:	2b08      	cmp	r3, #8
 80018fa:	d10a      	bne.n	8001912 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	f004 f866 	bl	80059ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f002 0208 	and.w	r2, r2, #8
 8001910:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f002 f89d 	bl	8003a56 <USB_ReadInterrupts>
 800191c:	4603      	mov	r3, r0
 800191e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001922:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001926:	d10f      	bne.n	8001948 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800192c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4619      	mov	r1, r3
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f004 f8c8 	bl	8005ac8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001946:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4618      	mov	r0, r3
 800194e:	f002 f882 	bl	8003a56 <USB_ReadInterrupts>
 8001952:	4603      	mov	r3, r0
 8001954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001958:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800195c:	d10f      	bne.n	800197e <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	b2db      	uxtb	r3, r3
 8001966:	4619      	mov	r1, r3
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f004 f89b 	bl	8005aa4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800197c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 f867 	bl	8003a56 <USB_ReadInterrupts>
 8001988:	4603      	mov	r3, r0
 800198a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800198e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001992:	d10a      	bne.n	80019aa <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f004 f8a9 	bl	8005aec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	695a      	ldr	r2, [r3, #20]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80019a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f002 f851 	bl	8003a56 <USB_ReadInterrupts>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f003 0304 	and.w	r3, r3, #4
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d115      	bne.n	80019ea <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d002      	beq.n	80019d6 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f004 f899 	bl	8005b08 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	6859      	ldr	r1, [r3, #4]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	605a      	str	r2, [r3, #4]
 80019e6:	e000      	b.n	80019ea <HAL_PCD_IRQHandler+0x75e>
      return;
 80019e8:	bf00      	nop
    }
  }
}
 80019ea:	3734      	adds	r7, #52	; 0x34
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd90      	pop	{r4, r7, pc}

080019f0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_PCD_SetAddress+0x1a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e013      	b.n	8001a32 <HAL_PCD_SetAddress+0x42>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	78fa      	ldrb	r2, [r7, #3]
 8001a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f001 ffc1 	bl	80039aa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b084      	sub	sp, #16
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
 8001a42:	4608      	mov	r0, r1
 8001a44:	4611      	mov	r1, r2
 8001a46:	461a      	mov	r2, r3
 8001a48:	4603      	mov	r3, r0
 8001a4a:	70fb      	strb	r3, [r7, #3]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	803b      	strh	r3, [r7, #0]
 8001a50:	4613      	mov	r3, r2
 8001a52:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a54:	2300      	movs	r3, #0
 8001a56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a58:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	da0f      	bge.n	8001a80 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a60:	78fb      	ldrb	r3, [r7, #3]
 8001a62:	f003 020f 	and.w	r2, r3, #15
 8001a66:	4613      	mov	r3, r2
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	3338      	adds	r3, #56	; 0x38
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	4413      	add	r3, r2
 8001a74:	3304      	adds	r3, #4
 8001a76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	705a      	strb	r2, [r3, #1]
 8001a7e:	e00f      	b.n	8001aa0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a80:	78fb      	ldrb	r3, [r7, #3]
 8001a82:	f003 020f 	and.w	r2, r3, #15
 8001a86:	4613      	mov	r3, r2
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	3304      	adds	r3, #4
 8001a98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001aac:	883a      	ldrh	r2, [r7, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	78ba      	ldrb	r2, [r7, #2]
 8001ab6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	785b      	ldrb	r3, [r3, #1]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001aca:	78bb      	ldrb	r3, [r7, #2]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d102      	bne.n	8001ad6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_PCD_EP_Open+0xaa>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e00e      	b.n	8001b02 <HAL_PCD_EP_Open+0xc8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	68f9      	ldr	r1, [r7, #12]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f001 f92c 	bl	8002d50 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b084      	sub	sp, #16
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	da0f      	bge.n	8001b3e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	78fb      	ldrb	r3, [r7, #3]
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	687a      	ldr	r2, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	705a      	strb	r2, [r3, #1]
 8001b3c:	e00f      	b.n	8001b5e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b3e:	78fb      	ldrb	r3, [r7, #3]
 8001b40:	f003 020f 	and.w	r2, r3, #15
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	4413      	add	r3, r2
 8001b54:	3304      	adds	r3, #4
 8001b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b5e:	78fb      	ldrb	r3, [r7, #3]
 8001b60:	f003 030f 	and.w	r3, r3, #15
 8001b64:	b2da      	uxtb	r2, r3
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_PCD_EP_Close+0x6e>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e00e      	b.n	8001b96 <HAL_PCD_EP_Close+0x8c>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	68f9      	ldr	r1, [r7, #12]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f001 f96a 	bl	8002e60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	60f8      	str	r0, [r7, #12]
 8001ba6:	607a      	str	r2, [r7, #4]
 8001ba8:	603b      	str	r3, [r7, #0]
 8001baa:	460b      	mov	r3, r1
 8001bac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	691b      	ldr	r3, [r3, #16]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d102      	bne.n	8001bfa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bfa:	7afb      	ldrb	r3, [r7, #11]
 8001bfc:	f003 030f 	and.w	r3, r3, #15
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	691b      	ldr	r3, [r3, #16]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	461a      	mov	r2, r3
 8001c10:	6979      	ldr	r1, [r7, #20]
 8001c12:	f001 fc45 	bl	80034a0 <USB_EP0StartXfer>
 8001c16:	e008      	b.n	8001c2a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	6979      	ldr	r1, [r7, #20]
 8001c26:	f001 f9f7 	bl	8003018 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	3718      	adds	r7, #24
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	f003 020f 	and.w	r2, r3, #15
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	1a9b      	subs	r3, r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	3338      	adds	r3, #56	; 0x38
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	4413      	add	r3, r2
 8001c88:	3304      	adds	r3, #4
 8001c8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	b2da      	uxtb	r2, r3
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d102      	bne.n	8001cbe <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cbe:	7afb      	ldrb	r3, [r7, #11]
 8001cc0:	f003 030f 	and.w	r3, r3, #15
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d109      	bne.n	8001cdc <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6818      	ldr	r0, [r3, #0]
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	691b      	ldr	r3, [r3, #16]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	6979      	ldr	r1, [r7, #20]
 8001cd6:	f001 fbe3 	bl	80034a0 <USB_EP0StartXfer>
 8001cda:	e008      	b.n	8001cee <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	6979      	ldr	r1, [r7, #20]
 8001cea:	f001 f995 	bl	8003018 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	f003 020f 	and.w	r2, r3, #15
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d901      	bls.n	8001d16 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e050      	b.n	8001db8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	da0f      	bge.n	8001d3e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d1e:	78fb      	ldrb	r3, [r7, #3]
 8001d20:	f003 020f 	and.w	r2, r3, #15
 8001d24:	4613      	mov	r3, r2
 8001d26:	00db      	lsls	r3, r3, #3
 8001d28:	1a9b      	subs	r3, r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	3338      	adds	r3, #56	; 0x38
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	4413      	add	r3, r2
 8001d32:	3304      	adds	r3, #4
 8001d34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	705a      	strb	r2, [r3, #1]
 8001d3c:	e00d      	b.n	8001d5a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d3e:	78fa      	ldrb	r2, [r7, #3]
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	4413      	add	r3, r2
 8001d50:	3304      	adds	r3, #4
 8001d52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d101      	bne.n	8001d7a <HAL_PCD_EP_SetStall+0x82>
 8001d76:	2302      	movs	r3, #2
 8001d78:	e01e      	b.n	8001db8 <HAL_PCD_EP_SetStall+0xc0>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	68f9      	ldr	r1, [r7, #12]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f001 fd3a 	bl	8003802 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 030f 	and.w	r3, r3, #15
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10a      	bne.n	8001dae <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	b2d9      	uxtb	r1, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001da8:	461a      	mov	r2, r3
 8001daa:	f001 ff19 	bl	8003be0 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	460b      	mov	r3, r1
 8001dca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	f003 020f 	and.w	r2, r3, #15
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d901      	bls.n	8001dde <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e042      	b.n	8001e64 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	da0f      	bge.n	8001e06 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001de6:	78fb      	ldrb	r3, [r7, #3]
 8001de8:	f003 020f 	and.w	r2, r3, #15
 8001dec:	4613      	mov	r3, r2
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	1a9b      	subs	r3, r3, r2
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	3338      	adds	r3, #56	; 0x38
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	4413      	add	r3, r2
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	705a      	strb	r2, [r3, #1]
 8001e04:	e00f      	b.n	8001e26 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e06:	78fb      	ldrb	r3, [r7, #3]
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	00db      	lsls	r3, r3, #3
 8001e10:	1a9b      	subs	r3, r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	3304      	adds	r3, #4
 8001e1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_PCD_EP_ClrStall+0x86>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e00e      	b.n	8001e64 <HAL_PCD_EP_ClrStall+0xa4>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	68f9      	ldr	r1, [r7, #12]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f001 fd42 	bl	80038de <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08a      	sub	sp, #40	; 0x28
 8001e70:	af02      	add	r7, sp, #8
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e80:	683a      	ldr	r2, [r7, #0]
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	1a9b      	subs	r3, r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3338      	adds	r3, #56	; 0x38
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	695b      	ldr	r3, [r3, #20]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d901      	bls.n	8001ea4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e06c      	b.n	8001f7e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	695a      	ldr	r2, [r3, #20]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	69fa      	ldr	r2, [r7, #28]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d902      	bls.n	8001ec0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	3303      	adds	r3, #3
 8001ec4:	089b      	lsrs	r3, r3, #2
 8001ec6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec8:	e02b      	b.n	8001f22 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	695a      	ldr	r2, [r3, #20]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	69fa      	ldr	r2, [r7, #28]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d902      	bls.n	8001ee6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	089b      	lsrs	r3, r3, #2
 8001eec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	68d9      	ldr	r1, [r3, #12]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	4603      	mov	r3, r0
 8001f04:	6978      	ldr	r0, [r7, #20]
 8001f06:	f001 fc1e 	bl	8003746 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	441a      	add	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	699a      	ldr	r2, [r3, #24]
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	441a      	add	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	015a      	lsls	r2, r3, #5
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	4413      	add	r3, r2
 8001f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d809      	bhi.n	8001f4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	699a      	ldr	r2, [r3, #24]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d203      	bcs.n	8001f4c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1be      	bne.n	8001eca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	695a      	ldr	r2, [r3, #20]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	699b      	ldr	r3, [r3, #24]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d811      	bhi.n	8001f7c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	f003 030f 	and.w	r3, r3, #15
 8001f5e:	2201      	movs	r2, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	6939      	ldr	r1, [r7, #16]
 8001f74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f78:	4013      	ands	r3, r2
 8001f7a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	333c      	adds	r3, #60	; 0x3c
 8001fa0:	3304      	adds	r3, #4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	f040 80a0 	bne.w	8002100 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a72      	ldr	r2, [pc, #456]	; (8002198 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	f240 80dd 	bls.w	800218e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80d7 	beq.w	800218e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	015a      	lsls	r2, r3, #5
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fec:	461a      	mov	r2, r3
 8001fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff2:	6093      	str	r3, [r2, #8]
 8001ff4:	e0cb      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	015a      	lsls	r2, r3, #5
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4413      	add	r3, r2
 8002008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200c:	461a      	mov	r2, r3
 800200e:	2320      	movs	r3, #32
 8002010:	6093      	str	r3, [r2, #8]
 8002012:	e0bc      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800201a:	2b00      	cmp	r3, #0
 800201c:	f040 80b7 	bne.w	800218e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	4a5d      	ldr	r2, [pc, #372]	; (8002198 <PCD_EP_OutXfrComplete_int+0x210>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d90f      	bls.n	8002048 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00a      	beq.n	8002048 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	015a      	lsls	r2, r3, #5
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	4413      	add	r3, r2
 800203a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800203e:	461a      	mov	r2, r3
 8002040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002044:	6093      	str	r3, [r2, #8]
 8002046:	e0a2      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800205a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	0159      	lsls	r1, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	440b      	add	r3, r1
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800206e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4403      	add	r3, r0
 800207e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8002082:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	1a9b      	subs	r3, r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002096:	6819      	ldr	r1, [r3, #0]
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4403      	add	r3, r0
 80020a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4419      	add	r1, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	00db      	lsls	r3, r3, #3
 80020b6:	1a9b      	subs	r3, r3, r2
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	4403      	add	r3, r0
 80020bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020c0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d114      	bne.n	80020f2 <PCD_EP_OutXfrComplete_int+0x16a>
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	683a      	ldr	r2, [r7, #0]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	1a9b      	subs	r3, r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d108      	bne.n	80020f2 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80020ea:	461a      	mov	r2, r3
 80020ec:	2101      	movs	r1, #1
 80020ee:	f001 fd77 	bl	8003be0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f003 fc33 	bl	8005964 <HAL_PCD_DataOutStageCallback>
 80020fe:	e046      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a26      	ldr	r2, [pc, #152]	; (800219c <PCD_EP_OutXfrComplete_int+0x214>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d124      	bne.n	8002152 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	015a      	lsls	r2, r3, #5
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4413      	add	r3, r2
 800211a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800211e:	461a      	mov	r2, r3
 8002120:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002124:	6093      	str	r3, [r2, #8]
 8002126:	e032      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d008      	beq.n	8002144 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	015a      	lsls	r2, r3, #5
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4413      	add	r3, r2
 800213a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800213e:	461a      	mov	r2, r3
 8002140:	2320      	movs	r3, #32
 8002142:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	b2db      	uxtb	r3, r3
 8002148:	4619      	mov	r1, r3
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f003 fc0a 	bl	8005964 <HAL_PCD_DataOutStageCallback>
 8002150:	e01d      	b.n	800218e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d114      	bne.n	8002182 <PCD_EP_OutXfrComplete_int+0x1fa>
 8002158:	6879      	ldr	r1, [r7, #4]
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	4613      	mov	r3, r2
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d108      	bne.n	8002182 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800217a:	461a      	mov	r2, r3
 800217c:	2100      	movs	r1, #0
 800217e:	f001 fd2f 	bl	8003be0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	b2db      	uxtb	r3, r3
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f003 fbeb 	bl	8005964 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800218e:	2300      	movs	r3, #0
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	4f54300a 	.word	0x4f54300a
 800219c:	4f54310a 	.word	0x4f54310a

080021a0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b086      	sub	sp, #24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
 80021a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	333c      	adds	r3, #60	; 0x3c
 80021b8:	3304      	adds	r3, #4
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	015a      	lsls	r2, r3, #5
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	4a15      	ldr	r2, [pc, #84]	; (8002228 <PCD_EP_OutSetupPacket_int+0x88>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d90e      	bls.n	80021f4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d009      	beq.n	80021f4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ec:	461a      	mov	r2, r3
 80021ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021f2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f003 fba3 	bl	8005940 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4a0a      	ldr	r2, [pc, #40]	; (8002228 <PCD_EP_OutSetupPacket_int+0x88>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d90c      	bls.n	800221c <PCD_EP_OutSetupPacket_int+0x7c>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d108      	bne.n	800221c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6818      	ldr	r0, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002214:	461a      	mov	r2, r3
 8002216:	2101      	movs	r1, #1
 8002218:	f001 fce2 	bl	8003be0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800221c:	2300      	movs	r3, #0
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	4f54300a 	.word	0x4f54300a

0800222c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800222c:	b480      	push	{r7}
 800222e:	b085      	sub	sp, #20
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	460b      	mov	r3, r1
 8002236:	70fb      	strb	r3, [r7, #3]
 8002238:	4613      	mov	r3, r2
 800223a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002242:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800224a:	883b      	ldrh	r3, [r7, #0]
 800224c:	0419      	lsls	r1, r3, #16
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	430a      	orrs	r2, r1
 8002256:	629a      	str	r2, [r3, #40]	; 0x28
 8002258:	e028      	b.n	80022ac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002260:	0c1b      	lsrs	r3, r3, #16
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4413      	add	r3, r2
 8002266:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
 800226c:	e00d      	b.n	800228a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	7bfb      	ldrb	r3, [r7, #15]
 8002274:	3340      	adds	r3, #64	; 0x40
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	4413      	add	r3, r2
 8002282:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	3301      	adds	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfa      	ldrb	r2, [r7, #15]
 800228c:	78fb      	ldrb	r3, [r7, #3]
 800228e:	3b01      	subs	r3, #1
 8002290:	429a      	cmp	r2, r3
 8002292:	d3ec      	bcc.n	800226e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002294:	883b      	ldrh	r3, [r7, #0]
 8002296:	0418      	lsls	r0, r3, #16
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6819      	ldr	r1, [r3, #0]
 800229c:	78fb      	ldrb	r3, [r7, #3]
 800229e:	3b01      	subs	r3, #1
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	4302      	orrs	r2, r0
 80022a4:	3340      	adds	r3, #64	; 0x40
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3714      	adds	r7, #20
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
 80022c2:	460b      	mov	r3, r1
 80022c4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000

0800230c <LL_DAC_IsEnabled>:
  *         (1) On this STM32 serie, parameter not available on all devices.
  *             Refer to device datasheet for channels availability.
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DAC_IsEnabled(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
 8002314:	6039      	str	r1, [r7, #0]
  return (READ_BIT(DACx->CR,
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f003 0310 	and.w	r3, r3, #16
 8002320:	2101      	movs	r1, #1
 8002322:	fa01 f303 	lsl.w	r3, r1, r3
 8002326:	401a      	ands	r2, r3
                   DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))
          == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2101      	movs	r1, #1
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	429a      	cmp	r2, r3
 8002336:	bf0c      	ite	eq
 8002338:	2301      	moveq	r3, #1
 800233a:	2300      	movne	r3, #0
 800233c:	b2db      	uxtb	r3, r3
}
 800233e:	4618      	mov	r0, r3
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <LL_DAC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DAC registers are initialized
  *          - ERROR: DAC registers are not initialized
  */
ErrorStatus LL_DAC_Init(DAC_TypeDef *DACx, uint32_t DAC_Channel, LL_DAC_InitTypeDef *DAC_InitStruct)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b086      	sub	sp, #24
 800234e:	af00      	add	r7, sp, #0
 8002350:	60f8      	str	r0, [r7, #12]
 8002352:	60b9      	str	r1, [r7, #8]
 8002354:	607a      	str	r2, [r7, #4]
  ErrorStatus status = SUCCESS;
 8002356:	2300      	movs	r3, #0
 8002358:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_LL_DAC_WAVE_AUTO_GENER_CONFIG(DAC_InitStruct->WaveAutoGenerationConfig));
  }
  
  /* Note: Hardware constraint (refer to description of this function)        */
  /*       DAC instance must be disabled.                                     */
  if(LL_DAC_IsEnabled(DACx, DAC_Channel) == 0U)
 800235a:	68b9      	ldr	r1, [r7, #8]
 800235c:	68f8      	ldr	r0, [r7, #12]
 800235e:	f7ff ffd5 	bl	800230c <LL_DAC_IsEnabled>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d13a      	bne.n	80023de <LL_DAC_Init+0x94>
  {
    /* Configuration of DAC channel:                                          */
    /*  - TriggerSource                                                       */
    /*  - WaveAutoGeneration                                                  */
    /*  - OutputBuffer                                                        */
    if (DAC_InitStruct->WaveAutoGeneration != LL_DAC_WAVE_AUTO_GENERATION_NONE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d01e      	beq.n	80023ae <LL_DAC_Init+0x64>
    {
      MODIFY_REG(DACx->CR,
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f003 0310 	and.w	r3, r3, #16
 800237a:	f640 71fa 	movw	r1, #4090	; 0xffa
 800237e:	fa01 f303 	lsl.w	r3, r1, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6819      	ldr	r1, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4319      	orrs	r1, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4319      	orrs	r1, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	4319      	orrs	r1, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	f003 0310 	and.w	r3, r3, #16
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	431a      	orrs	r2, r3
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e019      	b.n	80023e2 <LL_DAC_Init+0x98>
                 ) << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK)
                );
    }
    else
    {
      MODIFY_REG(DACx->CR,
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	21fa      	movs	r1, #250	; 0xfa
 80023ba:	fa01 f303 	lsl.w	r3, r1, r3
 80023be:	43db      	mvns	r3, r3
 80023c0:	401a      	ands	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6819      	ldr	r1, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	4319      	orrs	r1, r3
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	f003 0310 	and.w	r3, r3, #16
 80023d2:	fa01 f303 	lsl.w	r3, r1, r3
 80023d6:	431a      	orrs	r2, r3
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	e001      	b.n	80023e2 <LL_DAC_Init+0x98>
    }
  }
  else
  {
    /* Initialization error: DAC instance is not disabled.                    */
    status = ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80023e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3718      	adds	r7, #24
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <LL_GPIO_SetPinMode>:
{
 80023ec:	b480      	push	{r7}
 80023ee:	b089      	sub	sp, #36	; 0x24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa93 f3a3 	rbit	r3, r3
 8002406:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2103      	movs	r1, #3
 8002414:	fa01 f303 	lsl.w	r3, r1, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	401a      	ands	r2, r3
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	fa93 f3a3 	rbit	r3, r3
 8002426:	61bb      	str	r3, [r7, #24]
  return result;
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	fab3 f383 	clz	r3, r3
 800242e:	b2db      	uxtb	r3, r3
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	fa01 f303 	lsl.w	r3, r1, r3
 8002438:	431a      	orrs	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	601a      	str	r2, [r3, #0]
}
 800243e:	bf00      	nop
 8002440:	3724      	adds	r7, #36	; 0x24
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr

0800244a <LL_GPIO_SetPinOutputType>:
{
 800244a:	b480      	push	{r7}
 800244c:	b085      	sub	sp, #20
 800244e:	af00      	add	r7, sp, #0
 8002450:	60f8      	str	r0, [r7, #12]
 8002452:	60b9      	str	r1, [r7, #8]
 8002454:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	43db      	mvns	r3, r3
 800245e:	401a      	ands	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	431a      	orrs	r2, r3
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	605a      	str	r2, [r3, #4]
}
 800246e:	bf00      	nop
 8002470:	3714      	adds	r7, #20
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_GPIO_SetPinSpeed>:
{
 800247a:	b480      	push	{r7}
 800247c:	b089      	sub	sp, #36	; 0x24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	613b      	str	r3, [r7, #16]
  return result;
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	2103      	movs	r1, #3
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	401a      	ands	r2, r3
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	fa93 f3a3 	rbit	r3, r3
 80024b4:	61bb      	str	r3, [r7, #24]
  return result;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	6879      	ldr	r1, [r7, #4]
 80024c2:	fa01 f303 	lsl.w	r3, r1, r3
 80024c6:	431a      	orrs	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]
}
 80024cc:	bf00      	nop
 80024ce:	3724      	adds	r7, #36	; 0x24
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_GPIO_SetPinPull>:
{
 80024d8:	b480      	push	{r7}
 80024da:	b089      	sub	sp, #36	; 0x24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa93 f3a3 	rbit	r3, r3
 80024f2:	613b      	str	r3, [r7, #16]
  return result;
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2103      	movs	r1, #3
 8002500:	fa01 f303 	lsl.w	r3, r1, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	401a      	ands	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	61bb      	str	r3, [r7, #24]
  return result;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	fab3 f383 	clz	r3, r3
 800251a:	b2db      	uxtb	r3, r3
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	fa01 f303 	lsl.w	r3, r1, r3
 8002524:	431a      	orrs	r2, r3
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	60da      	str	r2, [r3, #12]
}
 800252a:	bf00      	nop
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <LL_GPIO_SetAFPin_0_7>:
{
 8002536:	b480      	push	{r7}
 8002538:	b089      	sub	sp, #36	; 0x24
 800253a:	af00      	add	r7, sp, #0
 800253c:	60f8      	str	r0, [r7, #12]
 800253e:	60b9      	str	r1, [r7, #8]
 8002540:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6a1a      	ldr	r2, [r3, #32]
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	613b      	str	r3, [r7, #16]
  return result;
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	210f      	movs	r1, #15
 800255e:	fa01 f303 	lsl.w	r3, r1, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	401a      	ands	r2, r3
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	fa93 f3a3 	rbit	r3, r3
 8002570:	61bb      	str	r3, [r7, #24]
  return result;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	fab3 f383 	clz	r3, r3
 8002578:	b2db      	uxtb	r3, r3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	fa01 f303 	lsl.w	r3, r1, r3
 8002582:	431a      	orrs	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	621a      	str	r2, [r3, #32]
}
 8002588:	bf00      	nop
 800258a:	3724      	adds	r7, #36	; 0x24
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <LL_GPIO_SetAFPin_8_15>:
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	fa93 f3a3 	rbit	r3, r3
 80025b0:	613b      	str	r3, [r7, #16]
  return result;
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	fab3 f383 	clz	r3, r3
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	210f      	movs	r1, #15
 80025be:	fa01 f303 	lsl.w	r3, r1, r3
 80025c2:	43db      	mvns	r3, r3
 80025c4:	401a      	ands	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	fa93 f3a3 	rbit	r3, r3
 80025d2:	61bb      	str	r3, [r7, #24]
  return result;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fab3 f383 	clz	r3, r3
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	6879      	ldr	r1, [r7, #4]
 80025e0:	fa01 f303 	lsl.w	r3, r1, r3
 80025e4:	431a      	orrs	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80025ea:	bf00      	nop
 80025ec:	3724      	adds	r7, #36	; 0x24
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b088      	sub	sp, #32
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8002600:	2300      	movs	r3, #0
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8002604:	2300      	movs	r3, #0
 8002606:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	fa93 f3a3 	rbit	r3, r3
 8002614:	613b      	str	r3, [r7, #16]
  return result;
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002620:	e050      	b.n	80026c4 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2101      	movs	r1, #1
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	fa01 f303 	lsl.w	r3, r1, r3
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d042      	beq.n	80026be <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	2b01      	cmp	r3, #1
 800263e:	d003      	beq.n	8002648 <LL_GPIO_Init+0x52>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b02      	cmp	r3, #2
 8002646:	d10d      	bne.n	8002664 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	461a      	mov	r2, r3
 800264e:	69b9      	ldr	r1, [r7, #24]
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff12 	bl	800247a <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	461a      	mov	r2, r3
 800265c:	69b9      	ldr	r1, [r7, #24]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fef3 	bl	800244a <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	691b      	ldr	r3, [r3, #16]
 8002668:	461a      	mov	r2, r3
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff33 	bl	80024d8 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d11a      	bne.n	80026b0 <LL_GPIO_Init+0xba>
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	fa93 f3a3 	rbit	r3, r3
 8002684:	60bb      	str	r3, [r7, #8]
  return result;
 8002686:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8002688:	fab3 f383 	clz	r3, r3
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b07      	cmp	r3, #7
 8002690:	d807      	bhi.n	80026a2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
 8002696:	461a      	mov	r2, r3
 8002698:	69b9      	ldr	r1, [r7, #24]
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ff4b 	bl	8002536 <LL_GPIO_SetAFPin_0_7>
 80026a0:	e006      	b.n	80026b0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	461a      	mov	r2, r3
 80026a8:	69b9      	ldr	r1, [r7, #24]
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f7ff ff72 	bl	8002594 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	461a      	mov	r2, r3
 80026b6:	69b9      	ldr	r1, [r7, #24]
 80026b8:	6878      	ldr	r0, [r7, #4]
 80026ba:	f7ff fe97 	bl	80023ec <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80026be:	69fb      	ldr	r3, [r7, #28]
 80026c0:	3301      	adds	r3, #1
 80026c2:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1a7      	bne.n	8002622 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3720      	adds	r7, #32
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80026dc:	b084      	sub	sp, #16
 80026de:	b580      	push	{r7, lr}
 80026e0:	b084      	sub	sp, #16
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	f107 001c 	add.w	r0, r7, #28
 80026ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80026ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d122      	bne.n	800273a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002708:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800271c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d105      	bne.n	800272e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f001 fab4 	bl	8003c9c <USB_CoreReset>
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	e01a      	b.n	8002770 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f001 faa8 	bl	8003c9c <USB_CoreReset>
 800274c:	4603      	mov	r3, r0
 800274e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800275a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
 8002762:	e005      	b.n	8002770 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002772:	2b01      	cmp	r3, #1
 8002774:	d10b      	bne.n	800278e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f043 0206 	orr.w	r2, r3, #6
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f043 0220 	orr.w	r2, r3, #32
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800278e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800279a:	b004      	add	sp, #16
 800279c:	4770      	bx	lr
	...

080027a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	4613      	mov	r3, r2
 80027ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80027ae:	79fb      	ldrb	r3, [r7, #7]
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d165      	bne.n	8002880 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	4a41      	ldr	r2, [pc, #260]	; (80028bc <USB_SetTurnaroundTime+0x11c>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d906      	bls.n	80027ca <USB_SetTurnaroundTime+0x2a>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4a40      	ldr	r2, [pc, #256]	; (80028c0 <USB_SetTurnaroundTime+0x120>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d802      	bhi.n	80027ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80027c4:	230f      	movs	r3, #15
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	e062      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <USB_SetTurnaroundTime+0x120>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d906      	bls.n	80027e0 <USB_SetTurnaroundTime+0x40>
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	4a3b      	ldr	r2, [pc, #236]	; (80028c4 <USB_SetTurnaroundTime+0x124>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d802      	bhi.n	80027e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80027da:	230e      	movs	r3, #14
 80027dc:	617b      	str	r3, [r7, #20]
 80027de:	e057      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	4a38      	ldr	r2, [pc, #224]	; (80028c4 <USB_SetTurnaroundTime+0x124>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d906      	bls.n	80027f6 <USB_SetTurnaroundTime+0x56>
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	4a37      	ldr	r2, [pc, #220]	; (80028c8 <USB_SetTurnaroundTime+0x128>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d802      	bhi.n	80027f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80027f0:	230d      	movs	r3, #13
 80027f2:	617b      	str	r3, [r7, #20]
 80027f4:	e04c      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	4a33      	ldr	r2, [pc, #204]	; (80028c8 <USB_SetTurnaroundTime+0x128>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d906      	bls.n	800280c <USB_SetTurnaroundTime+0x6c>
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	4a32      	ldr	r2, [pc, #200]	; (80028cc <USB_SetTurnaroundTime+0x12c>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d802      	bhi.n	800280c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002806:	230c      	movs	r3, #12
 8002808:	617b      	str	r3, [r7, #20]
 800280a:	e041      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	4a2f      	ldr	r2, [pc, #188]	; (80028cc <USB_SetTurnaroundTime+0x12c>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d906      	bls.n	8002822 <USB_SetTurnaroundTime+0x82>
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	4a2e      	ldr	r2, [pc, #184]	; (80028d0 <USB_SetTurnaroundTime+0x130>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d802      	bhi.n	8002822 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800281c:	230b      	movs	r3, #11
 800281e:	617b      	str	r3, [r7, #20]
 8002820:	e036      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	4a2a      	ldr	r2, [pc, #168]	; (80028d0 <USB_SetTurnaroundTime+0x130>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d906      	bls.n	8002838 <USB_SetTurnaroundTime+0x98>
 800282a:	68bb      	ldr	r3, [r7, #8]
 800282c:	4a29      	ldr	r2, [pc, #164]	; (80028d4 <USB_SetTurnaroundTime+0x134>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d802      	bhi.n	8002838 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002832:	230a      	movs	r3, #10
 8002834:	617b      	str	r3, [r7, #20]
 8002836:	e02b      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	4a26      	ldr	r2, [pc, #152]	; (80028d4 <USB_SetTurnaroundTime+0x134>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d906      	bls.n	800284e <USB_SetTurnaroundTime+0xae>
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4a25      	ldr	r2, [pc, #148]	; (80028d8 <USB_SetTurnaroundTime+0x138>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d802      	bhi.n	800284e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002848:	2309      	movs	r3, #9
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	e020      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	4a21      	ldr	r2, [pc, #132]	; (80028d8 <USB_SetTurnaroundTime+0x138>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d906      	bls.n	8002864 <USB_SetTurnaroundTime+0xc4>
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	4a20      	ldr	r2, [pc, #128]	; (80028dc <USB_SetTurnaroundTime+0x13c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d802      	bhi.n	8002864 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800285e:	2308      	movs	r3, #8
 8002860:	617b      	str	r3, [r7, #20]
 8002862:	e015      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <USB_SetTurnaroundTime+0x13c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d906      	bls.n	800287a <USB_SetTurnaroundTime+0xda>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	4a1c      	ldr	r2, [pc, #112]	; (80028e0 <USB_SetTurnaroundTime+0x140>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d802      	bhi.n	800287a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002874:	2307      	movs	r3, #7
 8002876:	617b      	str	r3, [r7, #20]
 8002878:	e00a      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800287a:	2306      	movs	r3, #6
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	e007      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002880:	79fb      	ldrb	r3, [r7, #7]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d102      	bne.n	800288c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002886:	2309      	movs	r3, #9
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	e001      	b.n	8002890 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800288c:	2309      	movs	r3, #9
 800288e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	029b      	lsls	r3, r3, #10
 80028a4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80028a8:	431a      	orrs	r2, r3
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	00d8acbf 	.word	0x00d8acbf
 80028c0:	00e4e1bf 	.word	0x00e4e1bf
 80028c4:	00f423ff 	.word	0x00f423ff
 80028c8:	0106737f 	.word	0x0106737f
 80028cc:	011a499f 	.word	0x011a499f
 80028d0:	01312cff 	.word	0x01312cff
 80028d4:	014ca43f 	.word	0x014ca43f
 80028d8:	016e35ff 	.word	0x016e35ff
 80028dc:	01a6ab1f 	.word	0x01a6ab1f
 80028e0:	01e847ff 	.word	0x01e847ff

080028e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0201 	bic.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
 8002930:	460b      	mov	r3, r1
 8002932:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002940:	78fb      	ldrb	r3, [r7, #3]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d106      	bne.n	8002954 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	e00b      	b.n	800296c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002954:	78fb      	ldrb	r3, [r7, #3]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	60da      	str	r2, [r3, #12]
 8002966:	e001      	b.n	800296c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e003      	b.n	8002974 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800296c:	2032      	movs	r0, #50	; 0x32
 800296e:	f7fe f86f 	bl	8000a50 <HAL_Delay>

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800297c:	b084      	sub	sp, #16
 800297e:	b580      	push	{r7, lr}
 8002980:	b086      	sub	sp, #24
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800298a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	e009      	b.n	80029b0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	3340      	adds	r3, #64	; 0x40
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	2200      	movs	r2, #0
 80029a8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	3301      	adds	r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	2b0e      	cmp	r3, #14
 80029b4:	d9f2      	bls.n	800299c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80029b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d11c      	bne.n	80029f6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ca:	f043 0302 	orr.w	r3, r3, #2
 80029ce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38
 80029f4:	e00b      	b.n	8002a0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002a14:	461a      	mov	r2, r3
 8002a16:	2300      	movs	r3, #0
 8002a18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a20:	4619      	mov	r1, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a28:	461a      	mov	r2, r3
 8002a2a:	680b      	ldr	r3, [r1, #0]
 8002a2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d10c      	bne.n	8002a4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d104      	bne.n	8002a44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 f949 	bl	8002cd4 <USB_SetDevSpeed>
 8002a42:	e008      	b.n	8002a56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002a44:	2101      	movs	r1, #1
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f000 f944 	bl	8002cd4 <USB_SetDevSpeed>
 8002a4c:	e003      	b.n	8002a56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002a4e:	2103      	movs	r1, #3
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f000 f93f 	bl	8002cd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002a56:	2110      	movs	r1, #16
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f000 f8f3 	bl	8002c44 <USB_FlushTxFifo>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 f911 	bl	8002c90 <USB_FlushRxFifo>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a7e:	461a      	mov	r2, r3
 8002a80:	2300      	movs	r3, #0
 8002a82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a96:	461a      	mov	r2, r3
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e043      	b.n	8002b2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ab8:	d118      	bne.n	8002aec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002acc:	461a      	mov	r2, r3
 8002ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	e013      	b.n	8002afe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e008      	b.n	8002afe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	015a      	lsls	r2, r3, #5
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002af8:	461a      	mov	r2, r3
 8002afa:	2300      	movs	r3, #0
 8002afc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	015a      	lsls	r2, r3, #5
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	4413      	add	r3, r2
 8002b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	3301      	adds	r3, #1
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d3b7      	bcc.n	8002aa2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002b32:	2300      	movs	r3, #0
 8002b34:	613b      	str	r3, [r7, #16]
 8002b36:	e043      	b.n	8002bc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	015a      	lsls	r2, r3, #5
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4413      	add	r3, r2
 8002b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b4e:	d118      	bne.n	8002b82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d10a      	bne.n	8002b6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e013      	b.n	8002b94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b78:	461a      	mov	r2, r3
 8002b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002b7e:	6013      	str	r3, [r2, #0]
 8002b80:	e008      	b.n	8002b94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	015a      	lsls	r2, r3, #5
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	4413      	add	r3, r2
 8002b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b8e:	461a      	mov	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d3b7      	bcc.n	8002b38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	68fa      	ldr	r2, [r7, #12]
 8002bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002bda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8002be8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d105      	bne.n	8002bfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	4b0f      	ldr	r3, [pc, #60]	; (8002c40 <USB_DevInit+0x2c4>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d005      	beq.n	8002c1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f043 0208 	orr.w	r2, r3, #8
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3718      	adds	r7, #24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c3c:	b004      	add	sp, #16
 8002c3e:	4770      	bx	lr
 8002c40:	803c3800 	.word	0x803c3800

08002c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	019b      	lsls	r3, r3, #6
 8002c56:	f043 0220 	orr.w	r2, r3, #32
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	3301      	adds	r3, #1
 8002c62:	60fb      	str	r3, [r7, #12]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <USB_FlushTxFifo+0x48>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d901      	bls.n	8002c70 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e006      	b.n	8002c7e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b20      	cmp	r3, #32
 8002c7a:	d0f0      	beq.n	8002c5e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	00030d40 	.word	0x00030d40

08002c90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2210      	movs	r2, #16
 8002ca0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a09      	ldr	r2, [pc, #36]	; (8002cd0 <USB_FlushRxFifo+0x40>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d901      	bls.n	8002cb4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	e006      	b.n	8002cc2 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	691b      	ldr	r3, [r3, #16]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b10      	cmp	r3, #16
 8002cbe:	d0f0      	beq.n	8002ca2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	00030d40 	.word	0x00030d40

08002cd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	78fb      	ldrb	r3, [r7, #3]
 8002cee:	68f9      	ldr	r1, [r7, #12]
 8002cf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cf4:	4313      	orrs	r3, r2
 8002cf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr

08002d06 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b087      	sub	sp, #28
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0306 	and.w	r3, r3, #6
 8002d1e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d102      	bne.n	8002d2c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8002d26:	2300      	movs	r3, #0
 8002d28:	75fb      	strb	r3, [r7, #23]
 8002d2a:	e00a      	b.n	8002d42 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d002      	beq.n	8002d38 <USB_GetDevSpeed+0x32>
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d102      	bne.n	8002d3e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	75fb      	strb	r3, [r7, #23]
 8002d3c:	e001      	b.n	8002d42 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8002d3e:	230f      	movs	r3, #15
 8002d40:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8002d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	371c      	adds	r7, #28
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b085      	sub	sp, #20
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	785b      	ldrb	r3, [r3, #1]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d13a      	bne.n	8002de2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	69da      	ldr	r2, [r3, #28]
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	68f9      	ldr	r1, [r7, #12]
 8002d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d155      	bne.n	8002e50 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	78db      	ldrb	r3, [r3, #3]
 8002dbe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002dc0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	059b      	lsls	r3, r3, #22
 8002dc6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	68ba      	ldr	r2, [r7, #8]
 8002dcc:	0151      	lsls	r1, r2, #5
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	440a      	add	r2, r1
 8002dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	e036      	b.n	8002e50 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de8:	69da      	ldr	r2, [r3, #28]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	f003 030f 	and.w	r3, r3, #15
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	041b      	lsls	r3, r3, #16
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	015a      	lsls	r2, r3, #5
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d11a      	bne.n	8002e50 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	015a      	lsls	r2, r3, #5
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	4413      	add	r3, r2
 8002e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	78db      	ldrb	r3, [r3, #3]
 8002e34:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8002e36:	430b      	orrs	r3, r1
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	0151      	lsls	r1, r2, #5
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	440a      	add	r2, r1
 8002e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e4e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3714      	adds	r7, #20
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
	...

08002e60 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d161      	bne.n	8002f40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	015a      	lsls	r2, r3, #5
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4413      	add	r3, r2
 8002e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e8e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e92:	d11f      	bne.n	8002ed4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	0151      	lsls	r1, r2, #5
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002eae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002eb2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	68ba      	ldr	r2, [r7, #8]
 8002ec4:	0151      	lsls	r1, r2, #5
 8002ec6:	68fa      	ldr	r2, [r7, #12]
 8002ec8:	440a      	add	r2, r1
 8002eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002ece:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002ed2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	f003 030f 	and.w	r3, r3, #15
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	68f9      	ldr	r1, [r7, #12]
 8002ef0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	69da      	ldr	r2, [r3, #28]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	2101      	movs	r1, #1
 8002f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	68f9      	ldr	r1, [r7, #12]
 8002f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	0159      	lsls	r1, r3, #5
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	440b      	add	r3, r1
 8002f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f36:	4619      	mov	r1, r3
 8002f38:	4b35      	ldr	r3, [pc, #212]	; (8003010 <USB_DeactivateEndpoint+0x1b0>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]
 8002f3e:	e060      	b.n	8003002 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f56:	d11f      	bne.n	8002f98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	68ba      	ldr	r2, [r7, #8]
 8002f68:	0151      	lsls	r1, r2, #5
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	0151      	lsls	r1, r2, #5
 8002f8a:	68fa      	ldr	r2, [r7, #12]
 8002f8c:	440a      	add	r2, r1
 8002f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002f92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	781b      	ldrb	r3, [r3, #0]
 8002fa4:	f003 030f 	and.w	r3, r3, #15
 8002fa8:	2101      	movs	r1, #1
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	041b      	lsls	r3, r3, #16
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fb8:	4013      	ands	r3, r2
 8002fba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc2:	69da      	ldr	r2, [r3, #28]
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	041b      	lsls	r3, r3, #16
 8002fd4:	43db      	mvns	r3, r3
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	0159      	lsls	r1, r3, #5
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	4b05      	ldr	r3, [pc, #20]	; (8003014 <USB_DeactivateEndpoint+0x1b4>)
 8002ffe:	4013      	ands	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	ec337800 	.word	0xec337800
 8003014:	eff37800 	.word	0xeff37800

08003018 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b08a      	sub	sp, #40	; 0x28
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	4613      	mov	r3, r2
 8003024:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	785b      	ldrb	r3, [r3, #1]
 8003034:	2b01      	cmp	r3, #1
 8003036:	f040 815c 	bne.w	80032f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d132      	bne.n	80030a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	015a      	lsls	r2, r3, #5
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	4413      	add	r3, r2
 800304a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	0151      	lsls	r1, r2, #5
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	440a      	add	r2, r1
 8003058:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800305c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003060:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003064:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	015a      	lsls	r2, r3, #5
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	4413      	add	r3, r2
 800306e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003072:	691b      	ldr	r3, [r3, #16]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	0151      	lsls	r1, r2, #5
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	440a      	add	r2, r1
 800307c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003080:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003084:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	015a      	lsls	r2, r3, #5
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	4413      	add	r3, r2
 800308e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	0151      	lsls	r1, r2, #5
 8003098:	69fa      	ldr	r2, [r7, #28]
 800309a:	440a      	add	r2, r1
 800309c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030a0:	0cdb      	lsrs	r3, r3, #19
 80030a2:	04db      	lsls	r3, r3, #19
 80030a4:	6113      	str	r3, [r2, #16]
 80030a6:	e074      	b.n	8003192 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030c2:	0cdb      	lsrs	r3, r3, #19
 80030c4:	04db      	lsls	r3, r3, #19
 80030c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	015a      	lsls	r2, r3, #5
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	4413      	add	r3, r2
 80030d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	0151      	lsls	r1, r2, #5
 80030da:	69fa      	ldr	r2, [r7, #28]
 80030dc:	440a      	add	r2, r1
 80030de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80030e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80030e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80030ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	691a      	ldr	r2, [r3, #16]
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	6959      	ldr	r1, [r3, #20]
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	440b      	add	r3, r1
 8003104:	1e59      	subs	r1, r3, #1
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	fbb1 f3f3 	udiv	r3, r1, r3
 800310e:	04d9      	lsls	r1, r3, #19
 8003110:	4b9d      	ldr	r3, [pc, #628]	; (8003388 <USB_EPStartXfer+0x370>)
 8003112:	400b      	ands	r3, r1
 8003114:	69b9      	ldr	r1, [r7, #24]
 8003116:	0148      	lsls	r0, r1, #5
 8003118:	69f9      	ldr	r1, [r7, #28]
 800311a:	4401      	add	r1, r0
 800311c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003120:	4313      	orrs	r3, r2
 8003122:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003130:	691a      	ldr	r2, [r3, #16]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	0148      	lsls	r0, r1, #5
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	4401      	add	r1, r0
 8003142:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003146:	4313      	orrs	r3, r2
 8003148:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	78db      	ldrb	r3, [r3, #3]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d11f      	bne.n	8003192 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	015a      	lsls	r2, r3, #5
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	4413      	add	r3, r2
 800315a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800315e:	691b      	ldr	r3, [r3, #16]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	0151      	lsls	r1, r2, #5
 8003164:	69fa      	ldr	r2, [r7, #28]
 8003166:	440a      	add	r2, r1
 8003168:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800316c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003170:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	4413      	add	r3, r2
 800317a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	0151      	lsls	r1, r2, #5
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	440a      	add	r2, r1
 8003188:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800318c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003190:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d14b      	bne.n	8003230 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d009      	beq.n	80031b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	78db      	ldrb	r3, [r3, #3]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d128      	bne.n	800320e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d110      	bne.n	80031ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80031e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80031ea:	6013      	str	r3, [r2, #0]
 80031ec:	e00f      	b.n	800320e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	015a      	lsls	r2, r3, #5
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	4413      	add	r3, r2
 80031f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	0151      	lsls	r1, r2, #5
 8003200:	69fa      	ldr	r2, [r7, #28]
 8003202:	440a      	add	r2, r1
 8003204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	0151      	lsls	r1, r2, #5
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	440a      	add	r2, r1
 8003224:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003228:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e12f      	b.n	8003490 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003230:	69bb      	ldr	r3, [r7, #24]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	0151      	lsls	r1, r2, #5
 8003242:	69fa      	ldr	r2, [r7, #28]
 8003244:	440a      	add	r2, r1
 8003246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800324a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800324e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	78db      	ldrb	r3, [r3, #3]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d015      	beq.n	8003284 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8117 	beq.w	8003490 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	f003 030f 	and.w	r3, r3, #15
 8003272:	2101      	movs	r1, #1
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	69f9      	ldr	r1, [r7, #28]
 800327a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800327e:	4313      	orrs	r3, r2
 8003280:	634b      	str	r3, [r1, #52]	; 0x34
 8003282:	e105      	b.n	8003490 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003284:	69fb      	ldr	r3, [r7, #28]
 8003286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003290:	2b00      	cmp	r3, #0
 8003292:	d110      	bne.n	80032b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	015a      	lsls	r2, r3, #5
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	4413      	add	r3, r2
 800329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	0151      	lsls	r1, r2, #5
 80032a6:	69fa      	ldr	r2, [r7, #28]
 80032a8:	440a      	add	r2, r1
 80032aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e00f      	b.n	80032d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	0151      	lsls	r1, r2, #5
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	440a      	add	r2, r1
 80032cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	68d9      	ldr	r1, [r3, #12]
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781a      	ldrb	r2, [r3, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	b298      	uxth	r0, r3
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4603      	mov	r3, r0
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fa2b 	bl	8003746 <USB_WritePacket>
 80032f0:	e0ce      	b.n	8003490 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	0151      	lsls	r1, r2, #5
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	440a      	add	r2, r1
 8003308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800330c:	0cdb      	lsrs	r3, r3, #19
 800330e:	04db      	lsls	r3, r3, #19
 8003310:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	4413      	add	r3, r2
 800331a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	0151      	lsls	r1, r2, #5
 8003324:	69fa      	ldr	r2, [r7, #28]
 8003326:	440a      	add	r2, r1
 8003328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800332c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003334:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d126      	bne.n	800338c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	015a      	lsls	r2, r3, #5
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	4413      	add	r3, r2
 8003346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003354:	69b9      	ldr	r1, [r7, #24]
 8003356:	0148      	lsls	r0, r1, #5
 8003358:	69f9      	ldr	r1, [r7, #28]
 800335a:	4401      	add	r1, r0
 800335c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003360:	4313      	orrs	r3, r2
 8003362:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	4413      	add	r3, r2
 800336c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	0151      	lsls	r1, r2, #5
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	440a      	add	r2, r1
 800337a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800337e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003382:	6113      	str	r3, [r2, #16]
 8003384:	e036      	b.n	80033f4 <USB_EPStartXfer+0x3dc>
 8003386:	bf00      	nop
 8003388:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	695a      	ldr	r2, [r3, #20]
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	4413      	add	r3, r2
 8003396:	1e5a      	subs	r2, r3, #1
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	fbb2 f3f3 	udiv	r3, r2, r3
 80033a0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	8afb      	ldrh	r3, [r7, #22]
 80033b2:	04d9      	lsls	r1, r3, #19
 80033b4:	4b39      	ldr	r3, [pc, #228]	; (800349c <USB_EPStartXfer+0x484>)
 80033b6:	400b      	ands	r3, r1
 80033b8:	69b9      	ldr	r1, [r7, #24]
 80033ba:	0148      	lsls	r0, r1, #5
 80033bc:	69f9      	ldr	r1, [r7, #28]
 80033be:	4401      	add	r1, r0
 80033c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80033c4:	4313      	orrs	r3, r2
 80033c6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	8af9      	ldrh	r1, [r7, #22]
 80033dc:	fb01 f303 	mul.w	r3, r1, r3
 80033e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033e4:	69b9      	ldr	r1, [r7, #24]
 80033e6:	0148      	lsls	r0, r1, #5
 80033e8:	69f9      	ldr	r1, [r7, #28]
 80033ea:	4401      	add	r1, r0
 80033ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80033f0:	4313      	orrs	r3, r2
 80033f2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80033f4:	79fb      	ldrb	r3, [r7, #7]
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10d      	bne.n	8003416 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d009      	beq.n	8003416 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	68d9      	ldr	r1, [r3, #12]
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	015a      	lsls	r2, r3, #5
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	4413      	add	r3, r2
 800340e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003412:	460a      	mov	r2, r1
 8003414:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	78db      	ldrb	r3, [r3, #3]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d128      	bne.n	8003470 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342a:	2b00      	cmp	r3, #0
 800342c:	d110      	bne.n	8003450 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	015a      	lsls	r2, r3, #5
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	4413      	add	r3, r2
 8003436:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	0151      	lsls	r1, r2, #5
 8003440:	69fa      	ldr	r2, [r7, #28]
 8003442:	440a      	add	r2, r1
 8003444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003448:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800344c:	6013      	str	r3, [r2, #0]
 800344e:	e00f      	b.n	8003470 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	015a      	lsls	r2, r3, #5
 8003454:	69fb      	ldr	r3, [r7, #28]
 8003456:	4413      	add	r3, r2
 8003458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	69fa      	ldr	r2, [r7, #28]
 8003464:	440a      	add	r2, r1
 8003466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	015a      	lsls	r2, r3, #5
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	4413      	add	r3, r2
 8003478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	0151      	lsls	r1, r2, #5
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	440a      	add	r2, r1
 8003486:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800348a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800348e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	1ff80000 	.word	0x1ff80000

080034a0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b087      	sub	sp, #28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4613      	mov	r3, r2
 80034ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	f040 80cd 	bne.w	800365c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d132      	bne.n	8003530 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034e4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80034e8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80034ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034fa:	691b      	ldr	r3, [r3, #16]
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	0151      	lsls	r1, r2, #5
 8003500:	697a      	ldr	r2, [r7, #20]
 8003502:	440a      	add	r2, r1
 8003504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003508:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800350c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	015a      	lsls	r2, r3, #5
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	4413      	add	r3, r2
 8003516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	0151      	lsls	r1, r2, #5
 8003520:	697a      	ldr	r2, [r7, #20]
 8003522:	440a      	add	r2, r1
 8003524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003528:	0cdb      	lsrs	r3, r3, #19
 800352a:	04db      	lsls	r3, r3, #19
 800352c:	6113      	str	r3, [r2, #16]
 800352e:	e04e      	b.n	80035ce <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	0151      	lsls	r1, r2, #5
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	440a      	add	r2, r1
 8003546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800354a:	0cdb      	lsrs	r3, r3, #19
 800354c:	04db      	lsls	r3, r3, #19
 800354e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	4413      	add	r3, r2
 8003558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	0151      	lsls	r1, r2, #5
 8003562:	697a      	ldr	r2, [r7, #20]
 8003564:	440a      	add	r2, r1
 8003566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800356a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800356e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003572:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	695a      	ldr	r2, [r3, #20]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	429a      	cmp	r2, r3
 800357e:	d903      	bls.n	8003588 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003580:	68bb      	ldr	r3, [r7, #8]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	015a      	lsls	r2, r3, #5
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	4413      	add	r3, r2
 8003590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	697a      	ldr	r2, [r7, #20]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	691a      	ldr	r2, [r3, #16]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035be:	6939      	ldr	r1, [r7, #16]
 80035c0:	0148      	lsls	r0, r1, #5
 80035c2:	6979      	ldr	r1, [r7, #20]
 80035c4:	4401      	add	r1, r0
 80035c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80035ca:	4313      	orrs	r3, r2
 80035cc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11e      	bne.n	8003612 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e8:	461a      	mov	r2, r3
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	691b      	ldr	r3, [r3, #16]
 80035ee:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	0151      	lsls	r1, r2, #5
 8003602:	697a      	ldr	r2, [r7, #20]
 8003604:	440a      	add	r2, r1
 8003606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800360a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800360e:	6013      	str	r3, [r2, #0]
 8003610:	e092      	b.n	8003738 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	015a      	lsls	r2, r3, #5
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	4413      	add	r3, r2
 800361a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	0151      	lsls	r1, r2, #5
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	440a      	add	r2, r1
 8003628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800362c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003630:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d07e      	beq.n	8003738 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003640:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	2101      	movs	r1, #1
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	6979      	ldr	r1, [r7, #20]
 8003652:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003656:	4313      	orrs	r3, r2
 8003658:	634b      	str	r3, [r1, #52]	; 0x34
 800365a:	e06d      	b.n	8003738 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	015a      	lsls	r2, r3, #5
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	4413      	add	r3, r2
 8003664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	0151      	lsls	r1, r2, #5
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	440a      	add	r2, r1
 8003672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003676:	0cdb      	lsrs	r3, r3, #19
 8003678:	04db      	lsls	r3, r3, #19
 800367a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4413      	add	r3, r2
 8003684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	0151      	lsls	r1, r2, #5
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	440a      	add	r2, r1
 8003692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003696:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800369a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800369e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	015a      	lsls	r2, r3, #5
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	4413      	add	r3, r2
 80036b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	0151      	lsls	r1, r2, #5
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	440a      	add	r2, r1
 80036c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80036ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	691a      	ldr	r2, [r3, #16]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e6:	6939      	ldr	r1, [r7, #16]
 80036e8:	0148      	lsls	r0, r1, #5
 80036ea:	6979      	ldr	r1, [r7, #20]
 80036ec:	4401      	add	r1, r0
 80036ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80036f2:	4313      	orrs	r3, r2
 80036f4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80036f6:	79fb      	ldrb	r3, [r7, #7]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10d      	bne.n	8003718 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d009      	beq.n	8003718 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	68d9      	ldr	r1, [r3, #12]
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	460a      	mov	r2, r1
 8003716:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	697b      	ldr	r3, [r7, #20]
 800371e:	4413      	add	r3, r2
 8003720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	0151      	lsls	r1, r2, #5
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	440a      	add	r2, r1
 800372e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003732:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003736:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003746:	b480      	push	{r7}
 8003748:	b089      	sub	sp, #36	; 0x24
 800374a:	af00      	add	r7, sp, #0
 800374c:	60f8      	str	r0, [r7, #12]
 800374e:	60b9      	str	r1, [r7, #8]
 8003750:	4611      	mov	r1, r2
 8003752:	461a      	mov	r2, r3
 8003754:	460b      	mov	r3, r1
 8003756:	71fb      	strb	r3, [r7, #7]
 8003758:	4613      	mov	r3, r2
 800375a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003764:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11a      	bne.n	80037a2 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800376c:	88bb      	ldrh	r3, [r7, #4]
 800376e:	3303      	adds	r3, #3
 8003770:	089b      	lsrs	r3, r3, #2
 8003772:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003774:	2300      	movs	r3, #0
 8003776:	61bb      	str	r3, [r7, #24]
 8003778:	e00f      	b.n	800379a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800377a:	79fb      	ldrb	r3, [r7, #7]
 800377c:	031a      	lsls	r2, r3, #12
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	4413      	add	r3, r2
 8003782:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003786:	461a      	mov	r2, r3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	3304      	adds	r3, #4
 8003792:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	3301      	adds	r3, #1
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d3eb      	bcc.n	800377a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3724      	adds	r7, #36	; 0x24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b089      	sub	sp, #36	; 0x24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	3303      	adds	r3, #3
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80037ce:	2300      	movs	r3, #0
 80037d0:	61bb      	str	r3, [r7, #24]
 80037d2:	e00b      	b.n	80037ec <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	601a      	str	r2, [r3, #0]
    pDest++;
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	3304      	adds	r3, #4
 80037e4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80037e6:	69bb      	ldr	r3, [r7, #24]
 80037e8:	3301      	adds	r3, #1
 80037ea:	61bb      	str	r3, [r7, #24]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d3ef      	bcc.n	80037d4 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80037f4:	69fb      	ldr	r3, [r7, #28]
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3724      	adds	r7, #36	; 0x24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr

08003802 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003802:	b480      	push	{r7}
 8003804:	b085      	sub	sp, #20
 8003806:	af00      	add	r7, sp, #0
 8003808:	6078      	str	r0, [r7, #4]
 800380a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	785b      	ldrb	r3, [r3, #1]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d12c      	bne.n	8003878 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4413      	add	r3, r2
 8003826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2b00      	cmp	r3, #0
 800382e:	db12      	blt.n	8003856 <USB_EPSetStall+0x54>
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d00f      	beq.n	8003856 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	015a      	lsls	r2, r3, #5
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	4413      	add	r3, r2
 800383e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	0151      	lsls	r1, r2, #5
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	440a      	add	r2, r1
 800384c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003850:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003854:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	015a      	lsls	r2, r3, #5
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4413      	add	r3, r2
 800385e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	0151      	lsls	r1, r2, #5
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	440a      	add	r2, r1
 800386c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003874:	6013      	str	r3, [r2, #0]
 8003876:	e02b      	b.n	80038d0 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	015a      	lsls	r2, r3, #5
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4413      	add	r3, r2
 8003880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db12      	blt.n	80038b0 <USB_EPSetStall+0xae>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d00f      	beq.n	80038b0 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4413      	add	r3, r2
 8003898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68ba      	ldr	r2, [r7, #8]
 80038a0:	0151      	lsls	r1, r2, #5
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	440a      	add	r2, r1
 80038a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80038ae:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	0151      	lsls	r1, r2, #5
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	440a      	add	r2, r1
 80038c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80038ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr

080038de <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80038de:	b480      	push	{r7}
 80038e0:	b085      	sub	sp, #20
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
 80038e6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	785b      	ldrb	r3, [r3, #1]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d128      	bne.n	800394c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	015a      	lsls	r2, r3, #5
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68ba      	ldr	r2, [r7, #8]
 800390a:	0151      	lsls	r1, r2, #5
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	440a      	add	r2, r1
 8003910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003918:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	78db      	ldrb	r3, [r3, #3]
 800391e:	2b03      	cmp	r3, #3
 8003920:	d003      	beq.n	800392a <USB_EPClearStall+0x4c>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	78db      	ldrb	r3, [r3, #3]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d138      	bne.n	800399c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	015a      	lsls	r2, r3, #5
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4413      	add	r3, r2
 8003932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68ba      	ldr	r2, [r7, #8]
 800393a:	0151      	lsls	r1, r2, #5
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	440a      	add	r2, r1
 8003940:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003948:	6013      	str	r3, [r2, #0]
 800394a:	e027      	b.n	800399c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	0151      	lsls	r1, r2, #5
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	440a      	add	r2, r1
 8003962:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003966:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800396a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	78db      	ldrb	r3, [r3, #3]
 8003970:	2b03      	cmp	r3, #3
 8003972:	d003      	beq.n	800397c <USB_EPClearStall+0x9e>
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	78db      	ldrb	r3, [r3, #3]
 8003978:	2b02      	cmp	r3, #2
 800397a:	d10f      	bne.n	800399c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	0151      	lsls	r1, r2, #5
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	440a      	add	r2, r1
 8003992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003996:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800399a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b085      	sub	sp, #20
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039c8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80039cc:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	78fb      	ldrb	r3, [r7, #3]
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80039de:	68f9      	ldr	r1, [r7, #12]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e4:	4313      	orrs	r3, r2
 80039e6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3714      	adds	r7, #20
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80039f6:	b580      	push	{r7, lr}
 80039f8:	b084      	sub	sp, #16
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a10:	f023 0302 	bic.w	r3, r3, #2
 8003a14:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003a16:	2003      	movs	r0, #3
 8003a18:	f7fd f81a 	bl	8000a50 <HAL_Delay>

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003a26:	b580      	push	{r7, lr}
 8003a28:	b084      	sub	sp, #16
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a40:	f043 0302 	orr.w	r3, r3, #2
 8003a44:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8003a46:	2003      	movs	r0, #3
 8003a48:	f7fd f802 	bl	8000a50 <HAL_Delay>

  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b085      	sub	sp, #20
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	695b      	ldr	r3, [r3, #20]
 8003a62:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b085      	sub	sp, #20
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	0c1b      	lsrs	r3, r3, #16
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3714      	adds	r7, #20
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	b29b      	uxth	r3, r3
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	460b      	mov	r3, r1
 8003aee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003af4:	78fb      	ldrb	r3, [r7, #3]
 8003af6:	015a      	lsls	r2, r3, #5
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4413      	add	r3, r2
 8003afc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b00:	689b      	ldr	r3, [r3, #8]
 8003b02:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003b12:	68bb      	ldr	r3, [r7, #8]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b087      	sub	sp, #28
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b42:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f003 030f 	and.w	r3, r3, #15
 8003b4a:	68fa      	ldr	r2, [r7, #12]
 8003b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b50:	01db      	lsls	r3, r3, #7
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	371c      	adds	r7, #28
 8003b74:	46bd      	mov	sp, r7
 8003b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7a:	4770      	bx	lr

08003b7c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f003 0301 	and.w	r3, r3, #1
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b085      	sub	sp, #20
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003bb6:	f023 0307 	bic.w	r3, r3, #7
 8003bba:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	68fa      	ldr	r2, [r7, #12]
 8003bc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bce:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
	...

08003be0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b087      	sub	sp, #28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	460b      	mov	r3, r1
 8003bea:	607a      	str	r2, [r7, #4]
 8003bec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	333c      	adds	r3, #60	; 0x3c
 8003bf6:	3304      	adds	r3, #4
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <USB_EP0_OutStart+0xb8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d90a      	bls.n	8003c1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c14:	d101      	bne.n	8003c1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	e037      	b.n	8003c8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c20:	461a      	mov	r2, r3
 8003c22:	2300      	movs	r3, #0
 8003c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c48:	f043 0318 	orr.w	r3, r3, #24
 8003c4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8003c60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8003c62:	7afb      	ldrb	r3, [r7, #11]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d10f      	bne.n	8003c88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c6e:	461a      	mov	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8003c86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	371c      	adds	r7, #28
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	4f54300a 	.word	0x4f54300a

08003c9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4a13      	ldr	r2, [pc, #76]	; (8003d00 <USB_CoreReset+0x64>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e01b      	b.n	8003cf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	daf2      	bge.n	8003ca8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f043 0201 	orr.w	r2, r3, #1
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	4a09      	ldr	r2, [pc, #36]	; (8003d00 <USB_CoreReset+0x64>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d901      	bls.n	8003ce4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e006      	b.n	8003cf2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d0f0      	beq.n	8003cd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	00030d40 	.word	0x00030d40

08003d04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003d0c:	4a04      	ldr	r2, [pc, #16]	; (8003d20 <LL_SetSystemCoreClock+0x1c>)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6013      	str	r3, [r2, #0]
}
 8003d12:	bf00      	nop
 8003d14:	370c      	adds	r7, #12
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000000 	.word	0x20000000

08003d24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003d30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003d34:	f002 f8d6 	bl	8005ee4 <malloc>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d105      	bne.n	8003d4e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e066      	b.n	8003e1c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	7c1b      	ldrb	r3, [r3, #16]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d119      	bne.n	8003d92 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d62:	2202      	movs	r2, #2
 8003d64:	2181      	movs	r1, #129	; 0x81
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f001 ff43 	bl	8005bf2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003d72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003d76:	2202      	movs	r2, #2
 8003d78:	2101      	movs	r1, #1
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f001 ff39 	bl	8005bf2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2210      	movs	r2, #16
 8003d8c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8003d90:	e016      	b.n	8003dc0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003d92:	2340      	movs	r3, #64	; 0x40
 8003d94:	2202      	movs	r2, #2
 8003d96:	2181      	movs	r1, #129	; 0x81
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f001 ff2a 	bl	8005bf2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003da4:	2340      	movs	r3, #64	; 0x40
 8003da6:	2202      	movs	r2, #2
 8003da8:	2101      	movs	r1, #1
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f001 ff21 	bl	8005bf2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2210      	movs	r2, #16
 8003dbc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003dc0:	2308      	movs	r3, #8
 8003dc2:	2203      	movs	r2, #3
 8003dc4:	2182      	movs	r1, #130	; 0x82
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f001 ff13 	bl	8005bf2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7c1b      	ldrb	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d109      	bne.n	8003e0a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e00:	2101      	movs	r1, #1
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f001 ffe4 	bl	8005dd0 <USBD_LL_PrepareReceive>
 8003e08:	e007      	b.n	8003e1a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003e10:	2340      	movs	r3, #64	; 0x40
 8003e12:	2101      	movs	r1, #1
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f001 ffdb 	bl	8005dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003e34:	2181      	movs	r1, #129	; 0x81
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f001 ff01 	bl	8005c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003e42:	2101      	movs	r1, #1
 8003e44:	6878      	ldr	r0, [r7, #4]
 8003e46:	f001 fefa 	bl	8005c3e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003e52:	2182      	movs	r1, #130	; 0x82
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f001 fef2 	bl	8005c3e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00e      	beq.n	8003e92 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 f835 	bl	8005ef4 <free>
    pdev->pClassData = NULL;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8003e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3710      	adds	r7, #16
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003eac:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d03a      	beq.n	8003f3c <USBD_CDC_Setup+0xa0>
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	f040 8097 	bne.w	8003ffa <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	88db      	ldrh	r3, [r3, #6]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d029      	beq.n	8003f28 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	b25b      	sxtb	r3, r3
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da11      	bge.n	8003f02 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8003eea:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	88d2      	ldrh	r2, [r2, #6]
 8003ef0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8003ef2:	6939      	ldr	r1, [r7, #16]
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	88db      	ldrh	r3, [r3, #6]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f001 fa6d 	bl	80053da <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8003f00:	e082      	b.n	8004008 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	785a      	ldrb	r2, [r3, #1]
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	88db      	ldrh	r3, [r3, #6]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8003f18:	6939      	ldr	r1, [r7, #16]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	88db      	ldrh	r3, [r3, #6]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f001 fa86 	bl	8005432 <USBD_CtlPrepareRx>
    break;
 8003f26:	e06f      	b.n	8004008 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	683a      	ldr	r2, [r7, #0]
 8003f32:	7850      	ldrb	r0, [r2, #1]
 8003f34:	2200      	movs	r2, #0
 8003f36:	6839      	ldr	r1, [r7, #0]
 8003f38:	4798      	blx	r3
    break;
 8003f3a:	e065      	b.n	8004008 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	785b      	ldrb	r3, [r3, #1]
 8003f40:	2b0b      	cmp	r3, #11
 8003f42:	d84f      	bhi.n	8003fe4 <USBD_CDC_Setup+0x148>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <USBD_CDC_Setup+0xb0>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f7d 	.word	0x08003f7d
 8003f50:	08003ff3 	.word	0x08003ff3
 8003f54:	08003fe5 	.word	0x08003fe5
 8003f58:	08003fe5 	.word	0x08003fe5
 8003f5c:	08003fe5 	.word	0x08003fe5
 8003f60:	08003fe5 	.word	0x08003fe5
 8003f64:	08003fe5 	.word	0x08003fe5
 8003f68:	08003fe5 	.word	0x08003fe5
 8003f6c:	08003fe5 	.word	0x08003fe5
 8003f70:	08003fe5 	.word	0x08003fe5
 8003f74:	08003fa5 	.word	0x08003fa5
 8003f78:	08003fcd 	.word	0x08003fcd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	d107      	bne.n	8003f96 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8003f86:	f107 030c 	add.w	r3, r7, #12
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f001 fa23 	bl	80053da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8003f94:	e030      	b.n	8003ff8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8003f96:	6839      	ldr	r1, [r7, #0]
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f001 f9ad 	bl	80052f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa2:	e029      	b.n	8003ff8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003faa:	2b03      	cmp	r3, #3
 8003fac:	d107      	bne.n	8003fbe <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8003fae:	f107 030f 	add.w	r3, r7, #15
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f001 fa0f 	bl	80053da <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8003fbc:	e01c      	b.n	8003ff8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8003fbe:	6839      	ldr	r1, [r7, #0]
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f001 f999 	bl	80052f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8003fca:	e015      	b.n	8003ff8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003fd2:	2b03      	cmp	r3, #3
 8003fd4:	d00f      	beq.n	8003ff6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8003fd6:	6839      	ldr	r1, [r7, #0]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f001 f98d 	bl	80052f8 <USBD_CtlError>
        ret = USBD_FAIL;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003fe2:	e008      	b.n	8003ff6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8003fe4:	6839      	ldr	r1, [r7, #0]
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f001 f986 	bl	80052f8 <USBD_CtlError>
      ret = USBD_FAIL;
 8003fec:	2303      	movs	r3, #3
 8003fee:	75fb      	strb	r3, [r7, #23]
      break;
 8003ff0:	e002      	b.n	8003ff8 <USBD_CDC_Setup+0x15c>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e008      	b.n	8004008 <USBD_CDC_Setup+0x16c>
      break;
 8003ff6:	bf00      	nop
    }
    break;
 8003ff8:	e006      	b.n	8004008 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f001 f97b 	bl	80052f8 <USBD_CtlError>
    ret = USBD_FAIL;
 8004002:	2303      	movs	r3, #3
 8004004:	75fb      	strb	r3, [r7, #23]
    break;
 8004006:	bf00      	nop
  }

  return (uint8_t)ret;
 8004008:	7dfb      	ldrb	r3, [r7, #23]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop

08004014 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	460b      	mov	r3, r1
 800401e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004026:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004032:	2303      	movs	r3, #3
 8004034:	e049      	b.n	80040ca <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800403c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3318      	adds	r3, #24
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d029      	beq.n	80040a8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3318      	adds	r3, #24
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	78f9      	ldrb	r1, [r7, #3]
 8004068:	68f8      	ldr	r0, [r7, #12]
 800406a:	460b      	mov	r3, r1
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	1a5b      	subs	r3, r3, r1
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	4403      	add	r3, r0
 8004074:	3344      	adds	r3, #68	; 0x44
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	fbb2 f1f3 	udiv	r1, r2, r3
 800407c:	fb03 f301 	mul.w	r3, r3, r1
 8004080:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004082:	2b00      	cmp	r3, #0
 8004084:	d110      	bne.n	80040a8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3318      	adds	r3, #24
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800409a:	78f9      	ldrb	r1, [r7, #3]
 800409c:	2300      	movs	r3, #0
 800409e:	2200      	movs	r2, #0
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f001 fe74 	bl	8005d8e <USBD_LL_Transmit>
 80040a6:	e00f      	b.n	80040c8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80040c8:	2300      	movs	r3, #0
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3710      	adds	r7, #16
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	460b      	mov	r3, r1
 80040dc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040e4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d101      	bne.n	80040f4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e015      	b.n	8004120 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	4619      	mov	r1, r3
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f001 fe8a 	bl	8005e12 <USBD_LL_GetRxDataSize>
 80040fe:	4602      	mov	r2, r0
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800411a:	4611      	mov	r1, r2
 800411c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004136:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d015      	beq.n	800416e <USBD_CDC_EP0_RxReady+0x46>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004148:	2bff      	cmp	r3, #255	; 0xff
 800414a:	d010      	beq.n	800416e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800415a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800415c:	68fa      	ldr	r2, [r7, #12]
 800415e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004162:	b292      	uxth	r2, r2
 8004164:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	22ff      	movs	r2, #255	; 0xff
 800416a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800416e:	2300      	movs	r3, #0
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004178:	b480      	push	{r7}
 800417a:	b083      	sub	sp, #12
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2243      	movs	r2, #67	; 0x43
 8004184:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8004186:	4b03      	ldr	r3, [pc, #12]	; (8004194 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	20000094 	.word	0x20000094

08004198 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2243      	movs	r2, #67	; 0x43
 80041a4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80041a6:	4b03      	ldr	r3, [pc, #12]	; (80041b4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr
 80041b4:	20000050 	.word	0x20000050

080041b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2243      	movs	r2, #67	; 0x43
 80041c4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80041c6:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	200000d8 	.word	0x200000d8

080041d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	220a      	movs	r2, #10
 80041e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80041e6:	4b03      	ldr	r3, [pc, #12]	; (80041f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	2000000c 	.word	0x2000000c

080041f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004208:	2303      	movs	r3, #3
 800420a:	e004      	b.n	8004216 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	683a      	ldr	r2, [r7, #0]
 8004210:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004222:	b480      	push	{r7}
 8004224:	b087      	sub	sp, #28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004234:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	68ba      	ldr	r2, [r7, #8]
 800423a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	371c      	adds	r7, #28
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004264:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	683a      	ldr	r2, [r7, #0]
 800426a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800426e:	2300      	movs	r3, #0
}
 8004270:	4618      	mov	r0, r3
 8004272:	3714      	adds	r7, #20
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800428a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8004296:	2303      	movs	r3, #3
 8004298:	e016      	b.n	80042c8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	7c1b      	ldrb	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d109      	bne.n	80042b6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80042ac:	2101      	movs	r1, #1
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f001 fd8e 	bl	8005dd0 <USBD_LL_PrepareReceive>
 80042b4:	e007      	b.n	80042c6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80042bc:	2340      	movs	r3, #64	; 0x40
 80042be:	2101      	movs	r1, #1
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f001 fd85 	bl	8005dd0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	4613      	mov	r3, r2
 80042dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e025      	b.n	8004334 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004300:	2b00      	cmp	r3, #0
 8004302:	d003      	beq.n	800430c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	79fa      	ldrb	r2, [r7, #7]
 8004326:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f001 fbfb 	bl	8005b24 <USBD_LL_Init>
 800432e:	4603      	mov	r3, r0
 8004330:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004332:	7dfb      	ldrb	r3, [r7, #23]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d101      	bne.n	8004354 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8004350:	2303      	movs	r3, #3
 8004352:	e010      	b.n	8004376 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	683a      	ldr	r2, [r7, #0]
 8004358:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004364:	f107 020e 	add.w	r2, r7, #14
 8004368:	4610      	mov	r0, r2
 800436a:	4798      	blx	r3
 800436c:	4602      	mov	r2, r0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b082      	sub	sp, #8
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f001 fc18 	bl	8005bbc <USBD_LL_Start>
 800438c:	4603      	mov	r3, r0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80043b8:	2303      	movs	r3, #3
 80043ba:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d009      	beq.n	80043da <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	4611      	mov	r1, r2
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	4798      	blx	r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80043da:	7bfb      	ldrb	r3, [r7, #15]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b082      	sub	sp, #8
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	460b      	mov	r3, r1
 80043ee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d007      	beq.n	800440a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	78fa      	ldrb	r2, [r7, #3]
 8004404:	4611      	mov	r1, r2
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
  }

  return USBD_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004424:	6839      	ldr	r1, [r7, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f000 ff2c 	bl	8005284 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2b01      	cmp	r3, #1
 800444e:	d00e      	beq.n	800446e <USBD_LL_SetupStage+0x5a>
 8004450:	2b01      	cmp	r3, #1
 8004452:	d302      	bcc.n	800445a <USBD_LL_SetupStage+0x46>
 8004454:	2b02      	cmp	r3, #2
 8004456:	d014      	beq.n	8004482 <USBD_LL_SetupStage+0x6e>
 8004458:	e01d      	b.n	8004496 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004460:	4619      	mov	r1, r3
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa18 	bl	8004898 <USBD_StdDevReq>
 8004468:	4603      	mov	r3, r0
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e020      	b.n	80044b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004474:	4619      	mov	r1, r3
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 fa7c 	bl	8004974 <USBD_StdItfReq>
 800447c:	4603      	mov	r3, r0
 800447e:	73fb      	strb	r3, [r7, #15]
      break;
 8004480:	e016      	b.n	80044b0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004488:	4619      	mov	r1, r3
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fab8 	bl	8004a00 <USBD_StdEPReq>
 8004490:	4603      	mov	r3, r0
 8004492:	73fb      	strb	r3, [r7, #15]
      break;
 8004494:	e00c      	b.n	80044b0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800449c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	4619      	mov	r1, r3
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f001 fbe9 	bl	8005c7c <USBD_LL_StallEP>
 80044aa:	4603      	mov	r3, r0
 80044ac:	73fb      	strb	r3, [r7, #15]
      break;
 80044ae:	bf00      	nop
  }

  return ret;
 80044b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b086      	sub	sp, #24
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	460b      	mov	r3, r1
 80044c4:	607a      	str	r2, [r7, #4]
 80044c6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80044c8:	7afb      	ldrb	r3, [r7, #11]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d137      	bne.n	800453e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80044d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d14a      	bne.n	8004576 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	689a      	ldr	r2, [r3, #8]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d913      	bls.n	8004514 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	689a      	ldr	r2, [r3, #8]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	68da      	ldr	r2, [r3, #12]
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4293      	cmp	r3, r2
 8004504:	bf28      	it	cs
 8004506:	4613      	movcs	r3, r2
 8004508:	461a      	mov	r2, r3
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 ffad 	bl	800546c <USBD_CtlContinueRx>
 8004512:	e030      	b.n	8004576 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d00a      	beq.n	8004536 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004526:	2b03      	cmp	r3, #3
 8004528:	d105      	bne.n	8004536 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8004536:	68f8      	ldr	r0, [r7, #12]
 8004538:	f000 ffa9 	bl	800548e <USBD_CtlSendStatus>
 800453c:	e01b      	b.n	8004576 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d013      	beq.n	8004572 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8004550:	2b03      	cmp	r3, #3
 8004552:	d10e      	bne.n	8004572 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	7afa      	ldrb	r2, [r7, #11]
 800455e:	4611      	mov	r1, r2
 8004560:	68f8      	ldr	r0, [r7, #12]
 8004562:	4798      	blx	r3
 8004564:	4603      	mov	r3, r0
 8004566:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	e002      	b.n	8004578 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004572:	2303      	movs	r3, #3
 8004574:	e000      	b.n	8004578 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	460b      	mov	r3, r1
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800458e:	7afb      	ldrb	r3, [r7, #11]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d16a      	bne.n	800466a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3314      	adds	r3, #20
 8004598:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d155      	bne.n	8004650 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d914      	bls.n	80045da <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	1ad2      	subs	r2, r2, r3
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	461a      	mov	r2, r3
 80045c4:	6879      	ldr	r1, [r7, #4]
 80045c6:	68f8      	ldr	r0, [r7, #12]
 80045c8:	f000 ff22 	bl	8005410 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80045cc:	2300      	movs	r3, #0
 80045ce:	2200      	movs	r2, #0
 80045d0:	2100      	movs	r1, #0
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f001 fbfc 	bl	8005dd0 <USBD_LL_PrepareReceive>
 80045d8:	e03a      	b.n	8004650 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d11c      	bne.n	8004620 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	685a      	ldr	r2, [r3, #4]
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d316      	bcc.n	8004620 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d20f      	bcs.n	8004620 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004600:	2200      	movs	r2, #0
 8004602:	2100      	movs	r1, #0
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f000 ff03 	bl	8005410 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	2200      	movs	r2, #0
 800460e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004612:	2300      	movs	r3, #0
 8004614:	2200      	movs	r2, #0
 8004616:	2100      	movs	r1, #0
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f001 fbd9 	bl	8005dd0 <USBD_LL_PrepareReceive>
 800461e:	e017      	b.n	8004650 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004632:	2b03      	cmp	r3, #3
 8004634:	d105      	bne.n	8004642 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004642:	2180      	movs	r1, #128	; 0x80
 8004644:	68f8      	ldr	r0, [r7, #12]
 8004646:	f001 fb19 	bl	8005c7c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 ff32 	bl	80054b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d123      	bne.n	80046a2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f7ff fe9b 	bl	8004396 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004668:	e01b      	b.n	80046a2 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800467c:	2b03      	cmp	r3, #3
 800467e:	d10e      	bne.n	800469e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	7afa      	ldrb	r2, [r7, #11]
 800468a:	4611      	mov	r1, r2
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	4798      	blx	r3
 8004690:	4603      	mov	r3, r0
 8004692:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004694:	7dfb      	ldrb	r3, [r7, #23]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800469a:	7dfb      	ldrb	r3, [r7, #23]
 800469c:	e002      	b.n	80046a4 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800469e:	2303      	movs	r3, #3
 80046a0:	e000      	b.n	80046a4 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3718      	adds	r7, #24
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	6852      	ldr	r2, [r2, #4]
 80046e8:	b2d2      	uxtb	r2, r2
 80046ea:	4611      	mov	r1, r2
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80046f0:	2340      	movs	r3, #64	; 0x40
 80046f2:	2200      	movs	r2, #0
 80046f4:	2100      	movs	r1, #0
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 fa7b 	bl	8005bf2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2240      	movs	r2, #64	; 0x40
 8004708:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800470c:	2340      	movs	r3, #64	; 0x40
 800470e:	2200      	movs	r2, #0
 8004710:	2180      	movs	r1, #128	; 0x80
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 fa6d 	bl	8005bf2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3708      	adds	r7, #8
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}

0800472e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800472e:	b480      	push	{r7}
 8004730:	b083      	sub	sp, #12
 8004732:	af00      	add	r7, sp, #0
 8004734:	6078      	str	r0, [r7, #4]
 8004736:	460b      	mov	r3, r1
 8004738:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2204      	movs	r2, #4
 8004766:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004786:	2b04      	cmp	r3, #4
 8004788:	d105      	bne.n	8004796 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d10b      	bne.n	80047ce <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047bc:	69db      	ldr	r3, [r3, #28]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d005      	beq.n	80047ce <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	460b      	mov	r3, r1
 80047e2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	460b      	mov	r3, r1
 80047fc:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	370c      	adds	r7, #12
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800480c:	b480      	push	{r7}
 800480e:	b083      	sub	sp, #12
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b082      	sub	sp, #8
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004838:	2b00      	cmp	r3, #0
 800483a:	d009      	beq.n	8004850 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	6852      	ldr	r2, [r2, #4]
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	4611      	mov	r1, r2
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	4798      	blx	r3
  }

  return USBD_OK;
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3708      	adds	r7, #8
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800485a:	b480      	push	{r7}
 800485c:	b087      	sub	sp, #28
 800485e:	af00      	add	r7, sp, #0
 8004860:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	3301      	adds	r3, #1
 8004870:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004878:	8a3b      	ldrh	r3, [r7, #16]
 800487a:	021b      	lsls	r3, r3, #8
 800487c:	b21a      	sxth	r2, r3
 800487e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004882:	4313      	orrs	r3, r2
 8004884:	b21b      	sxth	r3, r3
 8004886:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004888:	89fb      	ldrh	r3, [r7, #14]
}
 800488a:	4618      	mov	r0, r3
 800488c:	371c      	adds	r7, #28
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
	...

08004898 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80048ae:	2b20      	cmp	r3, #32
 80048b0:	d004      	beq.n	80048bc <USBD_StdDevReq+0x24>
 80048b2:	2b40      	cmp	r3, #64	; 0x40
 80048b4:	d002      	beq.n	80048bc <USBD_StdDevReq+0x24>
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <USBD_StdDevReq+0x38>
 80048ba:	e050      	b.n	800495e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	6839      	ldr	r1, [r7, #0]
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
 80048ca:	4603      	mov	r3, r0
 80048cc:	73fb      	strb	r3, [r7, #15]
    break;
 80048ce:	e04b      	b.n	8004968 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	785b      	ldrb	r3, [r3, #1]
 80048d4:	2b09      	cmp	r3, #9
 80048d6:	d83c      	bhi.n	8004952 <USBD_StdDevReq+0xba>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <USBD_StdDevReq+0x48>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004935 	.word	0x08004935
 80048e4:	08004949 	.word	0x08004949
 80048e8:	08004953 	.word	0x08004953
 80048ec:	0800493f 	.word	0x0800493f
 80048f0:	08004953 	.word	0x08004953
 80048f4:	08004913 	.word	0x08004913
 80048f8:	08004909 	.word	0x08004909
 80048fc:	08004953 	.word	0x08004953
 8004900:	0800492b 	.word	0x0800492b
 8004904:	0800491d 	.word	0x0800491d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004908:	6839      	ldr	r1, [r7, #0]
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f9ce 	bl	8004cac <USBD_GetDescriptor>
      break;
 8004910:	e024      	b.n	800495c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004912:	6839      	ldr	r1, [r7, #0]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fb33 	bl	8004f80 <USBD_SetAddress>
      break;
 800491a:	e01f      	b.n	800495c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800491c:	6839      	ldr	r1, [r7, #0]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fb70 	bl	8005004 <USBD_SetConfig>
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]
      break;
 8004928:	e018      	b.n	800495c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800492a:	6839      	ldr	r1, [r7, #0]
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 fc0d 	bl	800514c <USBD_GetConfig>
      break;
 8004932:	e013      	b.n	800495c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 fc3c 	bl	80051b4 <USBD_GetStatus>
      break;
 800493c:	e00e      	b.n	800495c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800493e:	6839      	ldr	r1, [r7, #0]
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fc6a 	bl	800521a <USBD_SetFeature>
      break;
 8004946:	e009      	b.n	800495c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fc79 	bl	8005242 <USBD_ClrFeature>
      break;
 8004950:	e004      	b.n	800495c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004952:	6839      	ldr	r1, [r7, #0]
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fccf 	bl	80052f8 <USBD_CtlError>
      break;
 800495a:	bf00      	nop
    }
    break;
 800495c:	e004      	b.n	8004968 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800495e:	6839      	ldr	r1, [r7, #0]
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fcc9 	bl	80052f8 <USBD_CtlError>
    break;
 8004966:	bf00      	nop
  }

  return ret;
 8004968:	7bfb      	ldrb	r3, [r7, #15]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop

08004974 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800498a:	2b20      	cmp	r3, #32
 800498c:	d003      	beq.n	8004996 <USBD_StdItfReq+0x22>
 800498e:	2b40      	cmp	r3, #64	; 0x40
 8004990:	d001      	beq.n	8004996 <USBD_StdItfReq+0x22>
 8004992:	2b00      	cmp	r3, #0
 8004994:	d12a      	bne.n	80049ec <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800499c:	3b01      	subs	r3, #1
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d81d      	bhi.n	80049de <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	889b      	ldrh	r3, [r3, #4]
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d813      	bhi.n	80049d4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	6839      	ldr	r1, [r7, #0]
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	4798      	blx	r3
 80049ba:	4603      	mov	r3, r0
 80049bc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	88db      	ldrh	r3, [r3, #6]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d110      	bne.n	80049e8 <USBD_StdItfReq+0x74>
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10d      	bne.n	80049e8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fd5e 	bl	800548e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80049d2:	e009      	b.n	80049e8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80049d4:	6839      	ldr	r1, [r7, #0]
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 fc8e 	bl	80052f8 <USBD_CtlError>
      break;
 80049dc:	e004      	b.n	80049e8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80049de:	6839      	ldr	r1, [r7, #0]
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 fc89 	bl	80052f8 <USBD_CtlError>
      break;
 80049e6:	e000      	b.n	80049ea <USBD_StdItfReq+0x76>
      break;
 80049e8:	bf00      	nop
    }
    break;
 80049ea:	e004      	b.n	80049f6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80049ec:	6839      	ldr	r1, [r7, #0]
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fc82 	bl	80052f8 <USBD_CtlError>
    break;
 80049f4:	bf00      	nop
  }

  return ret;
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3710      	adds	r7, #16
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}

08004a00 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	889b      	ldrh	r3, [r3, #4]
 8004a12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a1c:	2b20      	cmp	r3, #32
 8004a1e:	d004      	beq.n	8004a2a <USBD_StdEPReq+0x2a>
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d002      	beq.n	8004a2a <USBD_StdEPReq+0x2a>
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00a      	beq.n	8004a3e <USBD_StdEPReq+0x3e>
 8004a28:	e135      	b.n	8004c96 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	6839      	ldr	r1, [r7, #0]
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	4603      	mov	r3, r0
 8004a3a:	73fb      	strb	r3, [r7, #15]
    break;
 8004a3c:	e130      	b.n	8004ca0 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	785b      	ldrb	r3, [r3, #1]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d03e      	beq.n	8004ac4 <USBD_StdEPReq+0xc4>
 8004a46:	2b03      	cmp	r3, #3
 8004a48:	d002      	beq.n	8004a50 <USBD_StdEPReq+0x50>
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d077      	beq.n	8004b3e <USBD_StdEPReq+0x13e>
 8004a4e:	e11c      	b.n	8004c8a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d002      	beq.n	8004a60 <USBD_StdEPReq+0x60>
 8004a5a:	2b03      	cmp	r3, #3
 8004a5c:	d015      	beq.n	8004a8a <USBD_StdEPReq+0x8a>
 8004a5e:	e02b      	b.n	8004ab8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004a60:	7bbb      	ldrb	r3, [r7, #14]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <USBD_StdEPReq+0x80>
 8004a66:	7bbb      	ldrb	r3, [r7, #14]
 8004a68:	2b80      	cmp	r3, #128	; 0x80
 8004a6a:	d009      	beq.n	8004a80 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004a6c:	7bbb      	ldrb	r3, [r7, #14]
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f001 f903 	bl	8005c7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f001 f8ff 	bl	8005c7c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004a7e:	e020      	b.n	8004ac2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004a80:	6839      	ldr	r1, [r7, #0]
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fc38 	bl	80052f8 <USBD_CtlError>
        break;
 8004a88:	e01b      	b.n	8004ac2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	885b      	ldrh	r3, [r3, #2]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10e      	bne.n	8004ab0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004a92:	7bbb      	ldrb	r3, [r7, #14]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <USBD_StdEPReq+0xb0>
 8004a98:	7bbb      	ldrb	r3, [r7, #14]
 8004a9a:	2b80      	cmp	r3, #128	; 0x80
 8004a9c:	d008      	beq.n	8004ab0 <USBD_StdEPReq+0xb0>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	88db      	ldrh	r3, [r3, #6]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d104      	bne.n	8004ab0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004aa6:	7bbb      	ldrb	r3, [r7, #14]
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f001 f8e6 	bl	8005c7c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 fcec 	bl	800548e <USBD_CtlSendStatus>

        break;
 8004ab6:	e004      	b.n	8004ac2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004ab8:	6839      	ldr	r1, [r7, #0]
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fc1c 	bl	80052f8 <USBD_CtlError>
        break;
 8004ac0:	bf00      	nop
      }
      break;
 8004ac2:	e0e7      	b.n	8004c94 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d002      	beq.n	8004ad4 <USBD_StdEPReq+0xd4>
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d015      	beq.n	8004afe <USBD_StdEPReq+0xfe>
 8004ad2:	e02d      	b.n	8004b30 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ad4:	7bbb      	ldrb	r3, [r7, #14]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00c      	beq.n	8004af4 <USBD_StdEPReq+0xf4>
 8004ada:	7bbb      	ldrb	r3, [r7, #14]
 8004adc:	2b80      	cmp	r3, #128	; 0x80
 8004ade:	d009      	beq.n	8004af4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004ae0:	7bbb      	ldrb	r3, [r7, #14]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f001 f8c9 	bl	8005c7c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 f8c5 	bl	8005c7c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004af2:	e023      	b.n	8004b3c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fbfe 	bl	80052f8 <USBD_CtlError>
        break;
 8004afc:	e01e      	b.n	8004b3c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	885b      	ldrh	r3, [r3, #2]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d119      	bne.n	8004b3a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004b06:	7bbb      	ldrb	r3, [r7, #14]
 8004b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d004      	beq.n	8004b1a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004b10:	7bbb      	ldrb	r3, [r7, #14]
 8004b12:	4619      	mov	r1, r3
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 f8d0 	bl	8005cba <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 fcb7 	bl	800548e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	6839      	ldr	r1, [r7, #0]
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	4798      	blx	r3
        }
        break;
 8004b2e:	e004      	b.n	8004b3a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004b30:	6839      	ldr	r1, [r7, #0]
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fbe0 	bl	80052f8 <USBD_CtlError>
        break;
 8004b38:	e000      	b.n	8004b3c <USBD_StdEPReq+0x13c>
        break;
 8004b3a:	bf00      	nop
      }
      break;
 8004b3c:	e0aa      	b.n	8004c94 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d002      	beq.n	8004b4e <USBD_StdEPReq+0x14e>
 8004b48:	2b03      	cmp	r3, #3
 8004b4a:	d032      	beq.n	8004bb2 <USBD_StdEPReq+0x1b2>
 8004b4c:	e097      	b.n	8004c7e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004b4e:	7bbb      	ldrb	r3, [r7, #14]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d007      	beq.n	8004b64 <USBD_StdEPReq+0x164>
 8004b54:	7bbb      	ldrb	r3, [r7, #14]
 8004b56:	2b80      	cmp	r3, #128	; 0x80
 8004b58:	d004      	beq.n	8004b64 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fbcb 	bl	80052f8 <USBD_CtlError>
          break;
 8004b62:	e091      	b.n	8004c88 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da0b      	bge.n	8004b84 <USBD_StdEPReq+0x184>
 8004b6c:	7bbb      	ldrb	r3, [r7, #14]
 8004b6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4413      	add	r3, r2
 8004b80:	3304      	adds	r3, #4
 8004b82:	e00b      	b.n	8004b9c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004b84:	7bbb      	ldrb	r3, [r7, #14]
 8004b86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	009b      	lsls	r3, r3, #2
 8004b92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	4413      	add	r3, r2
 8004b9a:	3304      	adds	r3, #4
 8004b9c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2202      	movs	r2, #2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fc15 	bl	80053da <USBD_CtlSendData>
        break;
 8004bb0:	e06a      	b.n	8004c88 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8004bb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	da11      	bge.n	8004bde <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004bba:	7bbb      	ldrb	r3, [r7, #14]
 8004bbc:	f003 020f 	and.w	r2, r3, #15
 8004bc0:	6879      	ldr	r1, [r7, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3324      	adds	r3, #36	; 0x24
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d117      	bne.n	8004c04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004bd4:	6839      	ldr	r1, [r7, #0]
 8004bd6:	6878      	ldr	r0, [r7, #4]
 8004bd8:	f000 fb8e 	bl	80052f8 <USBD_CtlError>
            break;
 8004bdc:	e054      	b.n	8004c88 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004bde:	7bbb      	ldrb	r3, [r7, #14]
 8004be0:	f003 020f 	and.w	r2, r3, #15
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	4613      	mov	r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	4413      	add	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	440b      	add	r3, r1
 8004bf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004bf4:	881b      	ldrh	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d104      	bne.n	8004c04 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb7b 	bl	80052f8 <USBD_CtlError>
            break;
 8004c02:	e041      	b.n	8004c88 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	da0b      	bge.n	8004c24 <USBD_StdEPReq+0x224>
 8004c0c:	7bbb      	ldrb	r3, [r7, #14]
 8004c0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	4413      	add	r3, r2
 8004c20:	3304      	adds	r3, #4
 8004c22:	e00b      	b.n	8004c3c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8004c24:	7bbb      	ldrb	r3, [r7, #14]
 8004c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	009b      	lsls	r3, r3, #2
 8004c2e:	4413      	add	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4413      	add	r3, r2
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004c3e:	7bbb      	ldrb	r3, [r7, #14]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d002      	beq.n	8004c4a <USBD_StdEPReq+0x24a>
 8004c44:	7bbb      	ldrb	r3, [r7, #14]
 8004c46:	2b80      	cmp	r3, #128	; 0x80
 8004c48:	d103      	bne.n	8004c52 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	e00e      	b.n	8004c70 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8004c52:	7bbb      	ldrb	r3, [r7, #14]
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f001 f84e 	bl	8005cf8 <USBD_LL_IsStallEP>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d003      	beq.n	8004c6a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2201      	movs	r2, #1
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	e002      	b.n	8004c70 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2202      	movs	r2, #2
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fbaf 	bl	80053da <USBD_CtlSendData>
          break;
 8004c7c:	e004      	b.n	8004c88 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fb39 	bl	80052f8 <USBD_CtlError>
        break;
 8004c86:	bf00      	nop
      }
      break;
 8004c88:	e004      	b.n	8004c94 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8004c8a:	6839      	ldr	r1, [r7, #0]
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fb33 	bl	80052f8 <USBD_CtlError>
      break;
 8004c92:	bf00      	nop
    }
    break;
 8004c94:	e004      	b.n	8004ca0 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8004c96:	6839      	ldr	r1, [r7, #0]
 8004c98:	6878      	ldr	r0, [r7, #4]
 8004c9a:	f000 fb2d 	bl	80052f8 <USBD_CtlError>
    break;
 8004c9e:	bf00      	nop
  }

  return ret;
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
	...

08004cac <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	885b      	ldrh	r3, [r3, #2]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	2b06      	cmp	r3, #6
 8004cce:	f200 8128 	bhi.w	8004f22 <USBD_GetDescriptor+0x276>
 8004cd2:	a201      	add	r2, pc, #4	; (adr r2, 8004cd8 <USBD_GetDescriptor+0x2c>)
 8004cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cd8:	08004cf5 	.word	0x08004cf5
 8004cdc:	08004d0d 	.word	0x08004d0d
 8004ce0:	08004d4d 	.word	0x08004d4d
 8004ce4:	08004f23 	.word	0x08004f23
 8004ce8:	08004f23 	.word	0x08004f23
 8004cec:	08004ec3 	.word	0x08004ec3
 8004cf0:	08004eef 	.word	0x08004eef
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	7c12      	ldrb	r2, [r2, #16]
 8004d00:	f107 0108 	add.w	r1, r7, #8
 8004d04:	4610      	mov	r0, r2
 8004d06:	4798      	blx	r3
 8004d08:	60f8      	str	r0, [r7, #12]
    break;
 8004d0a:	e112      	b.n	8004f32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	7c1b      	ldrb	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10d      	bne.n	8004d30 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1c:	f107 0208 	add.w	r2, r7, #8
 8004d20:	4610      	mov	r0, r2
 8004d22:	4798      	blx	r3
 8004d24:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	3301      	adds	r3, #1
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8004d2e:	e100      	b.n	8004f32 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	f107 0208 	add.w	r2, r7, #8
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4798      	blx	r3
 8004d40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3301      	adds	r3, #1
 8004d46:	2202      	movs	r2, #2
 8004d48:	701a      	strb	r2, [r3, #0]
    break;
 8004d4a:	e0f2      	b.n	8004f32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	885b      	ldrh	r3, [r3, #2]
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b05      	cmp	r3, #5
 8004d54:	f200 80ac 	bhi.w	8004eb0 <USBD_GetDescriptor+0x204>
 8004d58:	a201      	add	r2, pc, #4	; (adr r2, 8004d60 <USBD_GetDescriptor+0xb4>)
 8004d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5e:	bf00      	nop
 8004d60:	08004d79 	.word	0x08004d79
 8004d64:	08004dad 	.word	0x08004dad
 8004d68:	08004de1 	.word	0x08004de1
 8004d6c:	08004e15 	.word	0x08004e15
 8004d70:	08004e49 	.word	0x08004e49
 8004d74:	08004e7d 	.word	0x08004e7d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00b      	beq.n	8004d9c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	7c12      	ldrb	r2, [r2, #16]
 8004d90:	f107 0108 	add.w	r1, r7, #8
 8004d94:	4610      	mov	r0, r2
 8004d96:	4798      	blx	r3
 8004d98:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d9a:	e091      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004d9c:	6839      	ldr	r1, [r7, #0]
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f000 faaa 	bl	80052f8 <USBD_CtlError>
        err++;
 8004da4:	7afb      	ldrb	r3, [r7, #11]
 8004da6:	3301      	adds	r3, #1
 8004da8:	72fb      	strb	r3, [r7, #11]
      break;
 8004daa:	e089      	b.n	8004ec0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00b      	beq.n	8004dd0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	7c12      	ldrb	r2, [r2, #16]
 8004dc4:	f107 0108 	add.w	r1, r7, #8
 8004dc8:	4610      	mov	r0, r2
 8004dca:	4798      	blx	r3
 8004dcc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004dce:	e077      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fa90 	bl	80052f8 <USBD_CtlError>
        err++;
 8004dd8:	7afb      	ldrb	r3, [r7, #11]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	72fb      	strb	r3, [r7, #11]
      break;
 8004dde:	e06f      	b.n	8004ec0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004de6:	68db      	ldr	r3, [r3, #12]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00b      	beq.n	8004e04 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	687a      	ldr	r2, [r7, #4]
 8004df6:	7c12      	ldrb	r2, [r2, #16]
 8004df8:	f107 0108 	add.w	r1, r7, #8
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4798      	blx	r3
 8004e00:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e02:	e05d      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004e04:	6839      	ldr	r1, [r7, #0]
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fa76 	bl	80052f8 <USBD_CtlError>
        err++;
 8004e0c:	7afb      	ldrb	r3, [r7, #11]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	72fb      	strb	r3, [r7, #11]
      break;
 8004e12:	e055      	b.n	8004ec0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00b      	beq.n	8004e38 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	7c12      	ldrb	r2, [r2, #16]
 8004e2c:	f107 0108 	add.w	r1, r7, #8
 8004e30:	4610      	mov	r0, r2
 8004e32:	4798      	blx	r3
 8004e34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e36:	e043      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004e38:	6839      	ldr	r1, [r7, #0]
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 fa5c 	bl	80052f8 <USBD_CtlError>
        err++;
 8004e40:	7afb      	ldrb	r3, [r7, #11]
 8004e42:	3301      	adds	r3, #1
 8004e44:	72fb      	strb	r3, [r7, #11]
      break;
 8004e46:	e03b      	b.n	8004ec0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00b      	beq.n	8004e6c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	7c12      	ldrb	r2, [r2, #16]
 8004e60:	f107 0108 	add.w	r1, r7, #8
 8004e64:	4610      	mov	r0, r2
 8004e66:	4798      	blx	r3
 8004e68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e6a:	e029      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fa42 	bl	80052f8 <USBD_CtlError>
        err++;
 8004e74:	7afb      	ldrb	r3, [r7, #11]
 8004e76:	3301      	adds	r3, #1
 8004e78:	72fb      	strb	r3, [r7, #11]
      break;
 8004e7a:	e021      	b.n	8004ec0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e82:	699b      	ldr	r3, [r3, #24]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00b      	beq.n	8004ea0 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	687a      	ldr	r2, [r7, #4]
 8004e92:	7c12      	ldrb	r2, [r2, #16]
 8004e94:	f107 0108 	add.w	r1, r7, #8
 8004e98:	4610      	mov	r0, r2
 8004e9a:	4798      	blx	r3
 8004e9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004e9e:	e00f      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8004ea0:	6839      	ldr	r1, [r7, #0]
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 fa28 	bl	80052f8 <USBD_CtlError>
        err++;
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	72fb      	strb	r3, [r7, #11]
      break;
 8004eae:	e007      	b.n	8004ec0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8004eb0:	6839      	ldr	r1, [r7, #0]
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fa20 	bl	80052f8 <USBD_CtlError>
      err++;
 8004eb8:	7afb      	ldrb	r3, [r7, #11]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8004ebe:	bf00      	nop
    }
    break;
 8004ec0:	e037      	b.n	8004f32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	7c1b      	ldrb	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d109      	bne.n	8004ede <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ed0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed2:	f107 0208 	add.w	r2, r7, #8
 8004ed6:	4610      	mov	r0, r2
 8004ed8:	4798      	blx	r3
 8004eda:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8004edc:	e029      	b.n	8004f32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8004ede:	6839      	ldr	r1, [r7, #0]
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 fa09 	bl	80052f8 <USBD_CtlError>
      err++;
 8004ee6:	7afb      	ldrb	r3, [r7, #11]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	72fb      	strb	r3, [r7, #11]
    break;
 8004eec:	e021      	b.n	8004f32 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	7c1b      	ldrb	r3, [r3, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10d      	bne.n	8004f12 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	f107 0208 	add.w	r2, r7, #8
 8004f02:	4610      	mov	r0, r2
 8004f04:	4798      	blx	r3
 8004f06:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8004f10:	e00f      	b.n	8004f32 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8004f12:	6839      	ldr	r1, [r7, #0]
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f9ef 	bl	80052f8 <USBD_CtlError>
      err++;
 8004f1a:	7afb      	ldrb	r3, [r7, #11]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	72fb      	strb	r3, [r7, #11]
    break;
 8004f20:	e007      	b.n	8004f32 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8004f22:	6839      	ldr	r1, [r7, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f9e7 	bl	80052f8 <USBD_CtlError>
    err++;
 8004f2a:	7afb      	ldrb	r3, [r7, #11]
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	72fb      	strb	r3, [r7, #11]
    break;
 8004f30:	bf00      	nop
  }

  if (err != 0U)
 8004f32:	7afb      	ldrb	r3, [r7, #11]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11e      	bne.n	8004f76 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	88db      	ldrh	r3, [r3, #6]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d016      	beq.n	8004f6e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8004f40:	893b      	ldrh	r3, [r7, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00e      	beq.n	8004f64 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	88da      	ldrh	r2, [r3, #6]
 8004f4a:	893b      	ldrh	r3, [r7, #8]
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	bf28      	it	cs
 8004f50:	4613      	movcs	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8004f56:	893b      	ldrh	r3, [r7, #8]
 8004f58:	461a      	mov	r2, r3
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 fa3c 	bl	80053da <USBD_CtlSendData>
 8004f62:	e009      	b.n	8004f78 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8004f64:	6839      	ldr	r1, [r7, #0]
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9c6 	bl	80052f8 <USBD_CtlError>
 8004f6c:	e004      	b.n	8004f78 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fa8d 	bl	800548e <USBD_CtlSendStatus>
 8004f74:	e000      	b.n	8004f78 <USBD_GetDescriptor+0x2cc>
    return;
 8004f76:	bf00      	nop
    }
  }
}
 8004f78:	3710      	adds	r7, #16
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}
 8004f7e:	bf00      	nop

08004f80 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	889b      	ldrh	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d130      	bne.n	8004ff4 <USBD_SetAddress+0x74>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	88db      	ldrh	r3, [r3, #6]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d12c      	bne.n	8004ff4 <USBD_SetAddress+0x74>
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	885b      	ldrh	r3, [r3, #2]
 8004f9e:	2b7f      	cmp	r3, #127	; 0x7f
 8004fa0:	d828      	bhi.n	8004ff4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	885b      	ldrh	r3, [r3, #2]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fb4:	2b03      	cmp	r3, #3
 8004fb6:	d104      	bne.n	8004fc2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f99c 	bl	80052f8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fc0:	e01c      	b.n	8004ffc <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	7bfa      	ldrb	r2, [r7, #15]
 8004fc6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 febe 	bl	8005d50 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fa5a 	bl	800548e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d004      	beq.n	8004fea <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2202      	movs	r2, #2
 8004fe4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe8:	e008      	b.n	8004ffc <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ff2:	e003      	b.n	8004ffc <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004ff4:	6839      	ldr	r1, [r7, #0]
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f000 f97e 	bl	80052f8 <USBD_CtlError>
  }
}
 8004ffc:	bf00      	nop
 8004ffe:	3710      	adds	r7, #16
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	885b      	ldrh	r3, [r3, #2]
 8005016:	b2da      	uxtb	r2, r3
 8005018:	4b4b      	ldr	r3, [pc, #300]	; (8005148 <USBD_SetConfig+0x144>)
 800501a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800501c:	4b4a      	ldr	r3, [pc, #296]	; (8005148 <USBD_SetConfig+0x144>)
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d905      	bls.n	8005030 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 f966 	bl	80052f8 <USBD_CtlError>
    return USBD_FAIL;
 800502c:	2303      	movs	r3, #3
 800502e:	e087      	b.n	8005140 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005036:	2b02      	cmp	r3, #2
 8005038:	d002      	beq.n	8005040 <USBD_SetConfig+0x3c>
 800503a:	2b03      	cmp	r3, #3
 800503c:	d025      	beq.n	800508a <USBD_SetConfig+0x86>
 800503e:	e071      	b.n	8005124 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005040:	4b41      	ldr	r3, [pc, #260]	; (8005148 <USBD_SetConfig+0x144>)
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01c      	beq.n	8005082 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005048:	4b3f      	ldr	r3, [pc, #252]	; (8005148 <USBD_SetConfig+0x144>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005052:	4b3d      	ldr	r3, [pc, #244]	; (8005148 <USBD_SetConfig+0x144>)
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7ff f9a7 	bl	80043ac <USBD_SetClassConfig>
 800505e:	4603      	mov	r3, r0
 8005060:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005062:	7bfb      	ldrb	r3, [r7, #15]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d004      	beq.n	8005072 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005068:	6839      	ldr	r1, [r7, #0]
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f944 	bl	80052f8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005070:	e065      	b.n	800513e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fa0b 	bl	800548e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2203      	movs	r2, #3
 800507c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005080:	e05d      	b.n	800513e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 fa03 	bl	800548e <USBD_CtlSendStatus>
    break;
 8005088:	e059      	b.n	800513e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800508a:	4b2f      	ldr	r3, [pc, #188]	; (8005148 <USBD_SetConfig+0x144>)
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d112      	bne.n	80050b8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800509a:	4b2b      	ldr	r3, [pc, #172]	; (8005148 <USBD_SetConfig+0x144>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	461a      	mov	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <USBD_SetConfig+0x144>)
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	4619      	mov	r1, r3
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f7ff f99a 	bl	80043e4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f000 f9ec 	bl	800548e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80050b6:	e042      	b.n	800513e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80050b8:	4b23      	ldr	r3, [pc, #140]	; (8005148 <USBD_SetConfig+0x144>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d02a      	beq.n	800511c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	4619      	mov	r1, r3
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7ff f988 	bl	80043e4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80050d4:	4b1c      	ldr	r3, [pc, #112]	; (8005148 <USBD_SetConfig+0x144>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80050de:	4b1a      	ldr	r3, [pc, #104]	; (8005148 <USBD_SetConfig+0x144>)
 80050e0:	781b      	ldrb	r3, [r3, #0]
 80050e2:	4619      	mov	r1, r3
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f7ff f961 	bl	80043ac <USBD_SetClassConfig>
 80050ea:	4603      	mov	r3, r0
 80050ec:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80050ee:	7bfb      	ldrb	r3, [r7, #15]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00f      	beq.n	8005114 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80050f4:	6839      	ldr	r1, [r7, #0]
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f8fe 	bl	80052f8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff f96d 	bl	80043e4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005112:	e014      	b.n	800513e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f9ba 	bl	800548e <USBD_CtlSendStatus>
    break;
 800511a:	e010      	b.n	800513e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f9b6 	bl	800548e <USBD_CtlSendStatus>
    break;
 8005122:	e00c      	b.n	800513e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8005124:	6839      	ldr	r1, [r7, #0]
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8e6 	bl	80052f8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800512c:	4b06      	ldr	r3, [pc, #24]	; (8005148 <USBD_SetConfig+0x144>)
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f7ff f956 	bl	80043e4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8005138:	2303      	movs	r3, #3
 800513a:	73fb      	strb	r3, [r7, #15]
    break;
 800513c:	bf00      	nop
  }

  return ret;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005140:	4618      	mov	r0, r3
 8005142:	3710      	adds	r7, #16
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}
 8005148:	20000204 	.word	0x20000204

0800514c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	88db      	ldrh	r3, [r3, #6]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d004      	beq.n	8005168 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800515e:	6839      	ldr	r1, [r7, #0]
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f8c9 	bl	80052f8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8005166:	e021      	b.n	80051ac <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516e:	2b01      	cmp	r3, #1
 8005170:	db17      	blt.n	80051a2 <USBD_GetConfig+0x56>
 8005172:	2b02      	cmp	r3, #2
 8005174:	dd02      	ble.n	800517c <USBD_GetConfig+0x30>
 8005176:	2b03      	cmp	r3, #3
 8005178:	d00b      	beq.n	8005192 <USBD_GetConfig+0x46>
 800517a:	e012      	b.n	80051a2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	3308      	adds	r3, #8
 8005186:	2201      	movs	r2, #1
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f000 f925 	bl	80053da <USBD_CtlSendData>
      break;
 8005190:	e00c      	b.n	80051ac <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	3304      	adds	r3, #4
 8005196:	2201      	movs	r2, #1
 8005198:	4619      	mov	r1, r3
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f91d 	bl	80053da <USBD_CtlSendData>
      break;
 80051a0:	e004      	b.n	80051ac <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f8a7 	bl	80052f8 <USBD_CtlError>
      break;
 80051aa:	bf00      	nop
}
 80051ac:	bf00      	nop
 80051ae:	3708      	adds	r7, #8
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051c4:	3b01      	subs	r3, #1
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d81e      	bhi.n	8005208 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	88db      	ldrh	r3, [r3, #6]
 80051ce:	2b02      	cmp	r3, #2
 80051d0:	d004      	beq.n	80051dc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80051d2:	6839      	ldr	r1, [r7, #0]
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f88f 	bl	80052f8 <USBD_CtlError>
      break;
 80051da:	e01a      	b.n	8005212 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d005      	beq.n	80051f8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f043 0202 	orr.w	r2, r3, #2
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	330c      	adds	r3, #12
 80051fc:	2202      	movs	r2, #2
 80051fe:	4619      	mov	r1, r3
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f8ea 	bl	80053da <USBD_CtlSendData>
    break;
 8005206:	e004      	b.n	8005212 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f874 	bl	80052f8 <USBD_CtlError>
    break;
 8005210:	bf00      	nop
  }
}
 8005212:	bf00      	nop
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b082      	sub	sp, #8
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
 8005222:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	885b      	ldrh	r3, [r3, #2]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d106      	bne.n	800523a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f000 f92a 	bl	800548e <USBD_CtlSendStatus>
  }
}
 800523a:	bf00      	nop
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005252:	3b01      	subs	r3, #1
 8005254:	2b02      	cmp	r3, #2
 8005256:	d80b      	bhi.n	8005270 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	885b      	ldrh	r3, [r3, #2]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d10c      	bne.n	800527a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 f910 	bl	800548e <USBD_CtlSendStatus>
      }
      break;
 800526e:	e004      	b.n	800527a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f840 	bl	80052f8 <USBD_CtlError>
      break;
 8005278:	e000      	b.n	800527c <USBD_ClrFeature+0x3a>
      break;
 800527a:	bf00      	nop
  }
}
 800527c:	bf00      	nop
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b084      	sub	sp, #16
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	781a      	ldrb	r2, [r3, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3301      	adds	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	781a      	ldrb	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	3301      	adds	r3, #1
 80052ac:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fad3 	bl	800485a <SWAPBYTE>
 80052b4:	4603      	mov	r3, r0
 80052b6:	461a      	mov	r2, r3
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3301      	adds	r3, #1
 80052c0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	3301      	adds	r3, #1
 80052c6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80052c8:	68f8      	ldr	r0, [r7, #12]
 80052ca:	f7ff fac6 	bl	800485a <SWAPBYTE>
 80052ce:	4603      	mov	r3, r0
 80052d0:	461a      	mov	r2, r3
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	3301      	adds	r3, #1
 80052da:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f7ff fab9 	bl	800485a <SWAPBYTE>
 80052e8:	4603      	mov	r3, r0
 80052ea:	461a      	mov	r2, r3
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	80da      	strh	r2, [r3, #6]
}
 80052f0:	bf00      	nop
 80052f2:	3710      	adds	r7, #16
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b082      	sub	sp, #8
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005302:	2180      	movs	r1, #128	; 0x80
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fcb9 	bl	8005c7c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800530a:	2100      	movs	r1, #0
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fcb5 	bl	8005c7c <USBD_LL_StallEP>
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	60f8      	str	r0, [r7, #12]
 8005322:	60b9      	str	r1, [r7, #8]
 8005324:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d036      	beq.n	800539e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005334:	6938      	ldr	r0, [r7, #16]
 8005336:	f000 f836 	bl	80053a6 <USBD_GetLen>
 800533a:	4603      	mov	r3, r0
 800533c:	3301      	adds	r3, #1
 800533e:	b29b      	uxth	r3, r3
 8005340:	005b      	lsls	r3, r3, #1
 8005342:	b29a      	uxth	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005348:	7dfb      	ldrb	r3, [r7, #23]
 800534a:	68ba      	ldr	r2, [r7, #8]
 800534c:	4413      	add	r3, r2
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	7812      	ldrb	r2, [r2, #0]
 8005352:	701a      	strb	r2, [r3, #0]
  idx++;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
 8005356:	3301      	adds	r3, #1
 8005358:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800535a:	7dfb      	ldrb	r3, [r7, #23]
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	4413      	add	r3, r2
 8005360:	2203      	movs	r2, #3
 8005362:	701a      	strb	r2, [r3, #0]
  idx++;
 8005364:	7dfb      	ldrb	r3, [r7, #23]
 8005366:	3301      	adds	r3, #1
 8005368:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800536a:	e013      	b.n	8005394 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
 800536e:	68ba      	ldr	r2, [r7, #8]
 8005370:	4413      	add	r3, r2
 8005372:	693a      	ldr	r2, [r7, #16]
 8005374:	7812      	ldrb	r2, [r2, #0]
 8005376:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	3301      	adds	r3, #1
 800537c:	613b      	str	r3, [r7, #16]
    idx++;
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	3301      	adds	r3, #1
 8005382:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005384:	7dfb      	ldrb	r3, [r7, #23]
 8005386:	68ba      	ldr	r2, [r7, #8]
 8005388:	4413      	add	r3, r2
 800538a:	2200      	movs	r2, #0
 800538c:	701a      	strb	r2, [r3, #0]
    idx++;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
 8005390:	3301      	adds	r3, #1
 8005392:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e7      	bne.n	800536c <USBD_GetString+0x52>
 800539c:	e000      	b.n	80053a0 <USBD_GetString+0x86>
    return;
 800539e:	bf00      	nop
  }
}
 80053a0:	3718      	adds	r7, #24
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80053b6:	e005      	b.n	80053c4 <USBD_GetLen+0x1e>
  {
    len++;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
 80053ba:	3301      	adds	r3, #1
 80053bc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	3301      	adds	r3, #1
 80053c2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1f5      	bne.n	80053b8 <USBD_GetLen+0x12>
  }

  return len;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr

080053da <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80053da:	b580      	push	{r7, lr}
 80053dc:	b084      	sub	sp, #16
 80053de:	af00      	add	r7, sp, #0
 80053e0:	60f8      	str	r0, [r7, #12]
 80053e2:	60b9      	str	r1, [r7, #8]
 80053e4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2202      	movs	r2, #2
 80053ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	687a      	ldr	r2, [r7, #4]
 80053f2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	687a      	ldr	r2, [r7, #4]
 80053f8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	2100      	movs	r1, #0
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fcc4 	bl	8005d8e <USBD_LL_Transmit>

  return USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68ba      	ldr	r2, [r7, #8]
 8005420:	2100      	movs	r1, #0
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fcb3 	bl	8005d8e <USBD_LL_Transmit>

  return USBD_OK;
 8005428:	2300      	movs	r3, #0
}
 800542a:	4618      	mov	r0, r3
 800542c:	3710      	adds	r7, #16
 800542e:	46bd      	mov	sp, r7
 8005430:	bd80      	pop	{r7, pc}

08005432 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8005432:	b580      	push	{r7, lr}
 8005434:	b084      	sub	sp, #16
 8005436:	af00      	add	r7, sp, #0
 8005438:	60f8      	str	r0, [r7, #12]
 800543a:	60b9      	str	r1, [r7, #8]
 800543c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2203      	movs	r2, #3
 8005442:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	687a      	ldr	r2, [r7, #4]
 8005452:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	2100      	movs	r1, #0
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f000 fcb7 	bl	8005dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b084      	sub	sp, #16
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	68ba      	ldr	r2, [r7, #8]
 800547c:	2100      	movs	r1, #0
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fca6 	bl	8005dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}

0800548e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b082      	sub	sp, #8
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2204      	movs	r2, #4
 800549a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800549e:	2300      	movs	r3, #0
 80054a0:	2200      	movs	r2, #0
 80054a2:	2100      	movs	r1, #0
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fc72 	bl	8005d8e <USBD_LL_Transmit>

  return USBD_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2205      	movs	r2, #5
 80054c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054c4:	2300      	movs	r3, #0
 80054c6:	2200      	movs	r2, #0
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 fc80 	bl	8005dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
	...

080054dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80054e0:	2200      	movs	r2, #0
 80054e2:	4912      	ldr	r1, [pc, #72]	; (800552c <MX_USB_DEVICE_Init+0x50>)
 80054e4:	4812      	ldr	r0, [pc, #72]	; (8005530 <MX_USB_DEVICE_Init+0x54>)
 80054e6:	f7fe fef3 	bl	80042d0 <USBD_Init>
 80054ea:	4603      	mov	r3, r0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d001      	beq.n	80054f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80054f0:	f7fb f968 	bl	80007c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80054f4:	490f      	ldr	r1, [pc, #60]	; (8005534 <MX_USB_DEVICE_Init+0x58>)
 80054f6:	480e      	ldr	r0, [pc, #56]	; (8005530 <MX_USB_DEVICE_Init+0x54>)
 80054f8:	f7fe ff20 	bl	800433c <USBD_RegisterClass>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005502:	f7fb f95f 	bl	80007c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005506:	490c      	ldr	r1, [pc, #48]	; (8005538 <MX_USB_DEVICE_Init+0x5c>)
 8005508:	4809      	ldr	r0, [pc, #36]	; (8005530 <MX_USB_DEVICE_Init+0x54>)
 800550a:	f7fe fe75 	bl	80041f8 <USBD_CDC_RegisterInterface>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8005514:	f7fb f956 	bl	80007c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005518:	4805      	ldr	r0, [pc, #20]	; (8005530 <MX_USB_DEVICE_Init+0x54>)
 800551a:	f7fe ff30 	bl	800437e <USBD_Start>
 800551e:	4603      	mov	r3, r0
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8005524:	f7fb f94e 	bl	80007c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005528:	bf00      	nop
 800552a:	bd80      	pop	{r7, pc}
 800552c:	20000130 	.word	0x20000130
 8005530:	20000214 	.word	0x20000214
 8005534:	20000018 	.word	0x20000018
 8005538:	2000011c 	.word	0x2000011c

0800553c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005540:	2200      	movs	r2, #0
 8005542:	4905      	ldr	r1, [pc, #20]	; (8005558 <CDC_Init_FS+0x1c>)
 8005544:	4805      	ldr	r0, [pc, #20]	; (800555c <CDC_Init_FS+0x20>)
 8005546:	f7fe fe6c 	bl	8004222 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800554a:	4905      	ldr	r1, [pc, #20]	; (8005560 <CDC_Init_FS+0x24>)
 800554c:	4803      	ldr	r0, [pc, #12]	; (800555c <CDC_Init_FS+0x20>)
 800554e:	f7fe fe81 	bl	8004254 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005554:	4618      	mov	r0, r3
 8005556:	bd80      	pop	{r7, pc}
 8005558:	20000ce4 	.word	0x20000ce4
 800555c:	20000214 	.word	0x20000214
 8005560:	200004e4 	.word	0x200004e4

08005564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005564:	b480      	push	{r7}
 8005566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800556a:	4618      	mov	r0, r3
 800556c:	46bd      	mov	sp, r7
 800556e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005572:	4770      	bx	lr

08005574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	6039      	str	r1, [r7, #0]
 800557e:	71fb      	strb	r3, [r7, #7]
 8005580:	4613      	mov	r3, r2
 8005582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	2b23      	cmp	r3, #35	; 0x23
 8005588:	d84a      	bhi.n	8005620 <CDC_Control_FS+0xac>
 800558a:	a201      	add	r2, pc, #4	; (adr r2, 8005590 <CDC_Control_FS+0x1c>)
 800558c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005590:	08005621 	.word	0x08005621
 8005594:	08005621 	.word	0x08005621
 8005598:	08005621 	.word	0x08005621
 800559c:	08005621 	.word	0x08005621
 80055a0:	08005621 	.word	0x08005621
 80055a4:	08005621 	.word	0x08005621
 80055a8:	08005621 	.word	0x08005621
 80055ac:	08005621 	.word	0x08005621
 80055b0:	08005621 	.word	0x08005621
 80055b4:	08005621 	.word	0x08005621
 80055b8:	08005621 	.word	0x08005621
 80055bc:	08005621 	.word	0x08005621
 80055c0:	08005621 	.word	0x08005621
 80055c4:	08005621 	.word	0x08005621
 80055c8:	08005621 	.word	0x08005621
 80055cc:	08005621 	.word	0x08005621
 80055d0:	08005621 	.word	0x08005621
 80055d4:	08005621 	.word	0x08005621
 80055d8:	08005621 	.word	0x08005621
 80055dc:	08005621 	.word	0x08005621
 80055e0:	08005621 	.word	0x08005621
 80055e4:	08005621 	.word	0x08005621
 80055e8:	08005621 	.word	0x08005621
 80055ec:	08005621 	.word	0x08005621
 80055f0:	08005621 	.word	0x08005621
 80055f4:	08005621 	.word	0x08005621
 80055f8:	08005621 	.word	0x08005621
 80055fc:	08005621 	.word	0x08005621
 8005600:	08005621 	.word	0x08005621
 8005604:	08005621 	.word	0x08005621
 8005608:	08005621 	.word	0x08005621
 800560c:	08005621 	.word	0x08005621
 8005610:	08005621 	.word	0x08005621
 8005614:	08005621 	.word	0x08005621
 8005618:	08005621 	.word	0x08005621
 800561c:	08005621 	.word	0x08005621
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005620:	bf00      	nop
  }

  return (USBD_OK);
 8005622:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005624:	4618      	mov	r0, r3
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4805      	ldr	r0, [pc, #20]	; (8005654 <CDC_Receive_FS+0x24>)
 800563e:	f7fe fe09 	bl	8004254 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005642:	4804      	ldr	r0, [pc, #16]	; (8005654 <CDC_Receive_FS+0x24>)
 8005644:	f7fe fe1a 	bl	800427c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005648:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800564a:	4618      	mov	r0, r3
 800564c:	3708      	adds	r7, #8
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000214 	.word	0x20000214

08005658 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005658:	b480      	push	{r7}
 800565a:	b087      	sub	sp, #28
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	4613      	mov	r3, r2
 8005664:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005666:	2300      	movs	r3, #0
 8005668:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800566a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800566e:	4618      	mov	r0, r3
 8005670:	371c      	adds	r7, #28
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
	...

0800567c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	6039      	str	r1, [r7, #0]
 8005686:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2212      	movs	r2, #18
 800568c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800568e:	4b03      	ldr	r3, [pc, #12]	; (800569c <USBD_FS_DeviceDescriptor+0x20>)
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	2000014c 	.word	0x2000014c

080056a0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	6039      	str	r1, [r7, #0]
 80056aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2204      	movs	r2, #4
 80056b0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80056b2:	4b03      	ldr	r3, [pc, #12]	; (80056c0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80056b4:	4618      	mov	r0, r3
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	20000160 	.word	0x20000160

080056c4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	4603      	mov	r3, r0
 80056cc:	6039      	str	r1, [r7, #0]
 80056ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d105      	bne.n	80056e2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056d6:	683a      	ldr	r2, [r7, #0]
 80056d8:	4907      	ldr	r1, [pc, #28]	; (80056f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80056da:	4808      	ldr	r0, [pc, #32]	; (80056fc <USBD_FS_ProductStrDescriptor+0x38>)
 80056dc:	f7ff fe1d 	bl	800531a <USBD_GetString>
 80056e0:	e004      	b.n	80056ec <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	4904      	ldr	r1, [pc, #16]	; (80056f8 <USBD_FS_ProductStrDescriptor+0x34>)
 80056e6:	4805      	ldr	r0, [pc, #20]	; (80056fc <USBD_FS_ProductStrDescriptor+0x38>)
 80056e8:	f7ff fe17 	bl	800531a <USBD_GetString>
  }
  return USBD_StrDesc;
 80056ec:	4b02      	ldr	r3, [pc, #8]	; (80056f8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	200014e4 	.word	0x200014e4
 80056fc:	08006090 	.word	0x08006090

08005700 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	4603      	mov	r3, r0
 8005708:	6039      	str	r1, [r7, #0]
 800570a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	4904      	ldr	r1, [pc, #16]	; (8005720 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005710:	4804      	ldr	r0, [pc, #16]	; (8005724 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005712:	f7ff fe02 	bl	800531a <USBD_GetString>
  return USBD_StrDesc;
 8005716:	4b02      	ldr	r3, [pc, #8]	; (8005720 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005718:	4618      	mov	r0, r3
 800571a:	3708      	adds	r7, #8
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	200014e4 	.word	0x200014e4
 8005724:	080060a8 	.word	0x080060a8

08005728 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	4603      	mov	r3, r0
 8005730:	6039      	str	r1, [r7, #0]
 8005732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	221a      	movs	r2, #26
 8005738:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800573a:	f000 f843 	bl	80057c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800573e:	4b02      	ldr	r3, [pc, #8]	; (8005748 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005740:	4618      	mov	r0, r3
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	20000164 	.word	0x20000164

0800574c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	4603      	mov	r3, r0
 8005754:	6039      	str	r1, [r7, #0]
 8005756:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005758:	79fb      	ldrb	r3, [r7, #7]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d105      	bne.n	800576a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	4907      	ldr	r1, [pc, #28]	; (8005780 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005762:	4808      	ldr	r0, [pc, #32]	; (8005784 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005764:	f7ff fdd9 	bl	800531a <USBD_GetString>
 8005768:	e004      	b.n	8005774 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800576a:	683a      	ldr	r2, [r7, #0]
 800576c:	4904      	ldr	r1, [pc, #16]	; (8005780 <USBD_FS_ConfigStrDescriptor+0x34>)
 800576e:	4805      	ldr	r0, [pc, #20]	; (8005784 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005770:	f7ff fdd3 	bl	800531a <USBD_GetString>
  }
  return USBD_StrDesc;
 8005774:	4b02      	ldr	r3, [pc, #8]	; (8005780 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	200014e4 	.word	0x200014e4
 8005784:	080060bc 	.word	0x080060bc

08005788 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	4603      	mov	r3, r0
 8005790:	6039      	str	r1, [r7, #0]
 8005792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005794:	79fb      	ldrb	r3, [r7, #7]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d105      	bne.n	80057a6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	4907      	ldr	r1, [pc, #28]	; (80057bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800579e:	4808      	ldr	r0, [pc, #32]	; (80057c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80057a0:	f7ff fdbb 	bl	800531a <USBD_GetString>
 80057a4:	e004      	b.n	80057b0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	4904      	ldr	r1, [pc, #16]	; (80057bc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80057aa:	4805      	ldr	r0, [pc, #20]	; (80057c0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80057ac:	f7ff fdb5 	bl	800531a <USBD_GetString>
  }
  return USBD_StrDesc;
 80057b0:	4b02      	ldr	r3, [pc, #8]	; (80057bc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	200014e4 	.word	0x200014e4
 80057c0:	080060c8 	.word	0x080060c8

080057c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80057ca:	4b0f      	ldr	r3, [pc, #60]	; (8005808 <Get_SerialNum+0x44>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80057d0:	4b0e      	ldr	r3, [pc, #56]	; (800580c <Get_SerialNum+0x48>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80057d6:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <Get_SerialNum+0x4c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80057ea:	2208      	movs	r2, #8
 80057ec:	4909      	ldr	r1, [pc, #36]	; (8005814 <Get_SerialNum+0x50>)
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f000 f814 	bl	800581c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80057f4:	2204      	movs	r2, #4
 80057f6:	4908      	ldr	r1, [pc, #32]	; (8005818 <Get_SerialNum+0x54>)
 80057f8:	68b8      	ldr	r0, [r7, #8]
 80057fa:	f000 f80f 	bl	800581c <IntToUnicode>
  }
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	1fff7a10 	.word	0x1fff7a10
 800580c:	1fff7a14 	.word	0x1fff7a14
 8005810:	1fff7a18 	.word	0x1fff7a18
 8005814:	20000166 	.word	0x20000166
 8005818:	20000176 	.word	0x20000176

0800581c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800581c:	b480      	push	{r7}
 800581e:	b087      	sub	sp, #28
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	60b9      	str	r1, [r7, #8]
 8005826:	4613      	mov	r3, r2
 8005828:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800582a:	2300      	movs	r3, #0
 800582c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800582e:	2300      	movs	r3, #0
 8005830:	75fb      	strb	r3, [r7, #23]
 8005832:	e027      	b.n	8005884 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	0f1b      	lsrs	r3, r3, #28
 8005838:	2b09      	cmp	r3, #9
 800583a:	d80b      	bhi.n	8005854 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	0f1b      	lsrs	r3, r3, #28
 8005840:	b2da      	uxtb	r2, r3
 8005842:	7dfb      	ldrb	r3, [r7, #23]
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	4619      	mov	r1, r3
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	440b      	add	r3, r1
 800584c:	3230      	adds	r2, #48	; 0x30
 800584e:	b2d2      	uxtb	r2, r2
 8005850:	701a      	strb	r2, [r3, #0]
 8005852:	e00a      	b.n	800586a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	0f1b      	lsrs	r3, r3, #28
 8005858:	b2da      	uxtb	r2, r3
 800585a:	7dfb      	ldrb	r3, [r7, #23]
 800585c:	005b      	lsls	r3, r3, #1
 800585e:	4619      	mov	r1, r3
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	440b      	add	r3, r1
 8005864:	3237      	adds	r2, #55	; 0x37
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	011b      	lsls	r3, r3, #4
 800586e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005870:	7dfb      	ldrb	r3, [r7, #23]
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	3301      	adds	r3, #1
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	4413      	add	r3, r2
 800587a:	2200      	movs	r2, #0
 800587c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800587e:	7dfb      	ldrb	r3, [r7, #23]
 8005880:	3301      	adds	r3, #1
 8005882:	75fb      	strb	r3, [r7, #23]
 8005884:	7dfa      	ldrb	r2, [r7, #23]
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	429a      	cmp	r2, r3
 800588a:	d3d3      	bcc.n	8005834 <IntToUnicode+0x18>
  }
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80058a0:	f107 0314 	add.w	r3, r7, #20
 80058a4:	2200      	movs	r2, #0
 80058a6:	601a      	str	r2, [r3, #0]
 80058a8:	605a      	str	r2, [r3, #4]
 80058aa:	609a      	str	r2, [r3, #8]
 80058ac:	60da      	str	r2, [r3, #12]
 80058ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058b8:	d13a      	bne.n	8005930 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 80058c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c2:	4a1d      	ldr	r2, [pc, #116]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 80058c4:	f043 0301 	orr.w	r3, r3, #1
 80058c8:	6313      	str	r3, [r2, #48]	; 0x30
 80058ca:	4b1b      	ldr	r3, [pc, #108]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	613b      	str	r3, [r7, #16]
 80058d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80058d6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80058da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058dc:	2302      	movs	r3, #2
 80058de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058e0:	2300      	movs	r3, #0
 80058e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058e4:	2303      	movs	r3, #3
 80058e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80058e8:	230a      	movs	r3, #10
 80058ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ec:	f107 0314 	add.w	r3, r7, #20
 80058f0:	4619      	mov	r1, r3
 80058f2:	4812      	ldr	r0, [pc, #72]	; (800593c <HAL_PCD_MspInit+0xa4>)
 80058f4:	f7fb f9e0 	bl	8000cb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 80058fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fc:	4a0e      	ldr	r2, [pc, #56]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 80058fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005902:	6353      	str	r3, [r2, #52]	; 0x34
 8005904:	2300      	movs	r3, #0
 8005906:	60fb      	str	r3, [r7, #12]
 8005908:	4b0b      	ldr	r3, [pc, #44]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 800590a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800590c:	4a0a      	ldr	r2, [pc, #40]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 800590e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005912:	6453      	str	r3, [r2, #68]	; 0x44
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <HAL_PCD_MspInit+0xa0>)
 8005916:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005920:	2200      	movs	r2, #0
 8005922:	2100      	movs	r1, #0
 8005924:	2043      	movs	r0, #67	; 0x43
 8005926:	f7fb f990 	bl	8000c4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800592a:	2043      	movs	r0, #67	; 0x43
 800592c:	f7fb f9a9 	bl	8000c82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005930:	bf00      	nop
 8005932:	3728      	adds	r7, #40	; 0x28
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	40023800 	.word	0x40023800
 800593c:	40020000 	.word	0x40020000

08005940 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005954:	4619      	mov	r1, r3
 8005956:	4610      	mov	r0, r2
 8005958:	f7fe fd5c 	bl	8004414 <USBD_LL_SetupStage>
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	460b      	mov	r3, r1
 800596e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	00db      	lsls	r3, r3, #3
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	78fb      	ldrb	r3, [r7, #3]
 800598c:	4619      	mov	r1, r3
 800598e:	f7fe fd94 	bl	80044ba <USBD_LL_DataOutStage>
}
 8005992:	bf00      	nop
 8005994:	3708      	adds	r7, #8
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b082      	sub	sp, #8
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	460b      	mov	r3, r1
 80059a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80059ac:	78fa      	ldrb	r2, [r7, #3]
 80059ae:	6879      	ldr	r1, [r7, #4]
 80059b0:	4613      	mov	r3, r2
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	1a9b      	subs	r3, r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	440b      	add	r3, r1
 80059ba:	3348      	adds	r3, #72	; 0x48
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	4619      	mov	r1, r3
 80059c2:	f7fe fddd 	bl	8004580 <USBD_LL_DataInStage>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}

080059ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80059ce:	b580      	push	{r7, lr}
 80059d0:	b082      	sub	sp, #8
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80059dc:	4618      	mov	r0, r3
 80059de:	f7fe fee1 	bl	80047a4 <USBD_LL_SOF>
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80059fe:	2300      	movs	r3, #0
 8005a00:	73fb      	strb	r3, [r7, #15]
 8005a02:	e008      	b.n	8005a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d102      	bne.n	8005a12 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
 8005a10:	e001      	b.n	8005a16 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005a12:	f7fa fed7 	bl	80007c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a1c:	7bfa      	ldrb	r2, [r7, #15]
 8005a1e:	4611      	mov	r1, r2
 8005a20:	4618      	mov	r0, r3
 8005a22:	f7fe fe84 	bl	800472e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7fe fe3d 	bl	80046ac <USBD_LL_Reset>
}
 8005a32:	bf00      	nop
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	f7fe fe7f 	bl	800474e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005a70:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <HAL_PCD_SuspendCallback+0x48>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	4a03      	ldr	r2, [pc, #12]	; (8005a84 <HAL_PCD_SuspendCallback+0x48>)
 8005a76:	f043 0306 	orr.w	r3, r3, #6
 8005a7a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005a7c:	bf00      	nop
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	e000ed00 	.word	0xe000ed00

08005a88 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005a96:	4618      	mov	r0, r3
 8005a98:	f7fe fe6e 	bl	8004778 <USBD_LL_Resume>
}
 8005a9c:	bf00      	nop
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	460b      	mov	r3, r1
 8005aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	4611      	mov	r1, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fe99 	bl	80047f2 <USBD_LL_IsoOUTIncomplete>
}
 8005ac0:	bf00      	nop
 8005ac2:	3708      	adds	r7, #8
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ada:	78fa      	ldrb	r2, [r7, #3]
 8005adc:	4611      	mov	r1, r2
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe fe7a 	bl	80047d8 <USBD_LL_IsoINIncomplete>
}
 8005ae4:	bf00      	nop
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fe86 	bl	800480c <USBD_LL_DevConnected>
}
 8005b00:	bf00      	nop
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005b16:	4618      	mov	r0, r3
 8005b18:	f7fe fe83 	bl	8004822 <USBD_LL_DevDisconnected>
}
 8005b1c:	bf00      	nop
 8005b1e:	3708      	adds	r7, #8
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d13c      	bne.n	8005bae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8005b34:	4a20      	ldr	r2, [pc, #128]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a1e      	ldr	r2, [pc, #120]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b40:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8005b44:	4b1c      	ldr	r3, [pc, #112]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005b4a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8005b4c:	4b1a      	ldr	r3, [pc, #104]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b4e:	2204      	movs	r2, #4
 8005b50:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8005b52:	4b19      	ldr	r3, [pc, #100]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b54:	2202      	movs	r2, #2
 8005b56:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8005b58:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005b5e:	4b16      	ldr	r3, [pc, #88]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b60:	2202      	movs	r2, #2
 8005b62:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8005b64:	4b14      	ldr	r3, [pc, #80]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8005b6a:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8005b70:	4b11      	ldr	r3, [pc, #68]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b72:	2200      	movs	r2, #0
 8005b74:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8005b76:	4b10      	ldr	r3, [pc, #64]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b78:	2200      	movs	r2, #0
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8005b7c:	4b0e      	ldr	r3, [pc, #56]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b7e:	2200      	movs	r2, #0
 8005b80:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8005b82:	480d      	ldr	r0, [pc, #52]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b84:	f7fb fa32 	bl	8000fec <HAL_PCD_Init>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8005b8e:	f7fa fe19 	bl	80007c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8005b92:	2180      	movs	r1, #128	; 0x80
 8005b94:	4808      	ldr	r0, [pc, #32]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005b96:	f7fc fb90 	bl	80022ba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8005b9a:	2240      	movs	r2, #64	; 0x40
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	4806      	ldr	r0, [pc, #24]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005ba0:	f7fc fb44 	bl	800222c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8005ba4:	2280      	movs	r2, #128	; 0x80
 8005ba6:	2101      	movs	r1, #1
 8005ba8:	4803      	ldr	r0, [pc, #12]	; (8005bb8 <USBD_LL_Init+0x94>)
 8005baa:	f7fc fb3f 	bl	800222c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	200016e4 	.word	0x200016e4

08005bbc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fb fb27 	bl	8001226 <HAL_PCD_Start>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8005bdc:	7bfb      	ldrb	r3, [r7, #15]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f000 f92a 	bl	8005e38 <USBD_Get_USB_Status>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b084      	sub	sp, #16
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
 8005bfa:	4608      	mov	r0, r1
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	461a      	mov	r2, r3
 8005c00:	4603      	mov	r3, r0
 8005c02:	70fb      	strb	r3, [r7, #3]
 8005c04:	460b      	mov	r3, r1
 8005c06:	70bb      	strb	r3, [r7, #2]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005c1a:	78bb      	ldrb	r3, [r7, #2]
 8005c1c:	883a      	ldrh	r2, [r7, #0]
 8005c1e:	78f9      	ldrb	r1, [r7, #3]
 8005c20:	f7fb ff0b 	bl	8001a3a <HAL_PCD_EP_Open>
 8005c24:	4603      	mov	r3, r0
 8005c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f000 f904 	bl	8005e38 <USBD_Get_USB_Status>
 8005c30:	4603      	mov	r3, r0
 8005c32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	3710      	adds	r7, #16
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b084      	sub	sp, #16
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	6078      	str	r0, [r7, #4]
 8005c46:	460b      	mov	r3, r1
 8005c48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c58:	78fa      	ldrb	r2, [r7, #3]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fb ff54 	bl	8001b0a <HAL_PCD_EP_Close>
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f000 f8e5 	bl	8005e38 <USBD_Get_USB_Status>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005c72:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	460b      	mov	r3, r1
 8005c86:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005c96:	78fa      	ldrb	r2, [r7, #3]
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fc f82c 	bl	8001cf8 <HAL_PCD_EP_SetStall>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005ca4:	7bfb      	ldrb	r3, [r7, #15]
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f8c6 	bl	8005e38 <USBD_Get_USB_Status>
 8005cac:	4603      	mov	r3, r0
 8005cae:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005cb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3710      	adds	r7, #16
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005cd4:	78fa      	ldrb	r2, [r7, #3]
 8005cd6:	4611      	mov	r1, r2
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fc f871 	bl	8001dc0 <HAL_PCD_EP_ClrStall>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8005ce2:	7bfb      	ldrb	r3, [r7, #15]
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f8a7 	bl	8005e38 <USBD_Get_USB_Status>
 8005cea:	4603      	mov	r3, r0
 8005cec:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8005cee:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3710      	adds	r7, #16
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b085      	sub	sp, #20
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	460b      	mov	r3, r1
 8005d02:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d0a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005d0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	da0b      	bge.n	8005d2c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d1a:	68f9      	ldr	r1, [r7, #12]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	00db      	lsls	r3, r3, #3
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	333e      	adds	r3, #62	; 0x3e
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	e00b      	b.n	8005d44 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005d2c:	78fb      	ldrb	r3, [r7, #3]
 8005d2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	4613      	mov	r3, r2
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	1a9b      	subs	r3, r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	440b      	add	r3, r1
 8005d3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005d42:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3714      	adds	r7, #20
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4e:	4770      	bx	lr

08005d50 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005d6a:	78fa      	ldrb	r2, [r7, #3]
 8005d6c:	4611      	mov	r1, r2
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7fb fe3e 	bl	80019f0 <HAL_PCD_SetAddress>
 8005d74:	4603      	mov	r3, r0
 8005d76:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d78:	7bfb      	ldrb	r3, [r7, #15]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f000 f85c 	bl	8005e38 <USBD_Get_USB_Status>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8005d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3710      	adds	r7, #16
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}

08005d8e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005d8e:	b580      	push	{r7, lr}
 8005d90:	b086      	sub	sp, #24
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	60f8      	str	r0, [r7, #12]
 8005d96:	607a      	str	r2, [r7, #4]
 8005d98:	603b      	str	r3, [r7, #0]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005dac:	7af9      	ldrb	r1, [r7, #11]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	f7fb ff57 	bl	8001c64 <HAL_PCD_EP_Transmit>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 f83b 	bl	8005e38 <USBD_Get_USB_Status>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005dc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3718      	adds	r7, #24
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	607a      	str	r2, [r7, #4]
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8005dee:	7af9      	ldrb	r1, [r7, #11]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	f7fb fed3 	bl	8001b9e <HAL_PCD_EP_Receive>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8005dfc:	7dfb      	ldrb	r3, [r7, #23]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f81a 	bl	8005e38 <USBD_Get_USB_Status>
 8005e04:	4603      	mov	r3, r0
 8005e06:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8005e08:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3718      	adds	r7, #24
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b082      	sub	sp, #8
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7fb ff03 	bl	8001c34 <HAL_PCD_EP_GetRxCount>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3708      	adds	r7, #8
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	4603      	mov	r3, r0
 8005e40:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	2b03      	cmp	r3, #3
 8005e4a:	d817      	bhi.n	8005e7c <USBD_Get_USB_Status+0x44>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <USBD_Get_USB_Status+0x1c>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e65 	.word	0x08005e65
 8005e58:	08005e6b 	.word	0x08005e6b
 8005e5c:	08005e71 	.word	0x08005e71
 8005e60:	08005e77 	.word	0x08005e77
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	73fb      	strb	r3, [r7, #15]
    break;
 8005e68:	e00b      	b.n	8005e82 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	73fb      	strb	r3, [r7, #15]
    break;
 8005e6e:	e008      	b.n	8005e82 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005e70:	2301      	movs	r3, #1
 8005e72:	73fb      	strb	r3, [r7, #15]
    break;
 8005e74:	e005      	b.n	8005e82 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005e76:	2303      	movs	r3, #3
 8005e78:	73fb      	strb	r3, [r7, #15]
    break;
 8005e7a:	e002      	b.n	8005e82 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005e7c:	2303      	movs	r3, #3
 8005e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8005e80:	bf00      	nop
  }
  return usb_status;
 8005e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <__errno>:
 8005e90:	4b01      	ldr	r3, [pc, #4]	; (8005e98 <__errno+0x8>)
 8005e92:	6818      	ldr	r0, [r3, #0]
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop
 8005e98:	20000180 	.word	0x20000180

08005e9c <__libc_init_array>:
 8005e9c:	b570      	push	{r4, r5, r6, lr}
 8005e9e:	4e0d      	ldr	r6, [pc, #52]	; (8005ed4 <__libc_init_array+0x38>)
 8005ea0:	4c0d      	ldr	r4, [pc, #52]	; (8005ed8 <__libc_init_array+0x3c>)
 8005ea2:	1ba4      	subs	r4, r4, r6
 8005ea4:	10a4      	asrs	r4, r4, #2
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	42a5      	cmp	r5, r4
 8005eaa:	d109      	bne.n	8005ec0 <__libc_init_array+0x24>
 8005eac:	4e0b      	ldr	r6, [pc, #44]	; (8005edc <__libc_init_array+0x40>)
 8005eae:	4c0c      	ldr	r4, [pc, #48]	; (8005ee0 <__libc_init_array+0x44>)
 8005eb0:	f000 f8e2 	bl	8006078 <_init>
 8005eb4:	1ba4      	subs	r4, r4, r6
 8005eb6:	10a4      	asrs	r4, r4, #2
 8005eb8:	2500      	movs	r5, #0
 8005eba:	42a5      	cmp	r5, r4
 8005ebc:	d105      	bne.n	8005eca <__libc_init_array+0x2e>
 8005ebe:	bd70      	pop	{r4, r5, r6, pc}
 8005ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ec4:	4798      	blx	r3
 8005ec6:	3501      	adds	r5, #1
 8005ec8:	e7ee      	b.n	8005ea8 <__libc_init_array+0xc>
 8005eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ece:	4798      	blx	r3
 8005ed0:	3501      	adds	r5, #1
 8005ed2:	e7f2      	b.n	8005eba <__libc_init_array+0x1e>
 8005ed4:	080060d8 	.word	0x080060d8
 8005ed8:	080060d8 	.word	0x080060d8
 8005edc:	080060d8 	.word	0x080060d8
 8005ee0:	080060dc 	.word	0x080060dc

08005ee4 <malloc>:
 8005ee4:	4b02      	ldr	r3, [pc, #8]	; (8005ef0 <malloc+0xc>)
 8005ee6:	4601      	mov	r1, r0
 8005ee8:	6818      	ldr	r0, [r3, #0]
 8005eea:	f000 b859 	b.w	8005fa0 <_malloc_r>
 8005eee:	bf00      	nop
 8005ef0:	20000180 	.word	0x20000180

08005ef4 <free>:
 8005ef4:	4b02      	ldr	r3, [pc, #8]	; (8005f00 <free+0xc>)
 8005ef6:	4601      	mov	r1, r0
 8005ef8:	6818      	ldr	r0, [r3, #0]
 8005efa:	f000 b803 	b.w	8005f04 <_free_r>
 8005efe:	bf00      	nop
 8005f00:	20000180 	.word	0x20000180

08005f04 <_free_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4605      	mov	r5, r0
 8005f08:	2900      	cmp	r1, #0
 8005f0a:	d045      	beq.n	8005f98 <_free_r+0x94>
 8005f0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f10:	1f0c      	subs	r4, r1, #4
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	bfb8      	it	lt
 8005f16:	18e4      	addlt	r4, r4, r3
 8005f18:	f000 f8ac 	bl	8006074 <__malloc_lock>
 8005f1c:	4a1f      	ldr	r2, [pc, #124]	; (8005f9c <_free_r+0x98>)
 8005f1e:	6813      	ldr	r3, [r2, #0]
 8005f20:	4610      	mov	r0, r2
 8005f22:	b933      	cbnz	r3, 8005f32 <_free_r+0x2e>
 8005f24:	6063      	str	r3, [r4, #4]
 8005f26:	6014      	str	r4, [r2, #0]
 8005f28:	4628      	mov	r0, r5
 8005f2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f2e:	f000 b8a2 	b.w	8006076 <__malloc_unlock>
 8005f32:	42a3      	cmp	r3, r4
 8005f34:	d90c      	bls.n	8005f50 <_free_r+0x4c>
 8005f36:	6821      	ldr	r1, [r4, #0]
 8005f38:	1862      	adds	r2, r4, r1
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	bf04      	itt	eq
 8005f3e:	681a      	ldreq	r2, [r3, #0]
 8005f40:	685b      	ldreq	r3, [r3, #4]
 8005f42:	6063      	str	r3, [r4, #4]
 8005f44:	bf04      	itt	eq
 8005f46:	1852      	addeq	r2, r2, r1
 8005f48:	6022      	streq	r2, [r4, #0]
 8005f4a:	6004      	str	r4, [r0, #0]
 8005f4c:	e7ec      	b.n	8005f28 <_free_r+0x24>
 8005f4e:	4613      	mov	r3, r2
 8005f50:	685a      	ldr	r2, [r3, #4]
 8005f52:	b10a      	cbz	r2, 8005f58 <_free_r+0x54>
 8005f54:	42a2      	cmp	r2, r4
 8005f56:	d9fa      	bls.n	8005f4e <_free_r+0x4a>
 8005f58:	6819      	ldr	r1, [r3, #0]
 8005f5a:	1858      	adds	r0, r3, r1
 8005f5c:	42a0      	cmp	r0, r4
 8005f5e:	d10b      	bne.n	8005f78 <_free_r+0x74>
 8005f60:	6820      	ldr	r0, [r4, #0]
 8005f62:	4401      	add	r1, r0
 8005f64:	1858      	adds	r0, r3, r1
 8005f66:	4282      	cmp	r2, r0
 8005f68:	6019      	str	r1, [r3, #0]
 8005f6a:	d1dd      	bne.n	8005f28 <_free_r+0x24>
 8005f6c:	6810      	ldr	r0, [r2, #0]
 8005f6e:	6852      	ldr	r2, [r2, #4]
 8005f70:	605a      	str	r2, [r3, #4]
 8005f72:	4401      	add	r1, r0
 8005f74:	6019      	str	r1, [r3, #0]
 8005f76:	e7d7      	b.n	8005f28 <_free_r+0x24>
 8005f78:	d902      	bls.n	8005f80 <_free_r+0x7c>
 8005f7a:	230c      	movs	r3, #12
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	e7d3      	b.n	8005f28 <_free_r+0x24>
 8005f80:	6820      	ldr	r0, [r4, #0]
 8005f82:	1821      	adds	r1, r4, r0
 8005f84:	428a      	cmp	r2, r1
 8005f86:	bf04      	itt	eq
 8005f88:	6811      	ldreq	r1, [r2, #0]
 8005f8a:	6852      	ldreq	r2, [r2, #4]
 8005f8c:	6062      	str	r2, [r4, #4]
 8005f8e:	bf04      	itt	eq
 8005f90:	1809      	addeq	r1, r1, r0
 8005f92:	6021      	streq	r1, [r4, #0]
 8005f94:	605c      	str	r4, [r3, #4]
 8005f96:	e7c7      	b.n	8005f28 <_free_r+0x24>
 8005f98:	bd38      	pop	{r3, r4, r5, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000208 	.word	0x20000208

08005fa0 <_malloc_r>:
 8005fa0:	b570      	push	{r4, r5, r6, lr}
 8005fa2:	1ccd      	adds	r5, r1, #3
 8005fa4:	f025 0503 	bic.w	r5, r5, #3
 8005fa8:	3508      	adds	r5, #8
 8005faa:	2d0c      	cmp	r5, #12
 8005fac:	bf38      	it	cc
 8005fae:	250c      	movcc	r5, #12
 8005fb0:	2d00      	cmp	r5, #0
 8005fb2:	4606      	mov	r6, r0
 8005fb4:	db01      	blt.n	8005fba <_malloc_r+0x1a>
 8005fb6:	42a9      	cmp	r1, r5
 8005fb8:	d903      	bls.n	8005fc2 <_malloc_r+0x22>
 8005fba:	230c      	movs	r3, #12
 8005fbc:	6033      	str	r3, [r6, #0]
 8005fbe:	2000      	movs	r0, #0
 8005fc0:	bd70      	pop	{r4, r5, r6, pc}
 8005fc2:	f000 f857 	bl	8006074 <__malloc_lock>
 8005fc6:	4a21      	ldr	r2, [pc, #132]	; (800604c <_malloc_r+0xac>)
 8005fc8:	6814      	ldr	r4, [r2, #0]
 8005fca:	4621      	mov	r1, r4
 8005fcc:	b991      	cbnz	r1, 8005ff4 <_malloc_r+0x54>
 8005fce:	4c20      	ldr	r4, [pc, #128]	; (8006050 <_malloc_r+0xb0>)
 8005fd0:	6823      	ldr	r3, [r4, #0]
 8005fd2:	b91b      	cbnz	r3, 8005fdc <_malloc_r+0x3c>
 8005fd4:	4630      	mov	r0, r6
 8005fd6:	f000 f83d 	bl	8006054 <_sbrk_r>
 8005fda:	6020      	str	r0, [r4, #0]
 8005fdc:	4629      	mov	r1, r5
 8005fde:	4630      	mov	r0, r6
 8005fe0:	f000 f838 	bl	8006054 <_sbrk_r>
 8005fe4:	1c43      	adds	r3, r0, #1
 8005fe6:	d124      	bne.n	8006032 <_malloc_r+0x92>
 8005fe8:	230c      	movs	r3, #12
 8005fea:	6033      	str	r3, [r6, #0]
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 f842 	bl	8006076 <__malloc_unlock>
 8005ff2:	e7e4      	b.n	8005fbe <_malloc_r+0x1e>
 8005ff4:	680b      	ldr	r3, [r1, #0]
 8005ff6:	1b5b      	subs	r3, r3, r5
 8005ff8:	d418      	bmi.n	800602c <_malloc_r+0x8c>
 8005ffa:	2b0b      	cmp	r3, #11
 8005ffc:	d90f      	bls.n	800601e <_malloc_r+0x7e>
 8005ffe:	600b      	str	r3, [r1, #0]
 8006000:	50cd      	str	r5, [r1, r3]
 8006002:	18cc      	adds	r4, r1, r3
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f836 	bl	8006076 <__malloc_unlock>
 800600a:	f104 000b 	add.w	r0, r4, #11
 800600e:	1d23      	adds	r3, r4, #4
 8006010:	f020 0007 	bic.w	r0, r0, #7
 8006014:	1ac3      	subs	r3, r0, r3
 8006016:	d0d3      	beq.n	8005fc0 <_malloc_r+0x20>
 8006018:	425a      	negs	r2, r3
 800601a:	50e2      	str	r2, [r4, r3]
 800601c:	e7d0      	b.n	8005fc0 <_malloc_r+0x20>
 800601e:	428c      	cmp	r4, r1
 8006020:	684b      	ldr	r3, [r1, #4]
 8006022:	bf16      	itet	ne
 8006024:	6063      	strne	r3, [r4, #4]
 8006026:	6013      	streq	r3, [r2, #0]
 8006028:	460c      	movne	r4, r1
 800602a:	e7eb      	b.n	8006004 <_malloc_r+0x64>
 800602c:	460c      	mov	r4, r1
 800602e:	6849      	ldr	r1, [r1, #4]
 8006030:	e7cc      	b.n	8005fcc <_malloc_r+0x2c>
 8006032:	1cc4      	adds	r4, r0, #3
 8006034:	f024 0403 	bic.w	r4, r4, #3
 8006038:	42a0      	cmp	r0, r4
 800603a:	d005      	beq.n	8006048 <_malloc_r+0xa8>
 800603c:	1a21      	subs	r1, r4, r0
 800603e:	4630      	mov	r0, r6
 8006040:	f000 f808 	bl	8006054 <_sbrk_r>
 8006044:	3001      	adds	r0, #1
 8006046:	d0cf      	beq.n	8005fe8 <_malloc_r+0x48>
 8006048:	6025      	str	r5, [r4, #0]
 800604a:	e7db      	b.n	8006004 <_malloc_r+0x64>
 800604c:	20000208 	.word	0x20000208
 8006050:	2000020c 	.word	0x2000020c

08006054 <_sbrk_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4c06      	ldr	r4, [pc, #24]	; (8006070 <_sbrk_r+0x1c>)
 8006058:	2300      	movs	r3, #0
 800605a:	4605      	mov	r5, r0
 800605c:	4608      	mov	r0, r1
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	f7fa fc18 	bl	8000894 <_sbrk>
 8006064:	1c43      	adds	r3, r0, #1
 8006066:	d102      	bne.n	800606e <_sbrk_r+0x1a>
 8006068:	6823      	ldr	r3, [r4, #0]
 800606a:	b103      	cbz	r3, 800606e <_sbrk_r+0x1a>
 800606c:	602b      	str	r3, [r5, #0]
 800606e:	bd38      	pop	{r3, r4, r5, pc}
 8006070:	20001aec 	.word	0x20001aec

08006074 <__malloc_lock>:
 8006074:	4770      	bx	lr

08006076 <__malloc_unlock>:
 8006076:	4770      	bx	lr

08006078 <_init>:
 8006078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800607a:	bf00      	nop
 800607c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800607e:	bc08      	pop	{r3}
 8006080:	469e      	mov	lr, r3
 8006082:	4770      	bx	lr

08006084 <_fini>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr
